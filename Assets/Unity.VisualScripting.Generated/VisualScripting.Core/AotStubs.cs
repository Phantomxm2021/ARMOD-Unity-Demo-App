#pragma warning disable 219
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Unity.VisualScriptingGenerated.Aot
{
    // Unity.VisualScripting.AnimatorMessageListener.op_Equality
    // Unity.VisualScripting.AnimatorMessageListener.op_Implicit
    // Unity.VisualScripting.AnimatorMessageListener.op_Inequality
    // Unity.VisualScripting.FlowMachine.op_Equality
    // Unity.VisualScripting.FlowMachine.op_Implicit
    // Unity.VisualScripting.FlowMachine.op_Inequality
    // Unity.VisualScripting.FlowMacro.aotStubs
    // Unity.VisualScripting.FlowMacro.graph
    // Unity.VisualScripting.FlowMacro.hideFlags
    // Unity.VisualScripting.FlowMacro.isDescriptionValid
    // Unity.VisualScripting.FlowMacro.name
    // Unity.VisualScripting.FlowMacro.op_Equality
    // Unity.VisualScripting.FlowMacro.op_Implicit
    // Unity.VisualScripting.FlowMacro.op_Inequality
    // Unity.VisualScripting.StateMachine.op_Equality
    // Unity.VisualScripting.StateMachine.op_Implicit
    // Unity.VisualScripting.StateMachine.op_Inequality
    // Unity.VisualScripting.StateMacro.op_Equality
    // Unity.VisualScripting.StateMacro.op_Implicit
    // Unity.VisualScripting.StateMacro.op_Inequality
    // float.Epsilon
    // float.Equals
    // float.Equals
    // float.GetTypeCode
    // float.MaxValue
    // float.MinValue
    // float.NaN
    // float.NegativeInfinity
    // float.op_Equality
    // float.op_GreaterThan
    // float.op_GreaterThanOrEqual
    // float.op_Inequality
    // float.op_LessThan
    // float.op_LessThanOrEqual
    // float.PositiveInfinity
    // float.ToString
    // int.Equals
    // int.GetTypeCode
    // int.Parse
    // int.ToString
    // long.ToString
    // Unity.VisualScriptingAotList..ctor
    // object.GetType
    // object.ToString
    // ScreenRatios._16_10
    // ScreenRatios._16_9
    // ScreenRatios._18_9
    // ScreenRatios._3_2
    // ScreenRatios._37_18
    // ScreenRatios._4_3
    // ScreenRatios._5_4
    // ScreenRatios.IphoneX_195_9
    // Simulater.op_Equality
    // Simulater.op_Implicit
    // Simulater.op_Inequality
    // string.Concat
    // string.Concat
    // string.Concat
    // string.Concat
    // string.Concat
    // string.Format
    // string.Format
    // string.Format
    // string.Format
    // string.IsNullOrWhiteSpace
    // string.Join
    // string.op_Equality
    // string.op_Inequality
    // string.Substring
    // System.Collections.IList.Add
    // System.Collections.IList.Contains
    // System.DateTime..ctor
    // System.DateTime..ctor
    // System.DateTime.AddMilliseconds
    // System.DateTime.AddSeconds
    // System.DateTime.Subtract
    // System.DateTime.UtcNow
    // System.Exception.Data
    // System.Exception.HelpLink
    // System.Exception.HResult
    // System.Exception.InnerException
    // System.Exception.Message
    // System.Exception.Source
    // System.Exception.StackTrace
    // System.Exception.TargetSite
    // System.Random..ctor
    // System.Random.Next
    // System.TimeSpan.Hours
    // System.TimeSpan.Milliseconds
    // System.TimeSpan.Minutes
    // System.TimeSpan.Seconds
    // System.TimeSpan.TotalDays
    // System.TimeSpan.TotalHours
    // System.TimeSpan.TotalMilliseconds
    // System.TimeSpan.TotalSeconds
    // System.Type.GetTypeCode
    // UnityEngine.AI.NavMesh.AddLink
    // UnityEngine.AI.NavMesh.AddLink
    // UnityEngine.AI.NavMesh.AllAreas
    // UnityEngine.AI.NavMesh.avoidancePredictionTime
    // UnityEngine.AI.NavMesh.onPreUpdate
    // UnityEngine.AI.NavMesh.pathfindingIterationsPerFrame
    // UnityEngine.AI.NavMeshAgent.acceleration
    // UnityEngine.AI.NavMeshAgent.agentTypeID
    // UnityEngine.AI.NavMeshAgent.angularSpeed
    // UnityEngine.AI.NavMeshAgent.areaMask
    // UnityEngine.AI.NavMeshAgent.autoBraking
    // UnityEngine.AI.NavMeshAgent.autoRepath
    // UnityEngine.AI.NavMeshAgent.autoTraverseOffMeshLink
    // UnityEngine.AI.NavMeshAgent.avoidancePriority
    // UnityEngine.AI.NavMeshAgent.baseOffset
    // UnityEngine.AI.NavMeshAgent.currentOffMeshLinkData
    // UnityEngine.AI.NavMeshAgent.desiredVelocity
    // UnityEngine.AI.NavMeshAgent.destination
    // UnityEngine.AI.NavMeshAgent.enabled
    // UnityEngine.AI.NavMeshAgent.gameObject
    // UnityEngine.AI.NavMeshAgent.hasPath
    // UnityEngine.AI.NavMeshAgent.height
    // UnityEngine.AI.NavMeshAgent.hideFlags
    // UnityEngine.AI.NavMeshAgent.isActiveAndEnabled
    // UnityEngine.AI.NavMeshAgent.isOnNavMesh
    // UnityEngine.AI.NavMeshAgent.isOnOffMeshLink
    // UnityEngine.AI.NavMeshAgent.isPathStale
    // UnityEngine.AI.NavMeshAgent.isStopped
    // UnityEngine.AI.NavMeshAgent.name
    // UnityEngine.AI.NavMeshAgent.navMeshOwner
    // UnityEngine.AI.NavMeshAgent.nextOffMeshLinkData
    // UnityEngine.AI.NavMeshAgent.nextPosition
    // UnityEngine.AI.NavMeshAgent.obstacleAvoidanceType
    // UnityEngine.AI.NavMeshAgent.op_Equality
    // UnityEngine.AI.NavMeshAgent.op_Implicit
    // UnityEngine.AI.NavMeshAgent.op_Inequality
    // UnityEngine.AI.NavMeshAgent.path
    // UnityEngine.AI.NavMeshAgent.pathEndPosition
    // UnityEngine.AI.NavMeshAgent.pathPending
    // UnityEngine.AI.NavMeshAgent.pathStatus
    // UnityEngine.AI.NavMeshAgent.radius
    // UnityEngine.AI.NavMeshAgent.remainingDistance
    // UnityEngine.AI.NavMeshAgent.speed
    // UnityEngine.AI.NavMeshAgent.steeringTarget
    // UnityEngine.AI.NavMeshAgent.stoppingDistance
    // UnityEngine.AI.NavMeshAgent.tag
    // UnityEngine.AI.NavMeshAgent.transform
    // UnityEngine.AI.NavMeshAgent.updatePosition
    // UnityEngine.AI.NavMeshAgent.updateRotation
    // UnityEngine.AI.NavMeshAgent.updateUpAxis
    // UnityEngine.AI.NavMeshAgent.velocity
    // UnityEngine.AI.NavMeshData.hideFlags
    // UnityEngine.AI.NavMeshData.name
    // UnityEngine.AI.NavMeshData.op_Equality
    // UnityEngine.AI.NavMeshData.op_Implicit
    // UnityEngine.AI.NavMeshData.op_Inequality
    // UnityEngine.AI.NavMeshData.position
    // UnityEngine.AI.NavMeshData.rotation
    // UnityEngine.AI.NavMeshData.sourceBounds
    // UnityEngine.AI.NavMeshObstacle.op_Equality
    // UnityEngine.AI.NavMeshObstacle.op_Implicit
    // UnityEngine.AI.NavMeshObstacle.op_Inequality
    // UnityEngine.AI.OffMeshLink.op_Equality
    // UnityEngine.AI.OffMeshLink.op_Implicit
    // UnityEngine.AI.OffMeshLink.op_Inequality
    // UnityEngine.AnchoredJoint2D.op_Equality
    // UnityEngine.AnchoredJoint2D.op_Implicit
    // UnityEngine.AnchoredJoint2D.op_Inequality
    // UnityEngine.Animation.animatePhysics
    // UnityEngine.Animation.clip
    // UnityEngine.Animation.cullingType
    // UnityEngine.Animation.enabled
    // UnityEngine.Animation.gameObject
    // UnityEngine.Animation.hideFlags
    // UnityEngine.Animation.isActiveAndEnabled
    // UnityEngine.Animation.isPlaying
    // UnityEngine.Animation.localBounds
    // UnityEngine.Animation.name
    // UnityEngine.Animation.op_Equality
    // UnityEngine.Animation.op_Implicit
    // UnityEngine.Animation.op_Inequality
    // UnityEngine.Animation.playAutomatically
    // UnityEngine.Animation.tag
    // UnityEngine.Animation.transform
    // UnityEngine.Animation.wrapMode
    // UnityEngine.AnimationClip.op_Equality
    // UnityEngine.AnimationClip.op_Implicit
    // UnityEngine.AnimationClip.op_Inequality
    // UnityEngine.Animations.AimConstraint.op_Equality
    // UnityEngine.Animations.AimConstraint.op_Implicit
    // UnityEngine.Animations.AimConstraint.op_Inequality
    // UnityEngine.Animations.LookAtConstraint.op_Equality
    // UnityEngine.Animations.LookAtConstraint.op_Implicit
    // UnityEngine.Animations.LookAtConstraint.op_Inequality
    // UnityEngine.Animations.ParentConstraint.op_Equality
    // UnityEngine.Animations.ParentConstraint.op_Implicit
    // UnityEngine.Animations.ParentConstraint.op_Inequality
    // UnityEngine.Animations.PositionConstraint.op_Equality
    // UnityEngine.Animations.PositionConstraint.op_Implicit
    // UnityEngine.Animations.PositionConstraint.op_Inequality
    // UnityEngine.Animations.RotationConstraint.op_Equality
    // UnityEngine.Animations.RotationConstraint.op_Implicit
    // UnityEngine.Animations.RotationConstraint.op_Inequality
    // UnityEngine.Animations.ScaleConstraint.op_Equality
    // UnityEngine.Animations.ScaleConstraint.op_Implicit
    // UnityEngine.Animations.ScaleConstraint.op_Inequality
    // UnityEngine.Animator.angularVelocity
    // UnityEngine.Animator.applyRootMotion
    // UnityEngine.Animator.avatar
    // UnityEngine.Animator.bodyPosition
    // UnityEngine.Animator.bodyRotation
    // UnityEngine.Animator.cullingMode
    // UnityEngine.Animator.deltaPosition
    // UnityEngine.Animator.deltaRotation
    // UnityEngine.Animator.enabled
    // UnityEngine.Animator.feetPivotActive
    // UnityEngine.Animator.fireEvents
    // UnityEngine.Animator.gameObject
    // UnityEngine.Animator.GetFloat
    // UnityEngine.Animator.gravityWeight
    // UnityEngine.Animator.hasBoundPlayables
    // UnityEngine.Animator.hasRootMotion
    // UnityEngine.Animator.hasTransformHierarchy
    // UnityEngine.Animator.hideFlags
    // UnityEngine.Animator.humanScale
    // UnityEngine.Animator.isActiveAndEnabled
    // UnityEngine.Animator.isHuman
    // UnityEngine.Animator.isInitialized
    // UnityEngine.Animator.isMatchingTarget
    // UnityEngine.Animator.isOptimizable
    // UnityEngine.Animator.keepAnimatorControllerStateOnDisable
    // UnityEngine.Animator.layerCount
    // UnityEngine.Animator.layersAffectMassCenter
    // UnityEngine.Animator.leftFeetBottomHeight
    // UnityEngine.Animator.logWarnings
    // UnityEngine.Animator.name
    // UnityEngine.Animator.op_Equality
    // UnityEngine.Animator.op_Implicit
    // UnityEngine.Animator.op_Inequality
    // UnityEngine.Animator.parameterCount
    // UnityEngine.Animator.parameters
    // UnityEngine.Animator.pivotPosition
    // UnityEngine.Animator.pivotWeight
    // UnityEngine.Animator.playableGraph
    // UnityEngine.Animator.playbackTime
    // UnityEngine.Animator.recorderMode
    // UnityEngine.Animator.recorderStartTime
    // UnityEngine.Animator.recorderStopTime
    // UnityEngine.Animator.rightFeetBottomHeight
    // UnityEngine.Animator.rootPosition
    // UnityEngine.Animator.rootRotation
    // UnityEngine.Animator.runtimeAnimatorController
    // UnityEngine.Animator.SetBool
    // UnityEngine.Animator.SetFloat
    // UnityEngine.Animator.SetTrigger
    // UnityEngine.Animator.speed
    // UnityEngine.Animator.stabilizeFeet
    // UnityEngine.Animator.tag
    // UnityEngine.Animator.targetPosition
    // UnityEngine.Animator.targetRotation
    // UnityEngine.Animator.transform
    // UnityEngine.Animator.updateMode
    // UnityEngine.Animator.velocity
    // UnityEngine.AnimatorOverrideController.op_Equality
    // UnityEngine.AnimatorOverrideController.op_Implicit
    // UnityEngine.AnimatorOverrideController.op_Inequality
    // UnityEngine.Application.isEditor
    // UnityEngine.Application.Quit
    // UnityEngine.AreaEffector2D.op_Equality
    // UnityEngine.AreaEffector2D.op_Implicit
    // UnityEngine.AreaEffector2D.op_Inequality
    // UnityEngine.ArticulationBody.op_Equality
    // UnityEngine.ArticulationBody.op_Implicit
    // UnityEngine.ArticulationBody.op_Inequality
    // UnityEngine.AssetBundle.op_Equality
    // UnityEngine.AssetBundle.op_Implicit
    // UnityEngine.AssetBundle.op_Inequality
    // UnityEngine.AssetBundleManifest.op_Equality
    // UnityEngine.AssetBundleManifest.op_Implicit
    // UnityEngine.AssetBundleManifest.op_Inequality
    // UnityEngine.Audio.AudioMixer.FindSnapshot
    // UnityEngine.Audio.AudioMixer.hideFlags
    // UnityEngine.Audio.AudioMixer.name
    // UnityEngine.Audio.AudioMixer.op_Equality
    // UnityEngine.Audio.AudioMixer.op_Implicit
    // UnityEngine.Audio.AudioMixer.op_Inequality
    // UnityEngine.Audio.AudioMixer.outputAudioMixerGroup
    // UnityEngine.Audio.AudioMixer.SetFloat
    // UnityEngine.Audio.AudioMixer.updateMode
    // UnityEngine.Audio.AudioMixerGroup.op_Equality
    // UnityEngine.Audio.AudioMixerGroup.op_Implicit
    // UnityEngine.Audio.AudioMixerGroup.op_Inequality
    // UnityEngine.Audio.AudioMixerSnapshot.op_Equality
    // UnityEngine.Audio.AudioMixerSnapshot.op_Implicit
    // UnityEngine.Audio.AudioMixerSnapshot.op_Inequality
    // UnityEngine.Audio.AudioMixerSnapshot.TransitionTo
    // UnityEngine.AudioBehaviour.enabled
    // UnityEngine.AudioBehaviour.gameObject
    // UnityEngine.AudioBehaviour.hideFlags
    // UnityEngine.AudioBehaviour.isActiveAndEnabled
    // UnityEngine.AudioBehaviour.name
    // UnityEngine.AudioBehaviour.op_Equality
    // UnityEngine.AudioBehaviour.op_Implicit
    // UnityEngine.AudioBehaviour.op_Inequality
    // UnityEngine.AudioBehaviour.tag
    // UnityEngine.AudioBehaviour.transform
    // UnityEngine.AudioChorusFilter.op_Equality
    // UnityEngine.AudioChorusFilter.op_Implicit
    // UnityEngine.AudioChorusFilter.op_Inequality
    // UnityEngine.AudioClip.ambisonic
    // UnityEngine.AudioClip.channels
    // UnityEngine.AudioClip.frequency
    // UnityEngine.AudioClip.hideFlags
    // UnityEngine.AudioClip.length
    // UnityEngine.AudioClip.loadInBackground
    // UnityEngine.AudioClip.loadState
    // UnityEngine.AudioClip.loadType
    // UnityEngine.AudioClip.name
    // UnityEngine.AudioClip.op_Equality
    // UnityEngine.AudioClip.op_Implicit
    // UnityEngine.AudioClip.op_Inequality
    // UnityEngine.AudioClip.preloadAudioData
    // UnityEngine.AudioClip.samples
    // UnityEngine.AudioDistortionFilter.op_Equality
    // UnityEngine.AudioDistortionFilter.op_Implicit
    // UnityEngine.AudioDistortionFilter.op_Inequality
    // UnityEngine.AudioEchoFilter.op_Equality
    // UnityEngine.AudioEchoFilter.op_Implicit
    // UnityEngine.AudioEchoFilter.op_Inequality
    // UnityEngine.AudioHighPassFilter.op_Equality
    // UnityEngine.AudioHighPassFilter.op_Implicit
    // UnityEngine.AudioHighPassFilter.op_Inequality
    // UnityEngine.AudioListener.enabled
    // UnityEngine.AudioListener.gameObject
    // UnityEngine.AudioListener.hideFlags
    // UnityEngine.AudioListener.isActiveAndEnabled
    // UnityEngine.AudioListener.name
    // UnityEngine.AudioListener.op_Equality
    // UnityEngine.AudioListener.op_Implicit
    // UnityEngine.AudioListener.op_Inequality
    // UnityEngine.AudioListener.pause
    // UnityEngine.AudioListener.tag
    // UnityEngine.AudioListener.transform
    // UnityEngine.AudioListener.velocityUpdateMode
    // UnityEngine.AudioListener.volume
    // UnityEngine.AudioLowPassFilter.op_Equality
    // UnityEngine.AudioLowPassFilter.op_Implicit
    // UnityEngine.AudioLowPassFilter.op_Inequality
    // UnityEngine.AudioReverbFilter.op_Equality
    // UnityEngine.AudioReverbFilter.op_Implicit
    // UnityEngine.AudioReverbFilter.op_Inequality
    // UnityEngine.AudioReverbZone.op_Equality
    // UnityEngine.AudioReverbZone.op_Implicit
    // UnityEngine.AudioReverbZone.op_Inequality
    // UnityEngine.AudioSource.bypassEffects
    // UnityEngine.AudioSource.bypassListenerEffects
    // UnityEngine.AudioSource.bypassReverbZones
    // UnityEngine.AudioSource.clip
    // UnityEngine.AudioSource.dopplerLevel
    // UnityEngine.AudioSource.enabled
    // UnityEngine.AudioSource.gameObject
    // UnityEngine.AudioSource.hideFlags
    // UnityEngine.AudioSource.ignoreListenerPause
    // UnityEngine.AudioSource.ignoreListenerVolume
    // UnityEngine.AudioSource.isActiveAndEnabled
    // UnityEngine.AudioSource.isPlaying
    // UnityEngine.AudioSource.isVirtual
    // UnityEngine.AudioSource.loop
    // UnityEngine.AudioSource.maxDistance
    // UnityEngine.AudioSource.minDistance
    // UnityEngine.AudioSource.mute
    // UnityEngine.AudioSource.name
    // UnityEngine.AudioSource.op_Equality
    // UnityEngine.AudioSource.op_Implicit
    // UnityEngine.AudioSource.op_Inequality
    // UnityEngine.AudioSource.outputAudioMixerGroup
    // UnityEngine.AudioSource.panStereo
    // UnityEngine.AudioSource.pitch
    // UnityEngine.AudioSource.playOnAwake
    // UnityEngine.AudioSource.priority
    // UnityEngine.AudioSource.reverbZoneMix
    // UnityEngine.AudioSource.rolloffMode
    // UnityEngine.AudioSource.spatialBlend
    // UnityEngine.AudioSource.spatialize
    // UnityEngine.AudioSource.spatializePostEffects
    // UnityEngine.AudioSource.spread
    // UnityEngine.AudioSource.tag
    // UnityEngine.AudioSource.time
    // UnityEngine.AudioSource.timeSamples
    // UnityEngine.AudioSource.transform
    // UnityEngine.AudioSource.velocityUpdateMode
    // UnityEngine.AudioSource.volume
    // UnityEngine.Avatar.op_Equality
    // UnityEngine.Avatar.op_Implicit
    // UnityEngine.Avatar.op_Inequality
    // UnityEngine.AvatarMask.op_Equality
    // UnityEngine.AvatarMask.op_Implicit
    // UnityEngine.AvatarMask.op_Inequality
    // UnityEngine.Behaviour.op_Equality
    // UnityEngine.Behaviour.op_Implicit
    // UnityEngine.Behaviour.op_Inequality
    // UnityEngine.BillboardAsset.op_Equality
    // UnityEngine.BillboardAsset.op_Implicit
    // UnityEngine.BillboardAsset.op_Inequality
    // UnityEngine.BillboardRenderer.op_Equality
    // UnityEngine.BillboardRenderer.op_Implicit
    // UnityEngine.BillboardRenderer.op_Inequality
    // UnityEngine.Bounds.center
    // UnityEngine.Bounds.extents
    // UnityEngine.Bounds.max
    // UnityEngine.Bounds.min
    // UnityEngine.Bounds.op_Equality
    // UnityEngine.Bounds.op_Inequality
    // UnityEngine.Bounds.size
    // UnityEngine.BoxCollider.attachedArticulationBody
    // UnityEngine.BoxCollider.attachedRigidbody
    // UnityEngine.BoxCollider.bounds
    // UnityEngine.BoxCollider.center
    // UnityEngine.BoxCollider.contactOffset
    // UnityEngine.BoxCollider.enabled
    // UnityEngine.BoxCollider.gameObject
    // UnityEngine.BoxCollider.hideFlags
    // UnityEngine.BoxCollider.isTrigger
    // UnityEngine.BoxCollider.material
    // UnityEngine.BoxCollider.name
    // UnityEngine.BoxCollider.op_Equality
    // UnityEngine.BoxCollider.op_Implicit
    // UnityEngine.BoxCollider.op_Inequality
    // UnityEngine.BoxCollider.sharedMaterial
    // UnityEngine.BoxCollider.size
    // UnityEngine.BoxCollider.tag
    // UnityEngine.BoxCollider.transform
    // UnityEngine.BoxCollider2D.enabled
    // UnityEngine.BoxCollider2D.op_Equality
    // UnityEngine.BoxCollider2D.op_Implicit
    // UnityEngine.BoxCollider2D.op_Inequality
    // UnityEngine.BuoyancyEffector2D.op_Equality
    // UnityEngine.BuoyancyEffector2D.op_Implicit
    // UnityEngine.BuoyancyEffector2D.op_Inequality
    // UnityEngine.Camera.activeTexture
    // UnityEngine.Camera.actualRenderingPath
    // UnityEngine.Camera.allCameras
    // UnityEngine.Camera.allCamerasCount
    // UnityEngine.Camera.allowDynamicResolution
    // UnityEngine.Camera.allowHDR
    // UnityEngine.Camera.allowMSAA
    // UnityEngine.Camera.areVRStereoViewMatricesWithinSingleCullTolerance
    // UnityEngine.Camera.aspect
    // UnityEngine.Camera.backgroundColor
    // UnityEngine.Camera.cameraToWorldMatrix
    // UnityEngine.Camera.cameraType
    // UnityEngine.Camera.clearFlags
    // UnityEngine.Camera.clearStencilAfterLightingPass
    // UnityEngine.Camera.commandBufferCount
    // UnityEngine.Camera.cullingMask
    // UnityEngine.Camera.cullingMatrix
    // UnityEngine.Camera.current
    // UnityEngine.Camera.depth
    // UnityEngine.Camera.depthTextureMode
    // UnityEngine.Camera.enabled
    // UnityEngine.Camera.eventMask
    // UnityEngine.Camera.farClipPlane
    // UnityEngine.Camera.fieldOfView
    // UnityEngine.Camera.focalLength
    // UnityEngine.Camera.forceIntoRenderTexture
    // UnityEngine.Camera.gameObject
    // UnityEngine.Camera.gateFit
    // UnityEngine.Camera.hideFlags
    // UnityEngine.Camera.isActiveAndEnabled
    // UnityEngine.Camera.layerCullDistances
    // UnityEngine.Camera.layerCullSpherical
    // UnityEngine.Camera.lensShift
    // UnityEngine.Camera.main
    // UnityEngine.Camera.name
    // UnityEngine.Camera.nearClipPlane
    // UnityEngine.Camera.nonJitteredProjectionMatrix
    // UnityEngine.Camera.onPostRender
    // UnityEngine.Camera.onPreCull
    // UnityEngine.Camera.onPreRender
    // UnityEngine.Camera.op_Equality
    // UnityEngine.Camera.op_Implicit
    // UnityEngine.Camera.op_Inequality
    // UnityEngine.Camera.opaqueSortMode
    // UnityEngine.Camera.orthographic
    // UnityEngine.Camera.orthographicSize
    // UnityEngine.Camera.overrideSceneCullingMask
    // UnityEngine.Camera.pixelHeight
    // UnityEngine.Camera.pixelRect
    // UnityEngine.Camera.pixelWidth
    // UnityEngine.Camera.previousViewProjectionMatrix
    // UnityEngine.Camera.projectionMatrix
    // UnityEngine.Camera.rect
    // UnityEngine.Camera.renderingPath
    // UnityEngine.Camera.scaledPixelHeight
    // UnityEngine.Camera.scaledPixelWidth
    // UnityEngine.Camera.scene
    // UnityEngine.Camera.ScreenPointToRay
    // UnityEngine.Camera.ScreenToWorldPoint
    // UnityEngine.Camera.sensorSize
    // UnityEngine.Camera.stereoActiveEye
    // UnityEngine.Camera.stereoConvergence
    // UnityEngine.Camera.stereoEnabled
    // UnityEngine.Camera.stereoSeparation
    // UnityEngine.Camera.stereoTargetEye
    // UnityEngine.Camera.tag
    // UnityEngine.Camera.targetDisplay
    // UnityEngine.Camera.targetTexture
    // UnityEngine.Camera.transform
    // UnityEngine.Camera.transparencySortAxis
    // UnityEngine.Camera.transparencySortMode
    // UnityEngine.Camera.useJitteredProjectionMatrixForTransparentRendering
    // UnityEngine.Camera.useOcclusionCulling
    // UnityEngine.Camera.usePhysicalProperties
    // UnityEngine.Camera.velocity
    // UnityEngine.Camera.worldToCameraMatrix
    // UnityEngine.Camera.WorldToScreenPoint
    // UnityEngine.Canvas.additionalShaderChannels
    // UnityEngine.Canvas.cachedSortingLayerValue
    // UnityEngine.Canvas.enabled
    // UnityEngine.Canvas.gameObject
    // UnityEngine.Canvas.hideFlags
    // UnityEngine.Canvas.isActiveAndEnabled
    // UnityEngine.Canvas.isRootCanvas
    // UnityEngine.Canvas.name
    // UnityEngine.Canvas.normalizedSortingGridSize
    // UnityEngine.Canvas.op_Equality
    // UnityEngine.Canvas.op_Implicit
    // UnityEngine.Canvas.op_Inequality
    // UnityEngine.Canvas.overridePixelPerfect
    // UnityEngine.Canvas.overrideSorting
    // UnityEngine.Canvas.pixelPerfect
    // UnityEngine.Canvas.pixelRect
    // UnityEngine.Canvas.planeDistance
    // UnityEngine.Canvas.referencePixelsPerUnit
    // UnityEngine.Canvas.renderingDisplaySize
    // UnityEngine.Canvas.renderMode
    // UnityEngine.Canvas.renderOrder
    // UnityEngine.Canvas.rootCanvas
    // UnityEngine.Canvas.scaleFactor
    // UnityEngine.Canvas.sortingLayerID
    // UnityEngine.Canvas.sortingLayerName
    // UnityEngine.Canvas.sortingOrder
    // UnityEngine.Canvas.tag
    // UnityEngine.Canvas.targetDisplay
    // UnityEngine.Canvas.transform
    // UnityEngine.Canvas.worldCamera
    // UnityEngine.CanvasGroup.alpha
    // UnityEngine.CanvasGroup.op_Equality
    // UnityEngine.CanvasGroup.op_Implicit
    // UnityEngine.CanvasGroup.op_Inequality
    // UnityEngine.CanvasRenderer.op_Equality
    // UnityEngine.CanvasRenderer.op_Implicit
    // UnityEngine.CanvasRenderer.op_Inequality
    // UnityEngine.CapsuleCollider.attachedArticulationBody
    // UnityEngine.CapsuleCollider.attachedRigidbody
    // UnityEngine.CapsuleCollider.bounds
    // UnityEngine.CapsuleCollider.center
    // UnityEngine.CapsuleCollider.contactOffset
    // UnityEngine.CapsuleCollider.direction
    // UnityEngine.CapsuleCollider.enabled
    // UnityEngine.CapsuleCollider.gameObject
    // UnityEngine.CapsuleCollider.height
    // UnityEngine.CapsuleCollider.hideFlags
    // UnityEngine.CapsuleCollider.isTrigger
    // UnityEngine.CapsuleCollider.material
    // UnityEngine.CapsuleCollider.name
    // UnityEngine.CapsuleCollider.op_Equality
    // UnityEngine.CapsuleCollider.op_Implicit
    // UnityEngine.CapsuleCollider.op_Inequality
    // UnityEngine.CapsuleCollider.radius
    // UnityEngine.CapsuleCollider.sharedMaterial
    // UnityEngine.CapsuleCollider.tag
    // UnityEngine.CapsuleCollider.transform
    // UnityEngine.CapsuleCollider2D.op_Equality
    // UnityEngine.CapsuleCollider2D.op_Implicit
    // UnityEngine.CapsuleCollider2D.op_Inequality
    // UnityEngine.CharacterController.isGrounded
    // UnityEngine.CharacterController.Move
    // UnityEngine.CharacterController.op_Equality
    // UnityEngine.CharacterController.op_Implicit
    // UnityEngine.CharacterController.op_Inequality
    // UnityEngine.CharacterJoint.op_Equality
    // UnityEngine.CharacterJoint.op_Implicit
    // UnityEngine.CharacterJoint.op_Inequality
    // UnityEngine.CircleCollider2D.op_Equality
    // UnityEngine.CircleCollider2D.op_Implicit
    // UnityEngine.CircleCollider2D.op_Inequality
    // UnityEngine.Cloth.op_Equality
    // UnityEngine.Cloth.op_Implicit
    // UnityEngine.Cloth.op_Inequality
    // UnityEngine.Collider.op_Equality
    // UnityEngine.Collider.op_Implicit
    // UnityEngine.Collider.op_Inequality
    // UnityEngine.Collider2D.op_Equality
    // UnityEngine.Collider2D.op_Implicit
    // UnityEngine.Collider2D.op_Inequality
    // UnityEngine.Color..ctor
    // UnityEngine.Color..ctor
    // UnityEngine.Color.a
    // UnityEngine.Color.b
    // UnityEngine.Color.black
    // UnityEngine.Color.blue
    // UnityEngine.Color.clear
    // UnityEngine.Color.cyan
    // UnityEngine.Color.g
    // UnityEngine.Color.gamma
    // UnityEngine.Color.gray
    // UnityEngine.Color.grayscale
    // UnityEngine.Color.green
    // UnityEngine.Color.grey
    // UnityEngine.Color.Lerp
    // UnityEngine.Color.linear
    // UnityEngine.Color.magenta
    // UnityEngine.Color.maxColorComponent
    // UnityEngine.Color.op_Addition
    // UnityEngine.Color.op_Division
    // UnityEngine.Color.op_Equality
    // UnityEngine.Color.op_Implicit
    // UnityEngine.Color.op_Implicit
    // UnityEngine.Color.op_Inequality
    // UnityEngine.Color.op_Multiply
    // UnityEngine.Color.op_Multiply
    // UnityEngine.Color.op_Multiply
    // UnityEngine.Color.op_Subtraction
    // UnityEngine.Color.r
    // UnityEngine.Color.red
    // UnityEngine.Color.white
    // UnityEngine.Color.yellow
    // UnityEngine.Component.Destroy
    // UnityEngine.Component.gameObject
    // UnityEngine.Component.GetComponent
    // UnityEngine.Component.hideFlags
    // UnityEngine.Component.Instantiate
    // UnityEngine.Component.name
    // UnityEngine.Component.op_Equality
    // UnityEngine.Component.op_Implicit
    // UnityEngine.Component.op_Inequality
    // UnityEngine.Component.tag
    // UnityEngine.Component.transform
    // UnityEngine.CompositeCollider2D.op_Equality
    // UnityEngine.CompositeCollider2D.op_Implicit
    // UnityEngine.CompositeCollider2D.op_Inequality
    // UnityEngine.ComputeShader.op_Equality
    // UnityEngine.ComputeShader.op_Implicit
    // UnityEngine.ComputeShader.op_Inequality
    // UnityEngine.ConfigurableJoint.op_Equality
    // UnityEngine.ConfigurableJoint.op_Implicit
    // UnityEngine.ConfigurableJoint.op_Inequality
    // UnityEngine.ConstantForce.op_Equality
    // UnityEngine.ConstantForce.op_Implicit
    // UnityEngine.ConstantForce.op_Inequality
    // UnityEngine.ConstantForce2D.op_Equality
    // UnityEngine.ConstantForce2D.op_Implicit
    // UnityEngine.ConstantForce2D.op_Inequality
    // UnityEngine.Cubemap.op_Equality
    // UnityEngine.Cubemap.op_Implicit
    // UnityEngine.Cubemap.op_Inequality
    // UnityEngine.CubemapArray.op_Equality
    // UnityEngine.CubemapArray.op_Implicit
    // UnityEngine.CubemapArray.op_Inequality
    // UnityEngine.Cursor.lockState
    // UnityEngine.Cursor.visible
    // UnityEngine.CustomRenderTexture.op_Equality
    // UnityEngine.CustomRenderTexture.op_Implicit
    // UnityEngine.CustomRenderTexture.op_Inequality
    // UnityEngine.Debug.developerConsoleVisible
    // UnityEngine.Debug.isDebugBuild
    // UnityEngine.Debug.Log
    // UnityEngine.Debug.Log
    // UnityEngine.Debug.LogError
    // UnityEngine.Debug.LogError
    // UnityEngine.Debug.LogWarning
    // UnityEngine.Debug.LogWarning
    // UnityEngine.Debug.unityLogger
    // UnityEngine.DistanceJoint2D.op_Equality
    // UnityEngine.DistanceJoint2D.op_Implicit
    // UnityEngine.DistanceJoint2D.op_Inequality
    // UnityEngine.EdgeCollider2D.op_Equality
    // UnityEngine.EdgeCollider2D.op_Implicit
    // UnityEngine.EdgeCollider2D.op_Inequality
    // UnityEngine.Effector2D.op_Equality
    // UnityEngine.Effector2D.op_Implicit
    // UnityEngine.Effector2D.op_Inequality
    // UnityEngine.EventSystems.BaseInput.op_Equality
    // UnityEngine.EventSystems.BaseInput.op_Implicit
    // UnityEngine.EventSystems.BaseInput.op_Inequality
    // UnityEngine.EventSystems.EventSystem.op_Equality
    // UnityEngine.EventSystems.EventSystem.op_Implicit
    // UnityEngine.EventSystems.EventSystem.op_Inequality
    // UnityEngine.EventSystems.EventTrigger.op_Equality
    // UnityEngine.EventSystems.EventTrigger.op_Implicit
    // UnityEngine.EventSystems.EventTrigger.op_Inequality
    // UnityEngine.EventSystems.Physics2DRaycaster.op_Equality
    // UnityEngine.EventSystems.Physics2DRaycaster.op_Implicit
    // UnityEngine.EventSystems.Physics2DRaycaster.op_Inequality
    // UnityEngine.EventSystems.PhysicsRaycaster.op_Equality
    // UnityEngine.EventSystems.PhysicsRaycaster.op_Implicit
    // UnityEngine.EventSystems.PhysicsRaycaster.op_Inequality
    // UnityEngine.EventSystems.StandaloneInputModule.op_Equality
    // UnityEngine.EventSystems.StandaloneInputModule.op_Implicit
    // UnityEngine.EventSystems.StandaloneInputModule.op_Inequality
    // UnityEngine.Experimental.Rendering.RayTracingShader.op_Equality
    // UnityEngine.Experimental.Rendering.RayTracingShader.op_Implicit
    // UnityEngine.Experimental.Rendering.RayTracingShader.op_Inequality
    // UnityEngine.FixedJoint.op_Equality
    // UnityEngine.FixedJoint.op_Implicit
    // UnityEngine.FixedJoint.op_Inequality
    // UnityEngine.FixedJoint2D.op_Equality
    // UnityEngine.FixedJoint2D.op_Implicit
    // UnityEngine.FixedJoint2D.op_Inequality
    // UnityEngine.Flare.op_Equality
    // UnityEngine.Flare.op_Implicit
    // UnityEngine.Flare.op_Inequality
    // UnityEngine.FlareLayer.op_Equality
    // UnityEngine.FlareLayer.op_Implicit
    // UnityEngine.FlareLayer.op_Inequality
    // UnityEngine.Font.op_Equality
    // UnityEngine.Font.op_Implicit
    // UnityEngine.Font.op_Inequality
    // UnityEngine.FrictionJoint2D.op_Equality
    // UnityEngine.FrictionJoint2D.op_Implicit
    // UnityEngine.FrictionJoint2D.op_Inequality
    // UnityEngine.GameObject.activeInHierarchy
    // UnityEngine.GameObject.activeSelf
    // UnityEngine.GameObject.CompareTag
    // UnityEngine.GameObject.Destroy
    // UnityEngine.GameObject.Destroy
    // UnityEngine.GameObject.Find
    // UnityEngine.GameObject.FindGameObjectsWithTag
    // UnityEngine.GameObject.gameObject
    // UnityEngine.GameObject.GetComponent
    // UnityEngine.GameObject.GetComponentsInChildren
    // UnityEngine.GameObject.hideFlags
    // UnityEngine.GameObject.Instantiate
    // UnityEngine.GameObject.isStatic
    // UnityEngine.GameObject.layer
    // UnityEngine.GameObject.name
    // UnityEngine.GameObject.op_Equality
    // UnityEngine.GameObject.op_Implicit
    // UnityEngine.GameObject.op_Inequality
    // UnityEngine.GameObject.scene
    // UnityEngine.GameObject.sceneCullingMask
    // UnityEngine.GameObject.SetActive
    // UnityEngine.GameObject.tag
    // UnityEngine.GameObject.transform
    // UnityEngine.Gizmos.color
    // UnityEngine.Gizmos.DrawLine
    // UnityEngine.Gizmos.DrawWireSphere
    // UnityEngine.GUI.color
    // UnityEngine.GUI.Label
    // UnityEngine.GUI.skin
    // UnityEngine.GUISkin.label
    // UnityEngine.GUISkin.op_Equality
    // UnityEngine.GUISkin.op_Implicit
    // UnityEngine.GUISkin.op_Inequality
    // UnityEngine.GUIStyle.fontSize
    // UnityEngine.HingeJoint.op_Equality
    // UnityEngine.HingeJoint.op_Implicit
    // UnityEngine.HingeJoint.op_Inequality
    // UnityEngine.HingeJoint2D.op_Equality
    // UnityEngine.HingeJoint2D.op_Implicit
    // UnityEngine.HingeJoint2D.op_Inequality
    // UnityEngine.Input.acceleration
    // UnityEngine.Input.accelerationEventCount
    // UnityEngine.Input.accelerationEvents
    // UnityEngine.Input.anyKey
    // UnityEngine.Input.anyKeyDown
    // UnityEngine.Input.backButtonLeavesApp
    // UnityEngine.Input.compass
    // UnityEngine.Input.compensateSensors
    // UnityEngine.Input.compositionCursorPos
    // UnityEngine.Input.compositionString
    // UnityEngine.Input.deviceOrientation
    // UnityEngine.Input.GetAxis
    // UnityEngine.Input.GetButtonDown
    // UnityEngine.Input.GetKey
    // UnityEngine.Input.GetKeyDown
    // UnityEngine.Input.GetMouseButton
    // UnityEngine.Input.GetMouseButtonDown
    // UnityEngine.Input.gyro
    // UnityEngine.Input.imeCompositionMode
    // UnityEngine.Input.imeIsSelected
    // UnityEngine.Input.inputString
    // UnityEngine.Input.location
    // UnityEngine.Input.mousePosition
    // UnityEngine.Input.mousePresent
    // UnityEngine.Input.mouseScrollDelta
    // UnityEngine.Input.multiTouchEnabled
    // UnityEngine.Input.simulateMouseWithTouches
    // UnityEngine.Input.stylusTouchSupported
    // UnityEngine.Input.touchCount
    // UnityEngine.Input.touches
    // UnityEngine.Input.touchPressureSupported
    // UnityEngine.Input.touchSupported
    // UnityEngine.Joint.op_Equality
    // UnityEngine.Joint.op_Implicit
    // UnityEngine.Joint.op_Inequality
    // UnityEngine.Joint2D.op_Equality
    // UnityEngine.Joint2D.op_Implicit
    // UnityEngine.Joint2D.op_Inequality
    // UnityEngine.LayerMask.NameToLayer
    // UnityEngine.LayerMask.op_Implicit
    // UnityEngine.LayerMask.op_Implicit
    // UnityEngine.LensFlare.op_Equality
    // UnityEngine.LensFlare.op_Implicit
    // UnityEngine.LensFlare.op_Inequality
    // UnityEngine.Light.areaSize
    // UnityEngine.Light.bakingOutput
    // UnityEngine.Light.bounceIntensity
    // UnityEngine.Light.boundingSphereOverride
    // UnityEngine.Light.color
    // UnityEngine.Light.colorTemperature
    // UnityEngine.Light.commandBufferCount
    // UnityEngine.Light.cookie
    // UnityEngine.Light.cookieSize
    // UnityEngine.Light.cullingMask
    // UnityEngine.Light.enabled
    // UnityEngine.Light.flare
    // UnityEngine.Light.gameObject
    // UnityEngine.Light.hideFlags
    // UnityEngine.Light.innerSpotAngle
    // UnityEngine.Light.intensity
    // UnityEngine.Light.isActiveAndEnabled
    // UnityEngine.Light.layerShadowCullDistances
    // UnityEngine.Light.lightmapBakeType
    // UnityEngine.Light.lightShadowCasterMode
    // UnityEngine.Light.name
    // UnityEngine.Light.op_Equality
    // UnityEngine.Light.op_Implicit
    // UnityEngine.Light.op_Inequality
    // UnityEngine.Light.range
    // UnityEngine.Light.renderingLayerMask
    // UnityEngine.Light.renderMode
    // UnityEngine.Light.shadowAngle
    // UnityEngine.Light.shadowBias
    // UnityEngine.Light.shadowCustomResolution
    // UnityEngine.Light.shadowMatrixOverride
    // UnityEngine.Light.shadowNearPlane
    // UnityEngine.Light.shadowNormalBias
    // UnityEngine.Light.shadowRadius
    // UnityEngine.Light.shadowResolution
    // UnityEngine.Light.shadows
    // UnityEngine.Light.shadowStrength
    // UnityEngine.Light.shape
    // UnityEngine.Light.spotAngle
    // UnityEngine.Light.tag
    // UnityEngine.Light.transform
    // UnityEngine.Light.type
    // UnityEngine.Light.useBoundingSphereOverride
    // UnityEngine.Light.useColorTemperature
    // UnityEngine.Light.useShadowMatrixOverride
    // UnityEngine.Light.useViewFrustumForShadowCasterCull
    // UnityEngine.LightingSettings.op_Equality
    // UnityEngine.LightingSettings.op_Implicit
    // UnityEngine.LightingSettings.op_Inequality
    // UnityEngine.LightmapSettings.op_Equality
    // UnityEngine.LightmapSettings.op_Implicit
    // UnityEngine.LightmapSettings.op_Inequality
    // UnityEngine.LightProbeGroup.op_Equality
    // UnityEngine.LightProbeGroup.op_Implicit
    // UnityEngine.LightProbeGroup.op_Inequality
    // UnityEngine.LightProbeProxyVolume.op_Equality
    // UnityEngine.LightProbeProxyVolume.op_Implicit
    // UnityEngine.LightProbeProxyVolume.op_Inequality
    // UnityEngine.LightProbes.op_Equality
    // UnityEngine.LightProbes.op_Implicit
    // UnityEngine.LightProbes.op_Inequality
    // UnityEngine.LineRenderer.op_Equality
    // UnityEngine.LineRenderer.op_Implicit
    // UnityEngine.LineRenderer.op_Inequality
    // UnityEngine.LODGroup.op_Equality
    // UnityEngine.LODGroup.op_Implicit
    // UnityEngine.LODGroup.op_Inequality
    // UnityEngine.Material.color
    // UnityEngine.Material.doubleSidedGI
    // UnityEngine.Material.enableInstancing
    // UnityEngine.Material.GetFloat
    // UnityEngine.Material.globalIlluminationFlags
    // UnityEngine.Material.hideFlags
    // UnityEngine.Material.mainTexture
    // UnityEngine.Material.mainTextureOffset
    // UnityEngine.Material.mainTextureScale
    // UnityEngine.Material.name
    // UnityEngine.Material.op_Equality
    // UnityEngine.Material.op_Implicit
    // UnityEngine.Material.op_Inequality
    // UnityEngine.Material.passCount
    // UnityEngine.Material.renderQueue
    // UnityEngine.Material.SetColor
    // UnityEngine.Material.SetFloat
    // UnityEngine.Material.shader
    // UnityEngine.Material.shaderKeywords
    // UnityEngine.Mathf.Abs
    // UnityEngine.Mathf.Abs
    // UnityEngine.Mathf.Acos
    // UnityEngine.Mathf.Approximately
    // UnityEngine.Mathf.Asin
    // UnityEngine.Mathf.Atan
    // UnityEngine.Mathf.Atan2
    // UnityEngine.Mathf.Ceil
    // UnityEngine.Mathf.CeilToInt
    // UnityEngine.Mathf.Clamp
    // UnityEngine.Mathf.Clamp
    // UnityEngine.Mathf.Clamp01
    // UnityEngine.Mathf.Cos
    // UnityEngine.Mathf.Deg2Rad
    // UnityEngine.Mathf.DeltaAngle
    // UnityEngine.Mathf.Epsilon
    // UnityEngine.Mathf.Exp
    // UnityEngine.Mathf.Floor
    // UnityEngine.Mathf.FloorToInt
    // UnityEngine.Mathf.Infinity
    // UnityEngine.Mathf.InverseLerp
    // UnityEngine.Mathf.Lerp
    // UnityEngine.Mathf.LerpAngle
    // UnityEngine.Mathf.LerpUnclamped
    // UnityEngine.Mathf.Log
    // UnityEngine.Mathf.Log
    // UnityEngine.Mathf.Log10
    // UnityEngine.Mathf.Max
    // UnityEngine.Mathf.Max
    // UnityEngine.Mathf.Max
    // UnityEngine.Mathf.Max
    // UnityEngine.Mathf.Min
    // UnityEngine.Mathf.Min
    // UnityEngine.Mathf.Min
    // UnityEngine.Mathf.NegativeInfinity
    // UnityEngine.Mathf.PI
    // UnityEngine.Mathf.Pow
    // UnityEngine.Mathf.Rad2Deg
    // UnityEngine.Mathf.Repeat
    // UnityEngine.Mathf.RoundToInt
    // UnityEngine.Mathf.Sin
    // UnityEngine.Mathf.Sqrt
    // UnityEngine.Mathf.Tan
    // UnityEngine.Matrix4x4.op_Equality
    // UnityEngine.Matrix4x4.op_Inequality
    // UnityEngine.Matrix4x4.op_Multiply
    // UnityEngine.Matrix4x4.op_Multiply
    // UnityEngine.Mesh.bindposes
    // UnityEngine.Mesh.blendShapeCount
    // UnityEngine.Mesh.boneWeights
    // UnityEngine.Mesh.bounds
    // UnityEngine.Mesh.colors
    // UnityEngine.Mesh.colors32
    // UnityEngine.Mesh.hideFlags
    // UnityEngine.Mesh.indexFormat
    // UnityEngine.Mesh.isReadable
    // UnityEngine.Mesh.name
    // UnityEngine.Mesh.normals
    // UnityEngine.Mesh.op_Equality
    // UnityEngine.Mesh.op_Implicit
    // UnityEngine.Mesh.op_Inequality
    // UnityEngine.Mesh.subMeshCount
    // UnityEngine.Mesh.tangents
    // UnityEngine.Mesh.triangles
    // UnityEngine.Mesh.uv
    // UnityEngine.Mesh.uv2
    // UnityEngine.Mesh.uv3
    // UnityEngine.Mesh.uv4
    // UnityEngine.Mesh.uv5
    // UnityEngine.Mesh.uv6
    // UnityEngine.Mesh.uv7
    // UnityEngine.Mesh.uv8
    // UnityEngine.Mesh.vertexAttributeCount
    // UnityEngine.Mesh.vertexBufferCount
    // UnityEngine.Mesh.vertexCount
    // UnityEngine.Mesh.vertices
    // UnityEngine.MeshCollider.attachedArticulationBody
    // UnityEngine.MeshCollider.attachedRigidbody
    // UnityEngine.MeshCollider.bounds
    // UnityEngine.MeshCollider.contactOffset
    // UnityEngine.MeshCollider.convex
    // UnityEngine.MeshCollider.cookingOptions
    // UnityEngine.MeshCollider.enabled
    // UnityEngine.MeshCollider.gameObject
    // UnityEngine.MeshCollider.hideFlags
    // UnityEngine.MeshCollider.isTrigger
    // UnityEngine.MeshCollider.material
    // UnityEngine.MeshCollider.name
    // UnityEngine.MeshCollider.op_Equality
    // UnityEngine.MeshCollider.op_Implicit
    // UnityEngine.MeshCollider.op_Inequality
    // UnityEngine.MeshCollider.sharedMaterial
    // UnityEngine.MeshCollider.sharedMesh
    // UnityEngine.MeshCollider.tag
    // UnityEngine.MeshCollider.transform
    // UnityEngine.MeshFilter.op_Equality
    // UnityEngine.MeshFilter.op_Implicit
    // UnityEngine.MeshFilter.op_Inequality
    // UnityEngine.MeshRenderer.material
    // UnityEngine.MeshRenderer.op_Equality
    // UnityEngine.MeshRenderer.op_Implicit
    // UnityEngine.MeshRenderer.op_Inequality
    // UnityEngine.MonoBehaviour.op_Equality
    // UnityEngine.MonoBehaviour.op_Implicit
    // UnityEngine.MonoBehaviour.op_Inequality
    // UnityEngine.Motion.op_Equality
    // UnityEngine.Motion.op_Implicit
    // UnityEngine.Motion.op_Inequality
    // UnityEngine.Networking.PlayerConnection.PlayerConnection.op_Equality
    // UnityEngine.Networking.PlayerConnection.PlayerConnection.op_Implicit
    // UnityEngine.Networking.PlayerConnection.PlayerConnection.op_Inequality
    // UnityEngine.Object.DontDestroyOnLoad
    // UnityEngine.Object.op_Equality
    // UnityEngine.Object.op_Implicit
    // UnityEngine.Object.op_Inequality
    // UnityEngine.OcclusionArea.op_Equality
    // UnityEngine.OcclusionArea.op_Implicit
    // UnityEngine.OcclusionArea.op_Inequality
    // UnityEngine.OcclusionPortal.op_Equality
    // UnityEngine.OcclusionPortal.op_Implicit
    // UnityEngine.OcclusionPortal.op_Inequality
    // UnityEngine.ParticleSystem.op_Equality
    // UnityEngine.ParticleSystem.op_Implicit
    // UnityEngine.ParticleSystem.op_Inequality
    // UnityEngine.ParticleSystemForceField.op_Equality
    // UnityEngine.ParticleSystemForceField.op_Implicit
    // UnityEngine.ParticleSystemForceField.op_Inequality
    // UnityEngine.ParticleSystemRenderer.op_Equality
    // UnityEngine.ParticleSystemRenderer.op_Implicit
    // UnityEngine.ParticleSystemRenderer.op_Inequality
    // UnityEngine.PhysicMaterial.op_Equality
    // UnityEngine.PhysicMaterial.op_Implicit
    // UnityEngine.PhysicMaterial.op_Inequality
    // UnityEngine.Physics.AllLayers
    // UnityEngine.Physics.autoSimulation
    // UnityEngine.Physics.autoSyncTransforms
    // UnityEngine.Physics.bounceThreshold
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.BoxCast
    // UnityEngine.Physics.clothGravity
    // UnityEngine.Physics.defaultContactOffset
    // UnityEngine.Physics.defaultMaxAngularSpeed
    // UnityEngine.Physics.defaultMaxDepenetrationVelocity
    // UnityEngine.Physics.defaultPhysicsScene
    // UnityEngine.Physics.DefaultRaycastLayers
    // UnityEngine.Physics.defaultSolverIterations
    // UnityEngine.Physics.defaultSolverVelocityIterations
    // UnityEngine.Physics.gravity
    // UnityEngine.Physics.IgnoreRaycastLayer
    // UnityEngine.Physics.interCollisionDistance
    // UnityEngine.Physics.interCollisionSettingsToggle
    // UnityEngine.Physics.interCollisionStiffness
    // UnityEngine.Physics.Linecast
    // UnityEngine.Physics.Linecast
    // UnityEngine.Physics.Linecast
    // UnityEngine.Physics.Linecast
    // UnityEngine.Physics.Linecast
    // UnityEngine.Physics.Linecast
    // UnityEngine.Physics.queriesHitBackfaces
    // UnityEngine.Physics.queriesHitTriggers
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.Raycast
    // UnityEngine.Physics.reuseCollisionCallbacks
    // UnityEngine.Physics.sleepThreshold
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCast
    // UnityEngine.Physics.SphereCastAll
    // UnityEngine.Physics.SphereCastAll
    // UnityEngine.Physics.SphereCastNonAlloc
    // UnityEngine.Physics.SphereCastNonAlloc
    // UnityEngine.Physics.SphereCastNonAlloc
    // UnityEngine.Physics.SphereCastNonAlloc
    // UnityEngine.Physics.SphereCastNonAlloc
    // UnityEngine.Physics.SphereCastNonAlloc
    // UnityEngine.Physics.SphereCastNonAlloc
    // UnityEngine.Physics2D.CircleCast
    // UnityEngine.PhysicsMaterial2D.op_Equality
    // UnityEngine.PhysicsMaterial2D.op_Implicit
    // UnityEngine.PhysicsMaterial2D.op_Inequality
    // UnityEngine.PhysicsUpdateBehaviour2D.op_Equality
    // UnityEngine.PhysicsUpdateBehaviour2D.op_Implicit
    // UnityEngine.PhysicsUpdateBehaviour2D.op_Inequality
    // UnityEngine.PlatformEffector2D.op_Equality
    // UnityEngine.PlatformEffector2D.op_Implicit
    // UnityEngine.PlatformEffector2D.op_Inequality
    // UnityEngine.Playables.PlayableDirector.op_Equality
    // UnityEngine.Playables.PlayableDirector.op_Implicit
    // UnityEngine.Playables.PlayableDirector.op_Inequality
    // UnityEngine.PointEffector2D.op_Equality
    // UnityEngine.PointEffector2D.op_Implicit
    // UnityEngine.PointEffector2D.op_Inequality
    // UnityEngine.PolygonCollider2D.op_Equality
    // UnityEngine.PolygonCollider2D.op_Implicit
    // UnityEngine.PolygonCollider2D.op_Inequality
    // UnityEngine.Profiling.Profiler.GetTotalAllocatedMemoryLong
    // UnityEngine.Projector.op_Equality
    // UnityEngine.Projector.op_Implicit
    // UnityEngine.Projector.op_Inequality
    // UnityEngine.QualitySettings.op_Equality
    // UnityEngine.QualitySettings.op_Implicit
    // UnityEngine.QualitySettings.op_Inequality
    // UnityEngine.Quaternion.Euler
    // UnityEngine.Quaternion.eulerAngles
    // UnityEngine.Quaternion.identity
    // UnityEngine.Quaternion.kEpsilon
    // UnityEngine.Quaternion.LookRotation
    // UnityEngine.Quaternion.normalized
    // UnityEngine.Quaternion.op_Equality
    // UnityEngine.Quaternion.op_Inequality
    // UnityEngine.Quaternion.op_Multiply
    // UnityEngine.Quaternion.op_Multiply
    // UnityEngine.Quaternion.w
    // UnityEngine.Quaternion.x
    // UnityEngine.Quaternion.y
    // UnityEngine.Quaternion.z
    // UnityEngine.Random.insideUnitCircle
    // UnityEngine.Random.insideUnitSphere
    // UnityEngine.Random.onUnitSphere
    // UnityEngine.Random.Range
    // UnityEngine.Random.Range
    // UnityEngine.Random.rotation
    // UnityEngine.Random.rotationUniform
    // UnityEngine.Random.state
    // UnityEngine.Random.value
    // UnityEngine.Ray.direction
    // UnityEngine.Ray.origin
    // UnityEngine.RaycastHit.articulationBody
    // UnityEngine.RaycastHit.barycentricCoordinate
    // UnityEngine.RaycastHit.collider
    // UnityEngine.RaycastHit.distance
    // UnityEngine.RaycastHit.Equals
    // UnityEngine.RaycastHit.lightmapCoord
    // UnityEngine.RaycastHit.normal
    // UnityEngine.RaycastHit.point
    // UnityEngine.RaycastHit.rigidbody
    // UnityEngine.RaycastHit.textureCoord
    // UnityEngine.RaycastHit.textureCoord2
    // UnityEngine.RaycastHit.transform
    // UnityEngine.RaycastHit.triangleIndex
    // UnityEngine.RaycastHit2D.centroid
    // UnityEngine.RaycastHit2D.collider
    // UnityEngine.RaycastHit2D.distance
    // UnityEngine.RaycastHit2D.fraction
    // UnityEngine.RaycastHit2D.normal
    // UnityEngine.RaycastHit2D.op_Implicit
    // UnityEngine.RaycastHit2D.point
    // UnityEngine.RaycastHit2D.rigidbody
    // UnityEngine.RaycastHit2D.transform
    // UnityEngine.Rect..ctor
    // UnityEngine.Rect.center
    // UnityEngine.Rect.height
    // UnityEngine.Rect.max
    // UnityEngine.Rect.min
    // UnityEngine.Rect.op_Equality
    // UnityEngine.Rect.op_Inequality
    // UnityEngine.Rect.position
    // UnityEngine.Rect.size
    // UnityEngine.Rect.width
    // UnityEngine.Rect.x
    // UnityEngine.Rect.xMax
    // UnityEngine.Rect.xMin
    // UnityEngine.Rect.y
    // UnityEngine.Rect.yMax
    // UnityEngine.Rect.yMin
    // UnityEngine.Rect.zero
    // UnityEngine.RectTransform.forward
    // UnityEngine.RectTransform.GetChild
    // UnityEngine.RectTransform.GetLocalCorners
    // UnityEngine.RectTransform.localEulerAngles
    // UnityEngine.RectTransform.localPosition
    // UnityEngine.RectTransform.localRotation
    // UnityEngine.RectTransform.localScale
    // UnityEngine.RectTransform.localToWorldMatrix
    // UnityEngine.RectTransform.lossyScale
    // UnityEngine.RectTransform.op_Equality
    // UnityEngine.RectTransform.op_Implicit
    // UnityEngine.RectTransform.op_Inequality
    // UnityEngine.RectTransform.parent
    // UnityEngine.RectTransform.pivot
    // UnityEngine.RectTransform.position
    // UnityEngine.RectTransform.rect
    // UnityEngine.RectTransform.right
    // UnityEngine.RectTransform.root
    // UnityEngine.RectTransform.worldToLocalMatrix
    // UnityEngine.ReflectionProbe.op_Equality
    // UnityEngine.ReflectionProbe.op_Implicit
    // UnityEngine.ReflectionProbe.op_Inequality
    // UnityEngine.RelativeJoint2D.op_Equality
    // UnityEngine.RelativeJoint2D.op_Implicit
    // UnityEngine.RelativeJoint2D.op_Inequality
    // UnityEngine.Renderer.allowOcclusionWhenDynamic
    // UnityEngine.Renderer.bounds
    // UnityEngine.Renderer.enabled
    // UnityEngine.Renderer.forceRenderingOff
    // UnityEngine.Renderer.gameObject
    // UnityEngine.Renderer.hideFlags
    // UnityEngine.Renderer.isPartOfStaticBatch
    // UnityEngine.Renderer.isVisible
    // UnityEngine.Renderer.lightmapIndex
    // UnityEngine.Renderer.lightmapScaleOffset
    // UnityEngine.Renderer.lightProbeProxyVolumeOverride
    // UnityEngine.Renderer.lightProbeUsage
    // UnityEngine.Renderer.localToWorldMatrix
    // UnityEngine.Renderer.material
    // UnityEngine.Renderer.materials
    // UnityEngine.Renderer.motionVectorGenerationMode
    // UnityEngine.Renderer.name
    // UnityEngine.Renderer.op_Equality
    // UnityEngine.Renderer.op_Implicit
    // UnityEngine.Renderer.op_Inequality
    // UnityEngine.Renderer.probeAnchor
    // UnityEngine.Renderer.rayTracingMode
    // UnityEngine.Renderer.realtimeLightmapIndex
    // UnityEngine.Renderer.realtimeLightmapScaleOffset
    // UnityEngine.Renderer.receiveShadows
    // UnityEngine.Renderer.reflectionProbeUsage
    // UnityEngine.Renderer.rendererPriority
    // UnityEngine.Renderer.renderingLayerMask
    // UnityEngine.Renderer.shadowCastingMode
    // UnityEngine.Renderer.sharedMaterial
    // UnityEngine.Renderer.sharedMaterials
    // UnityEngine.Renderer.sortingLayerID
    // UnityEngine.Renderer.sortingLayerName
    // UnityEngine.Renderer.sortingOrder
    // UnityEngine.Renderer.tag
    // UnityEngine.Renderer.transform
    // UnityEngine.Renderer.worldToLocalMatrix
    // UnityEngine.Rendering.GraphicsSettings.op_Equality
    // UnityEngine.Rendering.GraphicsSettings.op_Implicit
    // UnityEngine.Rendering.GraphicsSettings.op_Inequality
    // UnityEngine.Rendering.SortingGroup.op_Equality
    // UnityEngine.Rendering.SortingGroup.op_Implicit
    // UnityEngine.Rendering.SortingGroup.op_Inequality
    // UnityEngine.RenderSettings.op_Equality
    // UnityEngine.RenderSettings.op_Implicit
    // UnityEngine.RenderSettings.op_Inequality
    // UnityEngine.RenderTexture.op_Equality
    // UnityEngine.RenderTexture.op_Implicit
    // UnityEngine.RenderTexture.op_Inequality
    // UnityEngine.Rigidbody.AddForce
    // UnityEngine.Rigidbody.AddForce
    // UnityEngine.Rigidbody.angularDrag
    // UnityEngine.Rigidbody.angularVelocity
    // UnityEngine.Rigidbody.centerOfMass
    // UnityEngine.Rigidbody.collisionDetectionMode
    // UnityEngine.Rigidbody.constraints
    // UnityEngine.Rigidbody.detectCollisions
    // UnityEngine.Rigidbody.drag
    // UnityEngine.Rigidbody.freezeRotation
    // UnityEngine.Rigidbody.gameObject
    // UnityEngine.Rigidbody.hideFlags
    // UnityEngine.Rigidbody.inertiaTensor
    // UnityEngine.Rigidbody.inertiaTensorRotation
    // UnityEngine.Rigidbody.interpolation
    // UnityEngine.Rigidbody.isKinematic
    // UnityEngine.Rigidbody.mass
    // UnityEngine.Rigidbody.maxAngularVelocity
    // UnityEngine.Rigidbody.maxDepenetrationVelocity
    // UnityEngine.Rigidbody.name
    // UnityEngine.Rigidbody.op_Equality
    // UnityEngine.Rigidbody.op_Implicit
    // UnityEngine.Rigidbody.op_Inequality
    // UnityEngine.Rigidbody.position
    // UnityEngine.Rigidbody.rotation
    // UnityEngine.Rigidbody.sleepThreshold
    // UnityEngine.Rigidbody.solverIterations
    // UnityEngine.Rigidbody.solverVelocityIterations
    // UnityEngine.Rigidbody.tag
    // UnityEngine.Rigidbody.transform
    // UnityEngine.Rigidbody.useGravity
    // UnityEngine.Rigidbody.velocity
    // UnityEngine.Rigidbody.worldCenterOfMass
    // UnityEngine.Rigidbody2D.AddForce
    // UnityEngine.Rigidbody2D.op_Equality
    // UnityEngine.Rigidbody2D.op_Implicit
    // UnityEngine.Rigidbody2D.op_Inequality
    // UnityEngine.Rigidbody2D.velocity
    // UnityEngine.RuntimeAnimatorController.op_Equality
    // UnityEngine.RuntimeAnimatorController.op_Implicit
    // UnityEngine.RuntimeAnimatorController.op_Inequality
    // UnityEngine.SceneManagement.Scene.name
    // UnityEngine.SceneManagement.Scene.op_Equality
    // UnityEngine.SceneManagement.Scene.op_Inequality
    // UnityEngine.SceneManagement.SceneManager.GetActiveScene
    // UnityEngine.SceneManagement.SceneManager.LoadScene
    // UnityEngine.SceneManagement.SceneManager.LoadScene
    // UnityEngine.Screen.autorotateToLandscapeLeft
    // UnityEngine.Screen.autorotateToLandscapeRight
    // UnityEngine.Screen.autorotateToPortrait
    // UnityEngine.Screen.autorotateToPortraitUpsideDown
    // UnityEngine.Screen.brightness
    // UnityEngine.Screen.currentResolution
    // UnityEngine.Screen.cutouts
    // UnityEngine.Screen.dpi
    // UnityEngine.Screen.fullScreen
    // UnityEngine.Screen.fullScreenMode
    // UnityEngine.Screen.height
    // UnityEngine.Screen.orientation
    // UnityEngine.Screen.resolutions
    // UnityEngine.Screen.safeArea
    // UnityEngine.Screen.sleepTimeout
    // UnityEngine.Screen.width
    // UnityEngine.ScriptableObject.op_Equality
    // UnityEngine.ScriptableObject.op_Implicit
    // UnityEngine.ScriptableObject.op_Inequality
    // UnityEngine.Shader.globalMaximumLOD
    // UnityEngine.Shader.globalRenderPipeline
    // UnityEngine.Shader.hideFlags
    // UnityEngine.Shader.isSupported
    // UnityEngine.Shader.maximumLOD
    // UnityEngine.Shader.name
    // UnityEngine.Shader.op_Equality
    // UnityEngine.Shader.op_Implicit
    // UnityEngine.Shader.op_Inequality
    // UnityEngine.Shader.passCount
    // UnityEngine.Shader.renderQueue
    // UnityEngine.ShaderVariantCollection.op_Equality
    // UnityEngine.ShaderVariantCollection.op_Implicit
    // UnityEngine.ShaderVariantCollection.op_Inequality
    // UnityEngine.SkinnedMeshRenderer.op_Equality
    // UnityEngine.SkinnedMeshRenderer.op_Implicit
    // UnityEngine.SkinnedMeshRenderer.op_Inequality
    // UnityEngine.Skybox.op_Equality
    // UnityEngine.Skybox.op_Implicit
    // UnityEngine.Skybox.op_Inequality
    // UnityEngine.SliderJoint2D.op_Equality
    // UnityEngine.SliderJoint2D.op_Implicit
    // UnityEngine.SliderJoint2D.op_Inequality
    // UnityEngine.SparseTexture.op_Equality
    // UnityEngine.SparseTexture.op_Implicit
    // UnityEngine.SparseTexture.op_Inequality
    // UnityEngine.SpatialTracking.TrackedPoseDriver.op_Equality
    // UnityEngine.SpatialTracking.TrackedPoseDriver.op_Implicit
    // UnityEngine.SpatialTracking.TrackedPoseDriver.op_Inequality
    // UnityEngine.SphereCollider.attachedArticulationBody
    // UnityEngine.SphereCollider.attachedRigidbody
    // UnityEngine.SphereCollider.bounds
    // UnityEngine.SphereCollider.center
    // UnityEngine.SphereCollider.contactOffset
    // UnityEngine.SphereCollider.enabled
    // UnityEngine.SphereCollider.gameObject
    // UnityEngine.SphereCollider.hideFlags
    // UnityEngine.SphereCollider.isTrigger
    // UnityEngine.SphereCollider.material
    // UnityEngine.SphereCollider.name
    // UnityEngine.SphereCollider.op_Equality
    // UnityEngine.SphereCollider.op_Implicit
    // UnityEngine.SphereCollider.op_Inequality
    // UnityEngine.SphereCollider.radius
    // UnityEngine.SphereCollider.sharedMaterial
    // UnityEngine.SphereCollider.tag
    // UnityEngine.SphereCollider.transform
    // UnityEngine.SpringJoint.op_Equality
    // UnityEngine.SpringJoint.op_Implicit
    // UnityEngine.SpringJoint.op_Inequality
    // UnityEngine.SpringJoint2D.op_Equality
    // UnityEngine.SpringJoint2D.op_Implicit
    // UnityEngine.SpringJoint2D.op_Inequality
    // UnityEngine.Sprite.associatedAlphaSplitTexture
    // UnityEngine.Sprite.border
    // UnityEngine.Sprite.bounds
    // UnityEngine.Sprite.hideFlags
    // UnityEngine.Sprite.name
    // UnityEngine.Sprite.op_Equality
    // UnityEngine.Sprite.op_Implicit
    // UnityEngine.Sprite.op_Inequality
    // UnityEngine.Sprite.packed
    // UnityEngine.Sprite.packingMode
    // UnityEngine.Sprite.packingRotation
    // UnityEngine.Sprite.pivot
    // UnityEngine.Sprite.pixelsPerUnit
    // UnityEngine.Sprite.rect
    // UnityEngine.Sprite.spriteAtlasTextureScale
    // UnityEngine.Sprite.texture
    // UnityEngine.Sprite.textureRect
    // UnityEngine.Sprite.textureRectOffset
    // UnityEngine.Sprite.triangles
    // UnityEngine.Sprite.uv
    // UnityEngine.Sprite.vertices
    // UnityEngine.SpriteMask.op_Equality
    // UnityEngine.SpriteMask.op_Implicit
    // UnityEngine.SpriteMask.op_Inequality
    // UnityEngine.SpriteRenderer.color
    // UnityEngine.SpriteRenderer.op_Equality
    // UnityEngine.SpriteRenderer.op_Implicit
    // UnityEngine.SpriteRenderer.op_Inequality
    // UnityEngine.SpriteRenderer.sprite
    // UnityEngine.SurfaceEffector2D.op_Equality
    // UnityEngine.SurfaceEffector2D.op_Implicit
    // UnityEngine.SurfaceEffector2D.op_Inequality
    // UnityEngine.TargetJoint2D.op_Equality
    // UnityEngine.TargetJoint2D.op_Implicit
    // UnityEngine.TargetJoint2D.op_Inequality
    // UnityEngine.Terrain.op_Equality
    // UnityEngine.Terrain.op_Implicit
    // UnityEngine.Terrain.op_Inequality
    // UnityEngine.TerrainCollider.op_Equality
    // UnityEngine.TerrainCollider.op_Implicit
    // UnityEngine.TerrainCollider.op_Inequality
    // UnityEngine.TerrainData.op_Equality
    // UnityEngine.TerrainData.op_Implicit
    // UnityEngine.TerrainData.op_Inequality
    // UnityEngine.TerrainLayer.op_Equality
    // UnityEngine.TerrainLayer.op_Implicit
    // UnityEngine.TerrainLayer.op_Inequality
    // UnityEngine.TextAsset.op_Equality
    // UnityEngine.TextAsset.op_Implicit
    // UnityEngine.TextAsset.op_Inequality
    // UnityEngine.TextMesh.op_Equality
    // UnityEngine.TextMesh.op_Implicit
    // UnityEngine.TextMesh.op_Inequality
    // UnityEngine.Texture.allowThreadedTextureCreation
    // UnityEngine.Texture.anisoLevel
    // UnityEngine.Texture.anisotropicFiltering
    // UnityEngine.Texture.currentTextureMemory
    // UnityEngine.Texture.desiredTextureMemory
    // UnityEngine.Texture.dimension
    // UnityEngine.Texture.filterMode
    // UnityEngine.Texture.GenerateAllMips
    // UnityEngine.Texture.graphicsFormat
    // UnityEngine.Texture.height
    // UnityEngine.Texture.hideFlags
    // UnityEngine.Texture.imageContentsHash
    // UnityEngine.Texture.isReadable
    // UnityEngine.Texture.masterTextureLimit
    // UnityEngine.Texture.mipMapBias
    // UnityEngine.Texture.mipmapCount
    // UnityEngine.Texture.name
    // UnityEngine.Texture.nonStreamingTextureCount
    // UnityEngine.Texture.nonStreamingTextureMemory
    // UnityEngine.Texture.op_Equality
    // UnityEngine.Texture.op_Implicit
    // UnityEngine.Texture.op_Inequality
    // UnityEngine.Texture.streamingMipmapUploadCount
    // UnityEngine.Texture.streamingRendererCount
    // UnityEngine.Texture.streamingTextureCount
    // UnityEngine.Texture.streamingTextureDiscardUnusedMips
    // UnityEngine.Texture.streamingTextureForceLoadAll
    // UnityEngine.Texture.streamingTextureLoadingCount
    // UnityEngine.Texture.streamingTexturePendingLoadCount
    // UnityEngine.Texture.targetTextureMemory
    // UnityEngine.Texture.texelSize
    // UnityEngine.Texture.totalTextureMemory
    // UnityEngine.Texture.updateCount
    // UnityEngine.Texture.width
    // UnityEngine.Texture.wrapMode
    // UnityEngine.Texture.wrapModeU
    // UnityEngine.Texture.wrapModeV
    // UnityEngine.Texture.wrapModeW
    // UnityEngine.Texture2D.op_Equality
    // UnityEngine.Texture2D.op_Implicit
    // UnityEngine.Texture2D.op_Inequality
    // UnityEngine.Texture2DArray.op_Equality
    // UnityEngine.Texture2DArray.op_Implicit
    // UnityEngine.Texture2DArray.op_Inequality
    // UnityEngine.Texture3D.op_Equality
    // UnityEngine.Texture3D.op_Implicit
    // UnityEngine.Texture3D.op_Inequality
    // UnityEngine.Tilemaps.Tile.op_Equality
    // UnityEngine.Tilemaps.Tile.op_Implicit
    // UnityEngine.Tilemaps.Tile.op_Inequality
    // UnityEngine.Tilemaps.Tilemap.op_Equality
    // UnityEngine.Tilemaps.Tilemap.op_Implicit
    // UnityEngine.Tilemaps.Tilemap.op_Inequality
    // UnityEngine.Tilemaps.TilemapCollider2D.op_Equality
    // UnityEngine.Tilemaps.TilemapCollider2D.op_Implicit
    // UnityEngine.Tilemaps.TilemapCollider2D.op_Inequality
    // UnityEngine.Tilemaps.TilemapRenderer.op_Equality
    // UnityEngine.Tilemaps.TilemapRenderer.op_Implicit
    // UnityEngine.Tilemaps.TilemapRenderer.op_Inequality
    // UnityEngine.Time.captureDeltaTime
    // UnityEngine.Time.captureFramerate
    // UnityEngine.Time.deltaTime
    // UnityEngine.Time.fixedDeltaTime
    // UnityEngine.Time.fixedTime
    // UnityEngine.Time.fixedTimeAsDouble
    // UnityEngine.Time.fixedUnscaledDeltaTime
    // UnityEngine.Time.fixedUnscaledTime
    // UnityEngine.Time.fixedUnscaledTimeAsDouble
    // UnityEngine.Time.frameCount
    // UnityEngine.Time.inFixedTimeStep
    // UnityEngine.Time.maximumDeltaTime
    // UnityEngine.Time.maximumParticleDeltaTime
    // UnityEngine.Time.realtimeSinceStartup
    // UnityEngine.Time.realtimeSinceStartupAsDouble
    // UnityEngine.Time.renderedFrameCount
    // UnityEngine.Time.smoothDeltaTime
    // UnityEngine.Time.time
    // UnityEngine.Time.timeAsDouble
    // UnityEngine.Time.timeScale
    // UnityEngine.Time.timeSinceLevelLoad
    // UnityEngine.Time.timeSinceLevelLoadAsDouble
    // UnityEngine.Time.unscaledDeltaTime
    // UnityEngine.Time.unscaledTime
    // UnityEngine.Time.unscaledTimeAsDouble
    // UnityEngine.Touch.altitudeAngle
    // UnityEngine.Touch.azimuthAngle
    // UnityEngine.Touch.deltaPosition
    // UnityEngine.Touch.deltaTime
    // UnityEngine.Touch.fingerId
    // UnityEngine.Touch.maximumPossiblePressure
    // UnityEngine.Touch.phase
    // UnityEngine.Touch.position
    // UnityEngine.Touch.pressure
    // UnityEngine.Touch.radius
    // UnityEngine.Touch.radiusVariance
    // UnityEngine.Touch.rawPosition
    // UnityEngine.Touch.tapCount
    // UnityEngine.Touch.type
    // UnityEngine.TrailRenderer.op_Equality
    // UnityEngine.TrailRenderer.op_Implicit
    // UnityEngine.TrailRenderer.op_Inequality
    // UnityEngine.Transform.childCount
    // UnityEngine.Transform.eulerAngles
    // UnityEngine.Transform.forward
    // UnityEngine.Transform.gameObject
    // UnityEngine.Transform.GetChild
    // UnityEngine.Transform.GetSiblingIndex
    // UnityEngine.Transform.hasChanged
    // UnityEngine.Transform.hideFlags
    // UnityEngine.Transform.hierarchyCapacity
    // UnityEngine.Transform.hierarchyCount
    // UnityEngine.Transform.localEulerAngles
    // UnityEngine.Transform.localPosition
    // UnityEngine.Transform.localRotation
    // UnityEngine.Transform.localScale
    // UnityEngine.Transform.localToWorldMatrix
    // UnityEngine.Transform.LookAt
    // UnityEngine.Transform.LookAt
    // UnityEngine.Transform.LookAt
    // UnityEngine.Transform.lossyScale
    // UnityEngine.Transform.name
    // UnityEngine.Transform.op_Equality
    // UnityEngine.Transform.op_Implicit
    // UnityEngine.Transform.op_Inequality
    // UnityEngine.Transform.parent
    // UnityEngine.Transform.position
    // UnityEngine.Transform.right
    // UnityEngine.Transform.root
    // UnityEngine.Transform.Rotate
    // UnityEngine.Transform.Rotate
    // UnityEngine.Transform.Rotate
    // UnityEngine.Transform.RotateAround
    // UnityEngine.Transform.rotation
    // UnityEngine.Transform.tag
    // UnityEngine.Transform.transform
    // UnityEngine.Transform.TransformDirection
    // UnityEngine.Transform.Translate
    // UnityEngine.Transform.Translate
    // UnityEngine.Transform.up
    // UnityEngine.Transform.worldToLocalMatrix
    // UnityEngine.Tree.op_Equality
    // UnityEngine.Tree.op_Implicit
    // UnityEngine.Tree.op_Inequality
    // UnityEngine.U2D.SpriteAtlas.op_Equality
    // UnityEngine.U2D.SpriteAtlas.op_Implicit
    // UnityEngine.U2D.SpriteAtlas.op_Inequality
    // UnityEngine.UI.AspectRatioFitter.op_Equality
    // UnityEngine.UI.AspectRatioFitter.op_Implicit
    // UnityEngine.UI.AspectRatioFitter.op_Inequality
    // UnityEngine.UI.Button.animationTriggers
    // UnityEngine.UI.Button.animator
    // UnityEngine.UI.Button.colors
    // UnityEngine.UI.Button.enabled
    // UnityEngine.UI.Button.gameObject
    // UnityEngine.UI.Button.hideFlags
    // UnityEngine.UI.Button.image
    // UnityEngine.UI.Button.interactable
    // UnityEngine.UI.Button.isActiveAndEnabled
    // UnityEngine.UI.Button.name
    // UnityEngine.UI.Button.navigation
    // UnityEngine.UI.Button.onClick
    // UnityEngine.UI.Button.op_Equality
    // UnityEngine.UI.Button.op_Implicit
    // UnityEngine.UI.Button.op_Inequality
    // UnityEngine.UI.Button.spriteState
    // UnityEngine.UI.Button.tag
    // UnityEngine.UI.Button.targetGraphic
    // UnityEngine.UI.Button.transform
    // UnityEngine.UI.Button.transition
    // UnityEngine.UI.Button.useGUILayout
    // UnityEngine.UI.CanvasScaler.op_Equality
    // UnityEngine.UI.CanvasScaler.op_Implicit
    // UnityEngine.UI.CanvasScaler.op_Inequality
    // UnityEngine.UI.ContentSizeFitter.op_Equality
    // UnityEngine.UI.ContentSizeFitter.op_Implicit
    // UnityEngine.UI.ContentSizeFitter.op_Inequality
    // UnityEngine.UI.Dropdown.op_Equality
    // UnityEngine.UI.Dropdown.op_Implicit
    // UnityEngine.UI.Dropdown.op_Inequality
    // UnityEngine.UI.GraphicRaycaster.op_Equality
    // UnityEngine.UI.GraphicRaycaster.op_Implicit
    // UnityEngine.UI.GraphicRaycaster.op_Inequality
    // UnityEngine.UI.GridLayoutGroup.op_Equality
    // UnityEngine.UI.GridLayoutGroup.op_Implicit
    // UnityEngine.UI.GridLayoutGroup.op_Inequality
    // UnityEngine.UI.HorizontalLayoutGroup.op_Equality
    // UnityEngine.UI.HorizontalLayoutGroup.op_Implicit
    // UnityEngine.UI.HorizontalLayoutGroup.op_Inequality
    // UnityEngine.UI.Image.alphaHitTestMinimumThreshold
    // UnityEngine.UI.Image.canvas
    // UnityEngine.UI.Image.canvasRenderer
    // UnityEngine.UI.Image.color
    // UnityEngine.UI.Image.defaultETC1GraphicMaterial
    // UnityEngine.UI.Image.defaultMaterial
    // UnityEngine.UI.Image.depth
    // UnityEngine.UI.Image.enabled
    // UnityEngine.UI.Image.fillAmount
    // UnityEngine.UI.Image.fillCenter
    // UnityEngine.UI.Image.fillClockwise
    // UnityEngine.UI.Image.fillMethod
    // UnityEngine.UI.Image.fillOrigin
    // UnityEngine.UI.Image.flexibleHeight
    // UnityEngine.UI.Image.flexibleWidth
    // UnityEngine.UI.Image.gameObject
    // UnityEngine.UI.Image.hasBorder
    // UnityEngine.UI.Image.hideFlags
    // UnityEngine.UI.Image.isActiveAndEnabled
    // UnityEngine.UI.Image.isMaskingGraphic
    // UnityEngine.UI.Image.layoutPriority
    // UnityEngine.UI.Image.mainTexture
    // UnityEngine.UI.Image.maskable
    // UnityEngine.UI.Image.material
    // UnityEngine.UI.Image.materialForRendering
    // UnityEngine.UI.Image.minHeight
    // UnityEngine.UI.Image.minWidth
    // UnityEngine.UI.Image.name
    // UnityEngine.UI.Image.onCullStateChanged
    // UnityEngine.UI.Image.op_Equality
    // UnityEngine.UI.Image.op_Implicit
    // UnityEngine.UI.Image.op_Inequality
    // UnityEngine.UI.Image.overrideSprite
    // UnityEngine.UI.Image.pixelsPerUnit
    // UnityEngine.UI.Image.pixelsPerUnitMultiplier
    // UnityEngine.UI.Image.preferredHeight
    // UnityEngine.UI.Image.preferredWidth
    // UnityEngine.UI.Image.preserveAspect
    // UnityEngine.UI.Image.raycastPadding
    // UnityEngine.UI.Image.raycastTarget
    // UnityEngine.UI.Image.rectTransform
    // UnityEngine.UI.Image.sprite
    // UnityEngine.UI.Image.tag
    // UnityEngine.UI.Image.transform
    // UnityEngine.UI.Image.type
    // UnityEngine.UI.Image.useGUILayout
    // UnityEngine.UI.Image.useSpriteMesh
    // UnityEngine.UI.InputField.animationTriggers
    // UnityEngine.UI.InputField.animator
    // UnityEngine.UI.InputField.asteriskChar
    // UnityEngine.UI.InputField.caretBlinkRate
    // UnityEngine.UI.InputField.caretColor
    // UnityEngine.UI.InputField.caretPosition
    // UnityEngine.UI.InputField.caretWidth
    // UnityEngine.UI.InputField.characterLimit
    // UnityEngine.UI.InputField.characterValidation
    // UnityEngine.UI.InputField.colors
    // UnityEngine.UI.InputField.contentType
    // UnityEngine.UI.InputField.customCaretColor
    // UnityEngine.UI.InputField.enabled
    // UnityEngine.UI.InputField.flexibleHeight
    // UnityEngine.UI.InputField.flexibleWidth
    // UnityEngine.UI.InputField.gameObject
    // UnityEngine.UI.InputField.hideFlags
    // UnityEngine.UI.InputField.image
    // UnityEngine.UI.InputField.inputType
    // UnityEngine.UI.InputField.interactable
    // UnityEngine.UI.InputField.isActiveAndEnabled
    // UnityEngine.UI.InputField.isFocused
    // UnityEngine.UI.InputField.keyboardType
    // UnityEngine.UI.InputField.layoutPriority
    // UnityEngine.UI.InputField.lineType
    // UnityEngine.UI.InputField.minHeight
    // UnityEngine.UI.InputField.minWidth
    // UnityEngine.UI.InputField.multiLine
    // UnityEngine.UI.InputField.name
    // UnityEngine.UI.InputField.navigation
    // UnityEngine.UI.InputField.onEndEdit
    // UnityEngine.UI.InputField.onValidateInput
    // UnityEngine.UI.InputField.onValueChanged
    // UnityEngine.UI.InputField.op_Equality
    // UnityEngine.UI.InputField.op_Implicit
    // UnityEngine.UI.InputField.op_Inequality
    // UnityEngine.UI.InputField.placeholder
    // UnityEngine.UI.InputField.preferredHeight
    // UnityEngine.UI.InputField.preferredWidth
    // UnityEngine.UI.InputField.readOnly
    // UnityEngine.UI.InputField.selectionAnchorPosition
    // UnityEngine.UI.InputField.selectionColor
    // UnityEngine.UI.InputField.selectionFocusPosition
    // UnityEngine.UI.InputField.shouldActivateOnSelect
    // UnityEngine.UI.InputField.shouldHideMobileInput
    // UnityEngine.UI.InputField.spriteState
    // UnityEngine.UI.InputField.tag
    // UnityEngine.UI.InputField.targetGraphic
    // UnityEngine.UI.InputField.text
    // UnityEngine.UI.InputField.textComponent
    // UnityEngine.UI.InputField.touchScreenKeyboard
    // UnityEngine.UI.InputField.transform
    // UnityEngine.UI.InputField.transition
    // UnityEngine.UI.InputField.useGUILayout
    // UnityEngine.UI.InputField.wasCanceled
    // UnityEngine.UI.LayoutElement.op_Equality
    // UnityEngine.UI.LayoutElement.op_Implicit
    // UnityEngine.UI.LayoutElement.op_Inequality
    // UnityEngine.UI.Mask.enabled
    // UnityEngine.UI.Mask.gameObject
    // UnityEngine.UI.Mask.graphic
    // UnityEngine.UI.Mask.hideFlags
    // UnityEngine.UI.Mask.isActiveAndEnabled
    // UnityEngine.UI.Mask.name
    // UnityEngine.UI.Mask.op_Equality
    // UnityEngine.UI.Mask.op_Implicit
    // UnityEngine.UI.Mask.op_Inequality
    // UnityEngine.UI.Mask.rectTransform
    // UnityEngine.UI.Mask.showMaskGraphic
    // UnityEngine.UI.Mask.tag
    // UnityEngine.UI.Mask.transform
    // UnityEngine.UI.Mask.useGUILayout
    // UnityEngine.UI.Outline.op_Equality
    // UnityEngine.UI.Outline.op_Implicit
    // UnityEngine.UI.Outline.op_Inequality
    // UnityEngine.UI.PositionAsUV1.op_Equality
    // UnityEngine.UI.PositionAsUV1.op_Implicit
    // UnityEngine.UI.PositionAsUV1.op_Inequality
    // UnityEngine.UI.RawImage.op_Equality
    // UnityEngine.UI.RawImage.op_Implicit
    // UnityEngine.UI.RawImage.op_Inequality
    // UnityEngine.UI.RectMask2D.op_Equality
    // UnityEngine.UI.RectMask2D.op_Implicit
    // UnityEngine.UI.RectMask2D.op_Inequality
    // UnityEngine.UI.Scrollbar.animationTriggers
    // UnityEngine.UI.Scrollbar.animator
    // UnityEngine.UI.Scrollbar.colors
    // UnityEngine.UI.Scrollbar.direction
    // UnityEngine.UI.Scrollbar.enabled
    // UnityEngine.UI.Scrollbar.gameObject
    // UnityEngine.UI.Scrollbar.handleRect
    // UnityEngine.UI.Scrollbar.hideFlags
    // UnityEngine.UI.Scrollbar.image
    // UnityEngine.UI.Scrollbar.interactable
    // UnityEngine.UI.Scrollbar.isActiveAndEnabled
    // UnityEngine.UI.Scrollbar.name
    // UnityEngine.UI.Scrollbar.navigation
    // UnityEngine.UI.Scrollbar.numberOfSteps
    // UnityEngine.UI.Scrollbar.onValueChanged
    // UnityEngine.UI.Scrollbar.op_Equality
    // UnityEngine.UI.Scrollbar.op_Implicit
    // UnityEngine.UI.Scrollbar.op_Inequality
    // UnityEngine.UI.Scrollbar.size
    // UnityEngine.UI.Scrollbar.spriteState
    // UnityEngine.UI.Scrollbar.tag
    // UnityEngine.UI.Scrollbar.targetGraphic
    // UnityEngine.UI.Scrollbar.transform
    // UnityEngine.UI.Scrollbar.transition
    // UnityEngine.UI.Scrollbar.useGUILayout
    // UnityEngine.UI.Scrollbar.value
    // UnityEngine.UI.ScrollRect.op_Equality
    // UnityEngine.UI.ScrollRect.op_Implicit
    // UnityEngine.UI.ScrollRect.op_Inequality
    // UnityEngine.UI.Selectable.op_Equality
    // UnityEngine.UI.Selectable.op_Implicit
    // UnityEngine.UI.Selectable.op_Inequality
    // UnityEngine.UI.Shadow.op_Equality
    // UnityEngine.UI.Shadow.op_Implicit
    // UnityEngine.UI.Shadow.op_Inequality
    // UnityEngine.UI.Slider.animationTriggers
    // UnityEngine.UI.Slider.animator
    // UnityEngine.UI.Slider.colors
    // UnityEngine.UI.Slider.direction
    // UnityEngine.UI.Slider.enabled
    // UnityEngine.UI.Slider.fillRect
    // UnityEngine.UI.Slider.gameObject
    // UnityEngine.UI.Slider.handleRect
    // UnityEngine.UI.Slider.hideFlags
    // UnityEngine.UI.Slider.image
    // UnityEngine.UI.Slider.interactable
    // UnityEngine.UI.Slider.isActiveAndEnabled
    // UnityEngine.UI.Slider.maxValue
    // UnityEngine.UI.Slider.minValue
    // UnityEngine.UI.Slider.name
    // UnityEngine.UI.Slider.navigation
    // UnityEngine.UI.Slider.normalizedValue
    // UnityEngine.UI.Slider.onValueChanged
    // UnityEngine.UI.Slider.op_Equality
    // UnityEngine.UI.Slider.op_Implicit
    // UnityEngine.UI.Slider.op_Inequality
    // UnityEngine.UI.Slider.spriteState
    // UnityEngine.UI.Slider.tag
    // UnityEngine.UI.Slider.targetGraphic
    // UnityEngine.UI.Slider.transform
    // UnityEngine.UI.Slider.transition
    // UnityEngine.UI.Slider.useGUILayout
    // UnityEngine.UI.Slider.value
    // UnityEngine.UI.Slider.wholeNumbers
    // UnityEngine.UI.Text.alignByGeometry
    // UnityEngine.UI.Text.alignment
    // UnityEngine.UI.Text.cachedTextGenerator
    // UnityEngine.UI.Text.cachedTextGeneratorForLayout
    // UnityEngine.UI.Text.canvas
    // UnityEngine.UI.Text.canvasRenderer
    // UnityEngine.UI.Text.color
    // UnityEngine.UI.Text.defaultMaterial
    // UnityEngine.UI.Text.depth
    // UnityEngine.UI.Text.enabled
    // UnityEngine.UI.Text.flexibleHeight
    // UnityEngine.UI.Text.flexibleWidth
    // UnityEngine.UI.Text.font
    // UnityEngine.UI.Text.fontSize
    // UnityEngine.UI.Text.fontStyle
    // UnityEngine.UI.Text.gameObject
    // UnityEngine.UI.Text.hideFlags
    // UnityEngine.UI.Text.horizontalOverflow
    // UnityEngine.UI.Text.isActiveAndEnabled
    // UnityEngine.UI.Text.isMaskingGraphic
    // UnityEngine.UI.Text.layoutPriority
    // UnityEngine.UI.Text.lineSpacing
    // UnityEngine.UI.Text.mainTexture
    // UnityEngine.UI.Text.maskable
    // UnityEngine.UI.Text.material
    // UnityEngine.UI.Text.materialForRendering
    // UnityEngine.UI.Text.minHeight
    // UnityEngine.UI.Text.minWidth
    // UnityEngine.UI.Text.name
    // UnityEngine.UI.Text.onCullStateChanged
    // UnityEngine.UI.Text.op_Equality
    // UnityEngine.UI.Text.op_Implicit
    // UnityEngine.UI.Text.op_Inequality
    // UnityEngine.UI.Text.pixelsPerUnit
    // UnityEngine.UI.Text.preferredHeight
    // UnityEngine.UI.Text.preferredWidth
    // UnityEngine.UI.Text.raycastPadding
    // UnityEngine.UI.Text.raycastTarget
    // UnityEngine.UI.Text.rectTransform
    // UnityEngine.UI.Text.resizeTextForBestFit
    // UnityEngine.UI.Text.resizeTextMaxSize
    // UnityEngine.UI.Text.resizeTextMinSize
    // UnityEngine.UI.Text.supportRichText
    // UnityEngine.UI.Text.tag
    // UnityEngine.UI.Text.text
    // UnityEngine.UI.Text.transform
    // UnityEngine.UI.Text.useGUILayout
    // UnityEngine.UI.Text.verticalOverflow
    // UnityEngine.UI.Toggle.animationTriggers
    // UnityEngine.UI.Toggle.animator
    // UnityEngine.UI.Toggle.colors
    // UnityEngine.UI.Toggle.enabled
    // UnityEngine.UI.Toggle.gameObject
    // UnityEngine.UI.Toggle.graphic
    // UnityEngine.UI.Toggle.group
    // UnityEngine.UI.Toggle.hideFlags
    // UnityEngine.UI.Toggle.image
    // UnityEngine.UI.Toggle.interactable
    // UnityEngine.UI.Toggle.isActiveAndEnabled
    // UnityEngine.UI.Toggle.isOn
    // UnityEngine.UI.Toggle.name
    // UnityEngine.UI.Toggle.navigation
    // UnityEngine.UI.Toggle.onValueChanged
    // UnityEngine.UI.Toggle.op_Equality
    // UnityEngine.UI.Toggle.op_Implicit
    // UnityEngine.UI.Toggle.op_Inequality
    // UnityEngine.UI.Toggle.spriteState
    // UnityEngine.UI.Toggle.tag
    // UnityEngine.UI.Toggle.targetGraphic
    // UnityEngine.UI.Toggle.toggleTransition
    // UnityEngine.UI.Toggle.transform
    // UnityEngine.UI.Toggle.transition
    // UnityEngine.UI.Toggle.useGUILayout
    // UnityEngine.UI.ToggleGroup.op_Equality
    // UnityEngine.UI.ToggleGroup.op_Implicit
    // UnityEngine.UI.ToggleGroup.op_Inequality
    // UnityEngine.UI.VerticalLayoutGroup.op_Equality
    // UnityEngine.UI.VerticalLayoutGroup.op_Implicit
    // UnityEngine.UI.VerticalLayoutGroup.op_Inequality
    // UnityEngine.UIElements.StyleSheet.op_Equality
    // UnityEngine.UIElements.StyleSheet.op_Implicit
    // UnityEngine.UIElements.StyleSheet.op_Inequality
    // UnityEngine.UIElements.ThemeStyleSheet.op_Equality
    // UnityEngine.UIElements.ThemeStyleSheet.op_Implicit
    // UnityEngine.UIElements.ThemeStyleSheet.op_Inequality
    // UnityEngine.UIElements.VectorImage.op_Equality
    // UnityEngine.UIElements.VectorImage.op_Implicit
    // UnityEngine.UIElements.VectorImage.op_Inequality
    // UnityEngine.UIElements.VisualTreeAsset.op_Equality
    // UnityEngine.UIElements.VisualTreeAsset.op_Implicit
    // UnityEngine.UIElements.VisualTreeAsset.op_Inequality
    // UnityEngine.Vector2..ctor
    // UnityEngine.Vector2.Distance
    // UnityEngine.Vector2.Dot
    // UnityEngine.Vector2.down
    // UnityEngine.Vector2.Equals
    // UnityEngine.Vector2.kEpsilon
    // UnityEngine.Vector2.kEpsilonNormalSqrt
    // UnityEngine.Vector2.left
    // UnityEngine.Vector2.magnitude
    // UnityEngine.Vector2.negativeInfinity
    // UnityEngine.Vector2.normalized
    // UnityEngine.Vector2.one
    // UnityEngine.Vector2.op_Addition
    // UnityEngine.Vector2.op_Division
    // UnityEngine.Vector2.op_Division
    // UnityEngine.Vector2.op_Equality
    // UnityEngine.Vector2.op_Implicit
    // UnityEngine.Vector2.op_Implicit
    // UnityEngine.Vector2.op_Inequality
    // UnityEngine.Vector2.op_Multiply
    // UnityEngine.Vector2.op_Multiply
    // UnityEngine.Vector2.op_Multiply
    // UnityEngine.Vector2.op_Subtraction
    // UnityEngine.Vector2.op_UnaryNegation
    // UnityEngine.Vector2.positiveInfinity
    // UnityEngine.Vector2.right
    // UnityEngine.Vector2.sqrMagnitude
    // UnityEngine.Vector2.up
    // UnityEngine.Vector2.x
    // UnityEngine.Vector2.y
    // UnityEngine.Vector2.zero
    // UnityEngine.Vector3..ctor
    // UnityEngine.Vector3.back
    // UnityEngine.Vector3.Cross
    // UnityEngine.Vector3.Distance
    // UnityEngine.Vector3.Dot
    // UnityEngine.Vector3.down
    // UnityEngine.Vector3.Equals
    // UnityEngine.Vector3.forward
    // UnityEngine.Vector3.kEpsilon
    // UnityEngine.Vector3.kEpsilonNormalSqrt
    // UnityEngine.Vector3.left
    // UnityEngine.Vector3.magnitude
    // UnityEngine.Vector3.MoveTowards
    // UnityEngine.Vector3.negativeInfinity
    // UnityEngine.Vector3.Normalize
    // UnityEngine.Vector3.normalized
    // UnityEngine.Vector3.one
    // UnityEngine.Vector3.op_Addition
    // UnityEngine.Vector3.op_Division
    // UnityEngine.Vector3.op_Equality
    // UnityEngine.Vector3.op_Inequality
    // UnityEngine.Vector3.op_Multiply
    // UnityEngine.Vector3.op_Multiply
    // UnityEngine.Vector3.op_Subtraction
    // UnityEngine.Vector3.op_UnaryNegation
    // UnityEngine.Vector3.positiveInfinity
    // UnityEngine.Vector3.right
    // UnityEngine.Vector3.sqrMagnitude
    // UnityEngine.Vector3.SqrMagnitude
    // UnityEngine.Vector3.up
    // UnityEngine.Vector3.x
    // UnityEngine.Vector3.y
    // UnityEngine.Vector3.z
    // UnityEngine.Vector3.zero
    // UnityEngine.Vector4.kEpsilon
    // UnityEngine.Vector4.magnitude
    // UnityEngine.Vector4.negativeInfinity
    // UnityEngine.Vector4.normalized
    // UnityEngine.Vector4.one
    // UnityEngine.Vector4.op_Addition
    // UnityEngine.Vector4.op_Division
    // UnityEngine.Vector4.op_Equality
    // UnityEngine.Vector4.op_Implicit
    // UnityEngine.Vector4.op_Implicit
    // UnityEngine.Vector4.op_Implicit
    // UnityEngine.Vector4.op_Inequality
    // UnityEngine.Vector4.op_Multiply
    // UnityEngine.Vector4.op_Multiply
    // UnityEngine.Vector4.op_Subtraction
    // UnityEngine.Vector4.op_UnaryNegation
    // UnityEngine.Vector4.positiveInfinity
    // UnityEngine.Vector4.sqrMagnitude
    // UnityEngine.Vector4.w
    // UnityEngine.Vector4.x
    // UnityEngine.Vector4.y
    // UnityEngine.Vector4.z
    // UnityEngine.Vector4.zero
    // UnityEngine.Video.VideoClip.audioTrackCount
    // UnityEngine.Video.VideoClip.frameCount
    // UnityEngine.Video.VideoClip.frameRate
    // UnityEngine.Video.VideoClip.height
    // UnityEngine.Video.VideoClip.hideFlags
    // UnityEngine.Video.VideoClip.length
    // UnityEngine.Video.VideoClip.name
    // UnityEngine.Video.VideoClip.op_Equality
    // UnityEngine.Video.VideoClip.op_Implicit
    // UnityEngine.Video.VideoClip.op_Inequality
    // UnityEngine.Video.VideoClip.originalPath
    // UnityEngine.Video.VideoClip.pixelAspectRatioDenominator
    // UnityEngine.Video.VideoClip.pixelAspectRatioNumerator
    // UnityEngine.Video.VideoClip.sRGB
    // UnityEngine.Video.VideoClip.width
    // UnityEngine.Video.VideoPlayer.aspectRatio
    // UnityEngine.Video.VideoPlayer.audioOutputMode
    // UnityEngine.Video.VideoPlayer.audioTrackCount
    // UnityEngine.Video.VideoPlayer.canSetDirectAudioVolume
    // UnityEngine.Video.VideoPlayer.canSetPlaybackSpeed
    // UnityEngine.Video.VideoPlayer.canSetSkipOnDrop
    // UnityEngine.Video.VideoPlayer.canSetTime
    // UnityEngine.Video.VideoPlayer.canSetTimeSource
    // UnityEngine.Video.VideoPlayer.canStep
    // UnityEngine.Video.VideoPlayer.clip
    // UnityEngine.Video.VideoPlayer.clockTime
    // UnityEngine.Video.VideoPlayer.controlledAudioTrackCount
    // UnityEngine.Video.VideoPlayer.controlledAudioTrackMaxCount
    // UnityEngine.Video.VideoPlayer.enabled
    // UnityEngine.Video.VideoPlayer.externalReferenceTime
    // UnityEngine.Video.VideoPlayer.frame
    // UnityEngine.Video.VideoPlayer.frameCount
    // UnityEngine.Video.VideoPlayer.frameRate
    // UnityEngine.Video.VideoPlayer.gameObject
    // UnityEngine.Video.VideoPlayer.height
    // UnityEngine.Video.VideoPlayer.hideFlags
    // UnityEngine.Video.VideoPlayer.isActiveAndEnabled
    // UnityEngine.Video.VideoPlayer.isLooping
    // UnityEngine.Video.VideoPlayer.isPaused
    // UnityEngine.Video.VideoPlayer.isPlaying
    // UnityEngine.Video.VideoPlayer.isPrepared
    // UnityEngine.Video.VideoPlayer.length
    // UnityEngine.Video.VideoPlayer.name
    // UnityEngine.Video.VideoPlayer.op_Equality
    // UnityEngine.Video.VideoPlayer.op_Implicit
    // UnityEngine.Video.VideoPlayer.op_Inequality
    // UnityEngine.Video.VideoPlayer.pixelAspectRatioDenominator
    // UnityEngine.Video.VideoPlayer.pixelAspectRatioNumerator
    // UnityEngine.Video.VideoPlayer.playbackSpeed
    // UnityEngine.Video.VideoPlayer.playOnAwake
    // UnityEngine.Video.VideoPlayer.renderMode
    // UnityEngine.Video.VideoPlayer.sendFrameReadyEvents
    // UnityEngine.Video.VideoPlayer.skipOnDrop
    // UnityEngine.Video.VideoPlayer.source
    // UnityEngine.Video.VideoPlayer.tag
    // UnityEngine.Video.VideoPlayer.targetCamera
    // UnityEngine.Video.VideoPlayer.targetCamera3DLayout
    // UnityEngine.Video.VideoPlayer.targetCameraAlpha
    // UnityEngine.Video.VideoPlayer.targetMaterialProperty
    // UnityEngine.Video.VideoPlayer.targetMaterialRenderer
    // UnityEngine.Video.VideoPlayer.targetTexture
    // UnityEngine.Video.VideoPlayer.texture
    // UnityEngine.Video.VideoPlayer.time
    // UnityEngine.Video.VideoPlayer.timeReference
    // UnityEngine.Video.VideoPlayer.timeSource
    // UnityEngine.Video.VideoPlayer.transform
    // UnityEngine.Video.VideoPlayer.url
    // UnityEngine.Video.VideoPlayer.waitForFirstFrame
    // UnityEngine.Video.VideoPlayer.width
    // UnityEngine.WebCamTexture.op_Equality
    // UnityEngine.WebCamTexture.op_Implicit
    // UnityEngine.WebCamTexture.op_Inequality
    // UnityEngine.WheelCollider.op_Equality
    // UnityEngine.WheelCollider.op_Implicit
    // UnityEngine.WheelCollider.op_Inequality
    // UnityEngine.WheelJoint2D.op_Equality
    // UnityEngine.WheelJoint2D.op_Implicit
    // UnityEngine.WheelJoint2D.op_Inequality
    // UnityEngine.WindZone.op_Equality
    // UnityEngine.WindZone.op_Implicit
    // UnityEngine.WindZone.op_Inequality
    [UnityEngine.Scripting.PreserveAttribute()]
    public class AotStubs
    {
        // UnityEngine.Playables.PlayableDirector.duration
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_duration()
        {
            global::UnityEngine.Playables.PlayableDirector target =
                default(global::UnityEngine.Playables.PlayableDirector);
            double accessor = target.duration;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector, double>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                        double>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Playables.PlayableDirector));
        }

        // UnityEngine.Playables.PlayableDirector.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Playables.PlayableDirector.extrapolationMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_extrapolationMode()
        {
            global::UnityEngine.Playables.PlayableDirector target =
                default(global::UnityEngine.Playables.PlayableDirector);
            global::UnityEngine.Playables.DirectorWrapMode accessor = target.extrapolationMode;
            target.extrapolationMode = default(global::UnityEngine.Playables.DirectorWrapMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                UnityEngine.Playables.DirectorWrapMode> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                    UnityEngine.Playables.DirectorWrapMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Playables.PlayableDirector));
            optimized.SetValue(default(global::UnityEngine.Playables.PlayableDirector),
                default(global::UnityEngine.Playables.DirectorWrapMode));
        }

        // UnityEngine.Playables.PlayableDirector.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Playables.PlayableDirector.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Playables.PlayableDirector.initialTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_initialTime()
        {
            global::UnityEngine.Playables.PlayableDirector target =
                default(global::UnityEngine.Playables.PlayableDirector);
            double accessor = target.initialTime;
            target.initialTime = default(double);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector, double>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                        double>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Playables.PlayableDirector));
            optimized.SetValue(default(global::UnityEngine.Playables.PlayableDirector), default(double));
        }

        // UnityEngine.Playables.PlayableDirector.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Playables.PlayableDirector.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Playables.PlayableDirector.playableAsset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_playableAsset()
        {
            global::UnityEngine.Playables.PlayableDirector target =
                default(global::UnityEngine.Playables.PlayableDirector);
            global::UnityEngine.Playables.PlayableAsset accessor = target.playableAsset;
            target.playableAsset = default(global::UnityEngine.Playables.PlayableAsset);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                UnityEngine.Playables.PlayableAsset> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                    UnityEngine.Playables.PlayableAsset>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Playables.PlayableDirector));
            optimized.SetValue(default(global::UnityEngine.Playables.PlayableDirector),
                default(global::UnityEngine.Playables.PlayableAsset));
        }

        // UnityEngine.Playables.PlayableDirector.playableGraph
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_playableGraph()
        {
            global::UnityEngine.Playables.PlayableDirector target =
                default(global::UnityEngine.Playables.PlayableDirector);
            global::UnityEngine.Playables.PlayableGraph accessor = target.playableGraph;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                UnityEngine.Playables.PlayableGraph> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                    UnityEngine.Playables.PlayableGraph>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Playables.PlayableDirector));
        }

        // UnityEngine.Playables.PlayableDirector.playOnAwake
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_playOnAwake()
        {
            global::UnityEngine.Playables.PlayableDirector target =
                default(global::UnityEngine.Playables.PlayableDirector);
            bool accessor = target.playOnAwake;
            target.playOnAwake = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector, bool>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                        bool>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Playables.PlayableDirector));
            optimized.SetValue(default(global::UnityEngine.Playables.PlayableDirector), default(bool));
        }

        // UnityEngine.Playables.PlayableDirector.state
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_state()
        {
            global::UnityEngine.Playables.PlayableDirector target =
                default(global::UnityEngine.Playables.PlayableDirector);
            global::UnityEngine.Playables.PlayState accessor = target.state;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                UnityEngine.Playables.PlayState> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                    UnityEngine.Playables.PlayState>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Playables.PlayableDirector));
        }

        // UnityEngine.Playables.PlayableDirector.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Playables.PlayableDirector.time
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_time()
        {
            global::UnityEngine.Playables.PlayableDirector target =
                default(global::UnityEngine.Playables.PlayableDirector);
            double accessor = target.time;
            target.time = default(double);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector, double>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                        double>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Playables.PlayableDirector));
            optimized.SetValue(default(global::UnityEngine.Playables.PlayableDirector), default(double));
        }

        // UnityEngine.Playables.PlayableDirector.timeUpdateMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_timeUpdateMode()
        {
            global::UnityEngine.Playables.PlayableDirector target =
                default(global::UnityEngine.Playables.PlayableDirector);
            global::UnityEngine.Playables.DirectorUpdateMode accessor = target.timeUpdateMode;
            target.timeUpdateMode = default(global::UnityEngine.Playables.DirectorUpdateMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                UnityEngine.Playables.DirectorUpdateMode> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Playables.PlayableDirector,
                    UnityEngine.Playables.DirectorUpdateMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Playables.PlayableDirector));
            optimized.SetValue(default(global::UnityEngine.Playables.PlayableDirector),
                default(global::UnityEngine.Playables.DirectorUpdateMode));
        }

        // UnityEngine.Playables.PlayableDirector.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.CharacterController.attachedArticulationBody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_attachedArticulationBody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.ArticulationBody accessor = target.attachedArticulationBody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.ArticulationBody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.ArticulationBody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.CharacterController.attachedRigidbody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_attachedRigidbody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Rigidbody accessor = target.attachedRigidbody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Rigidbody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.Rigidbody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.CharacterController.bounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_bounds()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Bounds accessor = target.bounds;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.CharacterController.center
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_center()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            global::UnityEngine.Vector3 accessor = target.center;
            target.center = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
            optimized.SetValue(default(global::UnityEngine.CharacterController), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.CharacterController.collisionFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_collisionFlags()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            global::UnityEngine.CollisionFlags accessor = target.collisionFlags;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController,
                    UnityEngine.CollisionFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController,
                        UnityEngine.CollisionFlags>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
        }

        // UnityEngine.CharacterController.contactOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_contactOffset()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            float accessor = target.contactOffset;
            target.contactOffset = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(float));
        }

        // UnityEngine.CharacterController.detectCollisions
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_detectCollisions()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            bool accessor = target.detectCollisions;
            target.detectCollisions = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
            optimized.SetValue(default(global::UnityEngine.CharacterController), default(bool));
        }

        // UnityEngine.CharacterController.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_enabled()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.CharacterController.enableOverlapRecovery
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_enableOverlapRecovery()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            bool accessor = target.enableOverlapRecovery;
            target.enableOverlapRecovery = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
            optimized.SetValue(default(global::UnityEngine.CharacterController), default(bool));
        }

        // UnityEngine.CharacterController.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.CharacterController.height
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_height()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            float accessor = target.height;
            target.height = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
            optimized.SetValue(default(global::UnityEngine.CharacterController), default(float));
        }

        // UnityEngine.CharacterController.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.CharacterController.isGrounded
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_isGrounded()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            bool accessor = target.isGrounded;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
        }

        // UnityEngine.CharacterController.isTrigger
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_isTrigger()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.isTrigger;
            target.isTrigger = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.CharacterController.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_material()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.material;
            target.material = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.CharacterController.minMoveDistance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_minMoveDistance()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            float accessor = target.minMoveDistance;
            target.minMoveDistance = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
            optimized.SetValue(default(global::UnityEngine.CharacterController), default(float));
        }

        // UnityEngine.CharacterController.Move
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_Move()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            target.Move(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.CharacterController, UnityEngine.Vector3,
                UnityEngine.CollisionFlags> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.CharacterController,
                    UnityEngine.Vector3,
                    UnityEngine.CollisionFlags>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.CharacterController), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CharacterController.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.CharacterController.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CharacterController.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CharacterController.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CharacterController.radius
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_radius()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            float accessor = target.radius;
            target.radius = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
            optimized.SetValue(default(global::UnityEngine.CharacterController), default(float));
        }

        // UnityEngine.CharacterController.sharedMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_sharedMaterial()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.sharedMaterial;
            target.sharedMaterial = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.CharacterController.skinWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_skinWidth()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            float accessor = target.skinWidth;
            target.skinWidth = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
            optimized.SetValue(default(global::UnityEngine.CharacterController), default(float));
        }

        // UnityEngine.CharacterController.slopeLimit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_slopeLimit()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            float accessor = target.slopeLimit;
            target.slopeLimit = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
            optimized.SetValue(default(global::UnityEngine.CharacterController), default(float));
        }

        // UnityEngine.CharacterController.stepOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_stepOffset()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            float accessor = target.stepOffset;
            target.stepOffset = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
            optimized.SetValue(default(global::UnityEngine.CharacterController), default(float));
        }

        // UnityEngine.CharacterController.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.CharacterController.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.CharacterController.velocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterController_velocity()
        {
            global::UnityEngine.CharacterController target = default(global::UnityEngine.CharacterController);
            global::UnityEngine.Vector3 accessor = target.velocity;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CharacterController,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CharacterController));
        }

        // UnityEngine.Collider.attachedArticulationBody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_attachedArticulationBody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.ArticulationBody accessor = target.attachedArticulationBody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.ArticulationBody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.ArticulationBody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.Collider.attachedRigidbody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_attachedRigidbody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Rigidbody accessor = target.attachedRigidbody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Rigidbody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.Rigidbody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.Collider.bounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_bounds()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Bounds accessor = target.bounds;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.Collider.contactOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_contactOffset()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            float accessor = target.contactOffset;
            target.contactOffset = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(float));
        }

        // UnityEngine.Collider.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_enabled()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.Collider.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Collider.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Collider.isTrigger
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_isTrigger()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.isTrigger;
            target.isTrigger = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.Collider.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_material()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.material;
            target.material = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.Collider.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }


// UnityEngine.Collider.sharedMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_sharedMaterial()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.sharedMaterial;
            target.sharedMaterial = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.Collider.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Collider.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.EventSystems.EventSystem.alreadySelecting
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_alreadySelecting()
        {
            global::UnityEngine.EventSystems.EventSystem target = default(global::UnityEngine.EventSystems.EventSystem);
            bool accessor = target.alreadySelecting;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem, bool>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                        bool>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.EventSystem));
        }

        // UnityEngine.EventSystems.EventSystem.current
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_current()
        {
            global::UnityEngine.EventSystems.EventSystem
                accessor = global::UnityEngine.EventSystems.EventSystem.current;
            global::UnityEngine.EventSystems.EventSystem.current =
                default(global::UnityEngine.EventSystems.EventSystem);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.EventSystems.EventSystem> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.EventSystems.EventSystem>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.EventSystems.EventSystem));
        }

        // UnityEngine.EventSystems.EventSystem.currentInputModule
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_currentInputModule()
        {
            global::UnityEngine.EventSystems.EventSystem target = default(global::UnityEngine.EventSystems.EventSystem);
            global::UnityEngine.EventSystems.BaseInputModule accessor = target.currentInputModule;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                UnityEngine.EventSystems.BaseInputModule> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                    UnityEngine.EventSystems.BaseInputModule>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.EventSystem));
        }

        // UnityEngine.EventSystems.EventSystem.currentSelectedGameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_currentSelectedGameObject()
        {
            global::UnityEngine.EventSystems.EventSystem target = default(global::UnityEngine.EventSystems.EventSystem);
            global::UnityEngine.GameObject accessor = target.currentSelectedGameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                    UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                        UnityEngine.GameObject>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.EventSystem));
        }

        // UnityEngine.EventSystems.EventSystem.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.EventSystems.EventSystem.firstSelectedGameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_firstSelectedGameObject()
        {
            global::UnityEngine.EventSystems.EventSystem target = default(global::UnityEngine.EventSystems.EventSystem);
            global::UnityEngine.GameObject accessor = target.firstSelectedGameObject;
            target.firstSelectedGameObject = default(global::UnityEngine.GameObject);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                    UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                        UnityEngine.GameObject>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.EventSystem));
            optimized.SetValue(default(global::UnityEngine.EventSystems.EventSystem),
                default(global::UnityEngine.GameObject));
        }

        // UnityEngine.EventSystems.EventSystem.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.EventSystems.EventSystem.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.EventSystems.EventSystem.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.EventSystems.EventSystem.isFocused
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_isFocused()
        {
            global::UnityEngine.EventSystems.EventSystem target = default(global::UnityEngine.EventSystems.EventSystem);
            bool accessor = target.isFocused;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem, bool>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                        bool>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.EventSystem));
        }

        // UnityEngine.EventSystems.EventSystem.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

// UnityEngine.EventSystems.EventSystem.pixelDragThreshold
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_pixelDragThreshold()
        {
            global::UnityEngine.EventSystems.EventSystem target = default(global::UnityEngine.EventSystems.EventSystem);
            int accessor = target.pixelDragThreshold;
            target.pixelDragThreshold = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem, int>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                        int>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.EventSystem));
            optimized.SetValue(default(global::UnityEngine.EventSystems.EventSystem), default(int));
        }

        // UnityEngine.EventSystems.EventSystem.sendNavigationEvents
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_sendNavigationEvents()
        {
            global::UnityEngine.EventSystems.EventSystem target = default(global::UnityEngine.EventSystems.EventSystem);
            bool accessor = target.sendNavigationEvents;
            target.sendNavigationEvents = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem, bool>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventSystem,
                        bool>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.EventSystem));
            optimized.SetValue(default(global::UnityEngine.EventSystems.EventSystem), default(bool));
        }

        // UnityEngine.EventSystems.EventSystem.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.EventSystems.EventSystem.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.EventSystems.EventSystem.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.EventSystems.EventTrigger.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.EventSystems.EventTrigger.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.EventSystems.EventTrigger.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.EventSystems.EventTrigger.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.EventSystems.EventTrigger.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

// UnityEngine.EventSystems.EventTrigger.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.EventSystems.EventTrigger.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.EventSystems.EventTrigger.triggers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_triggers()
        {
            global::UnityEngine.EventSystems.EventTrigger target =
                default(global::UnityEngine.EventSystems.EventTrigger);
            global::System.Collections.Generic.List<UnityEngine.EventSystems.EventTrigger.Entry> accessor =
                target.triggers;
            target.triggers =
                default(global::System.Collections.Generic.List<UnityEngine.EventSystems.EventTrigger.Entry>);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventTrigger,
                System.Collections.Generic.List<UnityEngine.EventSystems.EventTrigger.Entry>> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.EventTrigger,
                    System.Collections.Generic.List<UnityEngine.EventSystems.EventTrigger.Entry>>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.EventTrigger));
            optimized.SetValue(default(global::UnityEngine.EventSystems.EventTrigger),
                default(global::System.Collections.Generic.List<UnityEngine.EventSystems.EventTrigger.Entry>));
        }

        // UnityEngine.EventSystems.EventTrigger.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.depth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_depth()
        {
            global::UnityEngine.EventSystems.PhysicsRaycaster target =
                default(global::UnityEngine.EventSystems.PhysicsRaycaster);
            int accessor = target.depth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster, int>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster
                        , int>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.PhysicsRaycaster));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.eventCamera
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_eventCamera()
        {
            global::UnityEngine.EventSystems.PhysicsRaycaster target =
                default(global::UnityEngine.EventSystems.PhysicsRaycaster);
            global::UnityEngine.Camera accessor = target.eventCamera;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster,
                    UnityEngine.Camera>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster
                        ,
                        UnityEngine.Camera>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.PhysicsRaycaster));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.eventMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_eventMask()
        {
            global::UnityEngine.EventSystems.PhysicsRaycaster target =
                default(global::UnityEngine.EventSystems.PhysicsRaycaster);
            global::UnityEngine.LayerMask accessor = target.eventMask;
            target.eventMask = default(global::UnityEngine.LayerMask);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster,
                    UnityEngine.LayerMask>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster
                        ,
                        UnityEngine.LayerMask>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.PhysicsRaycaster));
            optimized.SetValue(default(global::UnityEngine.EventSystems.PhysicsRaycaster),
                default(global::UnityEngine.LayerMask));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.finalEventMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_finalEventMask()
        {
            global::UnityEngine.EventSystems.PhysicsRaycaster target =
                default(global::UnityEngine.EventSystems.PhysicsRaycaster);
            int accessor = target.finalEventMask;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster, int>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster
                        , int>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.PhysicsRaycaster));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.maxRayIntersections
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_maxRayIntersections()
        {
            global::UnityEngine.EventSystems.PhysicsRaycaster target =
                default(global::UnityEngine.EventSystems.PhysicsRaycaster);
            int accessor = target.maxRayIntersections;
            target.maxRayIntersections = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster, int>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.PhysicsRaycaster
                        , int>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.PhysicsRaycaster));
            optimized.SetValue(default(global::UnityEngine.EventSystems.PhysicsRaycaster), default(int));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

// UnityEngine.EventSystems.PhysicsRaycaster.renderOrderPriority
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_renderOrderPriority()
        {
            global::UnityEngine.EventSystems.BaseRaycaster target =
                default(global::UnityEngine.EventSystems.BaseRaycaster);
            int accessor = target.renderOrderPriority;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.BaseRaycaster, int>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.BaseRaycaster,
                        int>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.BaseRaycaster));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.rootRaycaster
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_rootRaycaster()
        {
            global::UnityEngine.EventSystems.BaseRaycaster target =
                default(global::UnityEngine.EventSystems.BaseRaycaster);
            global::UnityEngine.EventSystems.BaseRaycaster accessor = target.rootRaycaster;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.BaseRaycaster,
                UnityEngine.EventSystems.BaseRaycaster> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.BaseRaycaster,
                    UnityEngine.EventSystems.BaseRaycaster>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.BaseRaycaster));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.sortOrderPriority
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_sortOrderPriority()
        {
            global::UnityEngine.EventSystems.BaseRaycaster target =
                default(global::UnityEngine.EventSystems.BaseRaycaster);
            int accessor = target.sortOrderPriority;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.BaseRaycaster, int>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.EventSystems.BaseRaycaster,
                        int>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.EventSystems.BaseRaycaster));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.AvatarMask.transformCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AvatarMask_transformCount()
        {
            global::UnityEngine.AvatarMask target = default(global::UnityEngine.AvatarMask);
            int accessor = target.transformCount;
            target.transformCount = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AvatarMask, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AvatarMask, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AvatarMask));
            optimized.SetValue(default(global::UnityEngine.AvatarMask), default(int));
        }


        // UnityEngine.Avatar.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Avatar_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Avatar.humanDescription
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Avatar_humanDescription()
        {
            global::UnityEngine.Avatar target = default(global::UnityEngine.Avatar);
            global::UnityEngine.HumanDescription accessor = target.humanDescription;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Avatar, UnityEngine.HumanDescription>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Avatar,
                        UnityEngine.HumanDescription>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Avatar));
        }

        // UnityEngine.Avatar.isHuman
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Avatar_isHuman()
        {
            global::UnityEngine.Avatar target = default(global::UnityEngine.Avatar);
            bool accessor = target.isHuman;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Avatar, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Avatar, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Avatar));
        }

        // UnityEngine.Avatar.isValid
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Avatar_isValid()
        {
            global::UnityEngine.Avatar target = default(global::UnityEngine.Avatar);
            bool accessor = target.isValid;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Avatar, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Avatar, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Avatar));
        }

        // UnityEngine.Avatar.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Avatar_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.AnimatorOverrideController.overridesCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimatorOverrideController_overridesCount()
        {
            global::UnityEngine.AnimatorOverrideController target =
                default(global::UnityEngine.AnimatorOverrideController);
            int accessor = target.overridesCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AnimatorOverrideController, int>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AnimatorOverrideController,
                        int>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AnimatorOverrideController));
        }

        // UnityEngine.AnimatorOverrideController.runtimeAnimatorController
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimatorOverrideController_runtimeAnimatorController()
        {
            global::UnityEngine.AnimatorOverrideController target =
                default(global::UnityEngine.AnimatorOverrideController);
            global::UnityEngine.RuntimeAnimatorController accessor = target.runtimeAnimatorController;
            target.runtimeAnimatorController = default(global::UnityEngine.RuntimeAnimatorController);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AnimatorOverrideController,
                UnityEngine.RuntimeAnimatorController> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AnimatorOverrideController,
                    UnityEngine.RuntimeAnimatorController>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AnimatorOverrideController));
            optimized.SetValue(default(global::UnityEngine.AnimatorOverrideController),
                default(global::UnityEngine.RuntimeAnimatorController));
        }

        // UnityEngine.AnimatorOverrideController.animationClips
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimatorOverrideController_animationClips()
        {
            global::UnityEngine.RuntimeAnimatorController target =
                default(global::UnityEngine.RuntimeAnimatorController);
            UnityEngine.AnimationClip[] accessor = target.animationClips;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.RuntimeAnimatorController,
                    UnityEngine.AnimationClip[]>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.RuntimeAnimatorController,
                        UnityEngine.AnimationClip[]>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RuntimeAnimatorController));
        }

        // UnityEngine.AnimatorOverrideController.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimatorOverrideController_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.AnimatorOverrideController.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimatorOverrideController_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Animations.LookAtConstraint.roll
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_roll()
        {
            global::UnityEngine.Animations.LookAtConstraint target =
                default(global::UnityEngine.Animations.LookAtConstraint);
            float accessor = target.roll;
            target.roll = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint, float>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                        float>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.LookAtConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.LookAtConstraint), default(float));
        }

        // UnityEngine.Animations.LookAtConstraint.rotationAtRest
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_rotationAtRest()
        {
            global::UnityEngine.Animations.LookAtConstraint target =
                default(global::UnityEngine.Animations.LookAtConstraint);
            global::UnityEngine.Vector3 accessor = target.rotationAtRest;
            target.rotationAtRest = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                        UnityEngine.Vector3>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.LookAtConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.LookAtConstraint),
                default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Animations.LookAtConstraint.rotationOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_rotationOffset()
        {
            global::UnityEngine.Animations.LookAtConstraint target =
                default(global::UnityEngine.Animations.LookAtConstraint);
            global::UnityEngine.Vector3 accessor = target.rotationOffset;
            target.rotationOffset = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                        UnityEngine.Vector3>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.LookAtConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.LookAtConstraint),
                default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Animations.LookAtConstraint.sourceCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_sourceCount()
        {
            global::UnityEngine.Animations.LookAtConstraint target =
                default(global::UnityEngine.Animations.LookAtConstraint);
            int accessor = target.sourceCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint, int>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                        int>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.LookAtConstraint));
        }

        // UnityEngine.Animations.LookAtConstraint.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Animations.LookAtConstraint.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Animations.LookAtConstraint.useUpObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_useUpObject()
        {
            global::UnityEngine.Animations.LookAtConstraint target =
                default(global::UnityEngine.Animations.LookAtConstraint);
            bool accessor = target.useUpObject;
            target.useUpObject = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint, bool>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                        bool>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.LookAtConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.LookAtConstraint), default(bool));
        }

        // UnityEngine.Animations.LookAtConstraint.weight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_weight()
        {
            global::UnityEngine.Animations.LookAtConstraint target =
                default(global::UnityEngine.Animations.LookAtConstraint);
            float accessor = target.weight;
            target.weight = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint, float>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                        float>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.LookAtConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.LookAtConstraint), default(float));
        }

        // UnityEngine.Animations.LookAtConstraint.worldUpObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_worldUpObject()
        {
            global::UnityEngine.Animations.LookAtConstraint target =
                default(global::UnityEngine.Animations.LookAtConstraint);
            global::UnityEngine.Transform accessor = target.worldUpObject;
            target.worldUpObject = default(global::UnityEngine.Transform);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                    UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                        UnityEngine.Transform>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.LookAtConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.LookAtConstraint),
                default(global::UnityEngine.Transform));
        }

        // UnityEngine.Animations.ParentConstraint.constraintActive
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_constraintActive()
        {
            global::UnityEngine.Animations.ParentConstraint target =
                default(global::UnityEngine.Animations.ParentConstraint);
            bool accessor = target.constraintActive;
            target.constraintActive = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.ParentConstraint, bool>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.ParentConstraint,
                        bool>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.ParentConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.ParentConstraint), default(bool));
        }

        // UnityEngine.Animations.ParentConstraint.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Animations.ParentConstraint.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Animations.ParentConstraint.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Animations.ParentConstraint.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Animations.ParentConstraint.locked
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_locked()
        {
            global::UnityEngine.Animations.ParentConstraint target =
                default(global::UnityEngine.Animations.ParentConstraint);
            bool accessor = target.locked;
            target.locked = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.ParentConstraint, bool>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.ParentConstraint,
                        bool>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.ParentConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.ParentConstraint), default(bool));
        }

        // UnityEngine.Animations.ParentConstraint.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Animations.AimConstraint.rotationAtRest
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_rotationAtRest()
        {
            global::UnityEngine.Animations.AimConstraint target = default(global::UnityEngine.Animations.AimConstraint);
            global::UnityEngine.Vector3 accessor = target.rotationAtRest;
            target.rotationAtRest = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                        UnityEngine.Vector3>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.AimConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.AimConstraint),
                default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Animations.AimConstraint.rotationAxis
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_rotationAxis()
        {
            global::UnityEngine.Animations.AimConstraint target = default(global::UnityEngine.Animations.AimConstraint);
            global::UnityEngine.Animations.Axis accessor = target.rotationAxis;
            target.rotationAxis = default(global::UnityEngine.Animations.Axis);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                    UnityEngine.Animations.Axis>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                        UnityEngine.Animations.Axis>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.AimConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.AimConstraint),
                default(global::UnityEngine.Animations.Axis));
        }

        // UnityEngine.Animations.AimConstraint.rotationOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_rotationOffset()
        {
            global::UnityEngine.Animations.AimConstraint target = default(global::UnityEngine.Animations.AimConstraint);
            global::UnityEngine.Vector3 accessor = target.rotationOffset;
            target.rotationOffset = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                        UnityEngine.Vector3>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.AimConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.AimConstraint),
                default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Animations.AimConstraint.sourceCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_sourceCount()
        {
            global::UnityEngine.Animations.AimConstraint target = default(global::UnityEngine.Animations.AimConstraint);
            int accessor = target.sourceCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint, int>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                        int>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.AimConstraint));
        }

        // UnityEngine.Animations.AimConstraint.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Animations.AimConstraint.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Animations.AimConstraint.upVector
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_upVector()
        {
            global::UnityEngine.Animations.AimConstraint target = default(global::UnityEngine.Animations.AimConstraint);
            global::UnityEngine.Vector3 accessor = target.upVector;
            target.upVector = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                        UnityEngine.Vector3>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.AimConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.AimConstraint),
                default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Animations.AimConstraint.weight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_weight()
        {
            global::UnityEngine.Animations.AimConstraint target = default(global::UnityEngine.Animations.AimConstraint);
            float accessor = target.weight;
            target.weight = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint, float>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                        float>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.AimConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.AimConstraint), default(float));
        }

        // UnityEngine.Animations.AimConstraint.worldUpObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_worldUpObject()
        {
            global::UnityEngine.Animations.AimConstraint target = default(global::UnityEngine.Animations.AimConstraint);
            global::UnityEngine.Transform accessor = target.worldUpObject;
            target.worldUpObject = default(global::UnityEngine.Transform);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                    UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                        UnityEngine.Transform>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.AimConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.AimConstraint),
                default(global::UnityEngine.Transform));
        }

        // UnityEngine.Animations.AimConstraint.worldUpType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_worldUpType()
        {
            global::UnityEngine.Animations.AimConstraint target = default(global::UnityEngine.Animations.AimConstraint);
            global::UnityEngine.Animations.AimConstraint.WorldUpType accessor = target.worldUpType;
            target.worldUpType = default(global::UnityEngine.Animations.AimConstraint.WorldUpType);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                UnityEngine.Animations.AimConstraint.WorldUpType> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                    UnityEngine.Animations.AimConstraint.WorldUpType>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.AimConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.AimConstraint),
                default(global::UnityEngine.Animations.AimConstraint.WorldUpType));
        }

        // UnityEngine.Animations.AimConstraint.worldUpVector
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_worldUpVector()
        {
            global::UnityEngine.Animations.AimConstraint target = default(global::UnityEngine.Animations.AimConstraint);
            global::UnityEngine.Vector3 accessor = target.worldUpVector;
            target.worldUpVector = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.AimConstraint,
                        UnityEngine.Vector3>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.AimConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.AimConstraint),
                default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Animations.LookAtConstraint.constraintActive
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_constraintActive()
        {
            global::UnityEngine.Animations.LookAtConstraint target =
                default(global::UnityEngine.Animations.LookAtConstraint);
            bool accessor = target.constraintActive;
            target.constraintActive = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint, bool>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                        bool>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.LookAtConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.LookAtConstraint), default(bool));
        }

        // UnityEngine.Animations.LookAtConstraint.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Animations.LookAtConstraint.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Animations.LookAtConstraint.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Animations.LookAtConstraint.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Animations.LookAtConstraint.locked
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_locked()
        {
            global::UnityEngine.Animations.LookAtConstraint target =
                default(global::UnityEngine.Animations.LookAtConstraint);
            bool accessor = target.locked;
            target.locked = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint, bool>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animations.LookAtConstraint,
                        bool>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animations.LookAtConstraint));
            optimized.SetValue(default(global::UnityEngine.Animations.LookAtConstraint), default(bool));
        }

        // UnityEngine.Animations.LookAtConstraint.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }


        // UnityEngine.AI.NavMeshObstacle.carveOnlyStationary
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_carveOnlyStationary()
        {
            global::UnityEngine.AI.NavMeshObstacle target = default(global::UnityEngine.AI.NavMeshObstacle);
            bool accessor = target.carveOnlyStationary;
            target.carveOnlyStationary = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshObstacle));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshObstacle), default(bool));
        }

        // UnityEngine.AI.NavMeshObstacle.carving
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_carving()
        {
            global::UnityEngine.AI.NavMeshObstacle target = default(global::UnityEngine.AI.NavMeshObstacle);
            bool accessor = target.carving;
            target.carving = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshObstacle));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshObstacle), default(bool));
        }

        // UnityEngine.AI.NavMeshObstacle.carvingMoveThreshold
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_carvingMoveThreshold()
        {
            global::UnityEngine.AI.NavMeshObstacle target = default(global::UnityEngine.AI.NavMeshObstacle);
            float accessor = target.carvingMoveThreshold;
            target.carvingMoveThreshold = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshObstacle));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshObstacle), default(float));
        }

        // UnityEngine.AI.NavMeshObstacle.carvingTimeToStationary
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_carvingTimeToStationary()
        {
            global::UnityEngine.AI.NavMeshObstacle target = default(global::UnityEngine.AI.NavMeshObstacle);
            float accessor = target.carvingTimeToStationary;
            target.carvingTimeToStationary = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshObstacle));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshObstacle), default(float));
        }

        // UnityEngine.AI.NavMeshObstacle.center
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_center()
        {
            global::UnityEngine.AI.NavMeshObstacle target = default(global::UnityEngine.AI.NavMeshObstacle);
            global::UnityEngine.Vector3 accessor = target.center;
            target.center = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshObstacle));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshObstacle), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.AI.NavMeshObstacle.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.AI.NavMeshObstacle.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.AI.NavMeshObstacle.height
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_height()
        {
            global::UnityEngine.AI.NavMeshObstacle target = default(global::UnityEngine.AI.NavMeshObstacle);
            float accessor = target.height;
            target.height = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshObstacle, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshObstacle));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshObstacle), default(float));
        }

        // UnityEngine.AI.NavMeshObstacle.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.AI.NavMeshObstacle.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.AI.NavMeshObstacle.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.GameObject.Instantiate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_Instantiate_0()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object.Instantiate(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.Instantiate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_Instantiate_1()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Transform arg1 = default(global::UnityEngine.Transform);
            bool arg2 = default(bool);
            global::UnityEngine.Object.Instantiate(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Transform, bool,
                UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Transform, bool,
                    UnityEngine.Object>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.Instantiate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_Instantiate_2()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg2 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Object.Instantiate(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3,
                UnityEngine.Quaternion, UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3,
                    UnityEngine.Quaternion, UnityEngine.Object>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.Instantiate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_Instantiate_3()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg2 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Transform arg3 = default(global::UnityEngine.Transform);
            global::UnityEngine.Object.Instantiate(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3,
                UnityEngine.Quaternion, UnityEngine.Transform, UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3,
                    UnityEngine.Quaternion, UnityEngine.Transform, UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Motion.apparentSpeed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_apparentSpeed()
        {
            global::UnityEngine.Motion target = default(global::UnityEngine.Motion);
            float accessor = target.apparentSpeed;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Motion));
        }

        // UnityEngine.Motion.averageAngularSpeed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_averageAngularSpeed()
        {
            global::UnityEngine.Motion target = default(global::UnityEngine.Motion);
            float accessor = target.averageAngularSpeed;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Motion));
        }

        // UnityEngine.Motion.averageDuration
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_averageDuration()
        {
            global::UnityEngine.Motion target = default(global::UnityEngine.Motion);
            float accessor = target.averageDuration;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Motion));
        }

        // UnityEngine.Motion.averageSpeed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_averageSpeed()
        {
            global::UnityEngine.Motion target = default(global::UnityEngine.Motion);
            global::UnityEngine.Vector3 accessor = target.averageSpeed;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Motion));
        }

        // UnityEngine.Motion.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Motion.isHumanMotion
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_isHumanMotion()
        {
            global::UnityEngine.Motion target = default(global::UnityEngine.Motion);
            bool accessor = target.isHumanMotion;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Motion));
        }

        // UnityEngine.Motion.isLooping
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_isLooping()
        {
            global::UnityEngine.Motion target = default(global::UnityEngine.Motion);
            bool accessor = target.isLooping;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Motion));
        }

        // UnityEngine.Motion.legacy
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_legacy()
        {
            global::UnityEngine.Motion target = default(global::UnityEngine.Motion);
            bool accessor = target.legacy;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Motion, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Motion));
        }

        // UnityEngine.Motion.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.PhysicMaterial.bounceCombine
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PhysicMaterial_bounceCombine()
        {
            global::UnityEngine.PhysicMaterial target = default(global::UnityEngine.PhysicMaterial);
            global::UnityEngine.PhysicMaterialCombine accessor = target.bounceCombine;
            target.bounceCombine = default(global::UnityEngine.PhysicMaterialCombine);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.PhysicMaterial,
                    UnityEngine.PhysicMaterialCombine>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.PhysicMaterial,
                        UnityEngine.PhysicMaterialCombine>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.PhysicMaterial));
            optimized.SetValue(default(global::UnityEngine.PhysicMaterial),
                default(global::UnityEngine.PhysicMaterialCombine));
        }

        // UnityEngine.PhysicMaterial.bounciness
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PhysicMaterial_bounciness()
        {
            global::UnityEngine.PhysicMaterial target = default(global::UnityEngine.PhysicMaterial);
            float accessor = target.bounciness;
            target.bounciness = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.PhysicMaterial, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.PhysicMaterial, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.PhysicMaterial));
            optimized.SetValue(default(global::UnityEngine.PhysicMaterial), default(float));
        }

        // UnityEngine.PhysicMaterial.dynamicFriction
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PhysicMaterial_dynamicFriction()
        {
            global::UnityEngine.PhysicMaterial target = default(global::UnityEngine.PhysicMaterial);
            float accessor = target.dynamicFriction;
            target.dynamicFriction = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.PhysicMaterial, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.PhysicMaterial, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.PhysicMaterial));
            optimized.SetValue(default(global::UnityEngine.PhysicMaterial), default(float));
        }

        // UnityEngine.PhysicMaterial.frictionCombine
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PhysicMaterial_frictionCombine()
        {
            global::UnityEngine.PhysicMaterial target = default(global::UnityEngine.PhysicMaterial);
            global::UnityEngine.PhysicMaterialCombine accessor = target.frictionCombine;
            target.frictionCombine = default(global::UnityEngine.PhysicMaterialCombine);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.PhysicMaterial,
                    UnityEngine.PhysicMaterialCombine>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.PhysicMaterial,
                        UnityEngine.PhysicMaterialCombine>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.PhysicMaterial));
            optimized.SetValue(default(global::UnityEngine.PhysicMaterial),
                default(global::UnityEngine.PhysicMaterialCombine));
        }

        // UnityEngine.PhysicMaterial.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PhysicMaterial_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.PhysicMaterial.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PhysicMaterial_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }


        // UnityEngine.Rendering.SortingGroup.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Rendering.SortingGroup.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Rendering.SortingGroup.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Rendering.SortingGroup.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Rendering.SortingGroup.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.ToggleGroup.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.ToggleGroup.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.ToggleGroup.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

// UnityEngine.Rendering.SortingGroup.sortingLayerID
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_sortingLayerID()
        {
            global::UnityEngine.Rendering.SortingGroup target = default(global::UnityEngine.Rendering.SortingGroup);
            int accessor = target.sortingLayerID;
            target.sortingLayerID = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rendering.SortingGroup, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rendering.SortingGroup, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rendering.SortingGroup));
            optimized.SetValue(default(global::UnityEngine.Rendering.SortingGroup), default(int));
        }

        // UnityEngine.Rendering.SortingGroup.sortingLayerName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_sortingLayerName()
        {
            global::UnityEngine.Rendering.SortingGroup target = default(global::UnityEngine.Rendering.SortingGroup);
            string accessor = target.sortingLayerName;
            target.sortingLayerName = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rendering.SortingGroup, string>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rendering.SortingGroup,
                        string>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rendering.SortingGroup));
            optimized.SetValue(default(global::UnityEngine.Rendering.SortingGroup), default(string));
        }

        // UnityEngine.Rendering.SortingGroup.sortingOrder
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_sortingOrder()
        {
            global::UnityEngine.Rendering.SortingGroup target = default(global::UnityEngine.Rendering.SortingGroup);
            int accessor = target.sortingOrder;
            target.sortingOrder = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rendering.SortingGroup, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rendering.SortingGroup, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rendering.SortingGroup));
            optimized.SetValue(default(global::UnityEngine.Rendering.SortingGroup), default(int));
        }

        // UnityEngine.Rendering.SortingGroup.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Rendering.SortingGroup.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AlgorithmSetterNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData.AlgorithmState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AlgorithmSetterNotificationData_AlgorithmState()
        {
            global::com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData);
            bool accessor = target.AlgorithmState;
            target.AlgorithmState = default(bool);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData,
                bool> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData, bool>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(
                default(global::com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData),
                default(bool));
        }

        // com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AlgorithmSetterNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AlgorithmSetterNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.AlgorithmSetterNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void
            com_Phantoms_ActionNotification_Runtime_AlgorithmSetterNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.ControllerTargetNode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_ControllerTargetNode()
        {
            global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData);
            global::UnityEngine.GameObject accessor = target.AnchorPrefab;
            target.AnchorPrefab = default(global::UnityEngine.GameObject);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                UnityEngine.GameObject> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                    UnityEngine.GameObject>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData),
                default(global::UnityEngine.GameObject));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.Offset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_Offset()
        {
            global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData);
            global::UnityEngine.Vector3 accessor = target.Offset;
            target.Offset = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                    UnityEngine.Vector3>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData),
                default(global::UnityEngine.Vector3));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.Position
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_Position()
        {
            global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData);
            global::UnityEngine.Vector3 accessor = target.Position;
            target.Position = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                    UnityEngine.Vector3>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData),
                default(global::UnityEngine.Vector3));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.Rotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_Rotation()
        {
            global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData);
            global::UnityEngine.Quaternion accessor = target.Rotation;
            target.Rotation = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                    UnityEngine.Quaternion>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData),
                default(global::UnityEngine.Quaternion));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.StickType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_StickType()
        {
            global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData);
            global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.StickTypeEnum accessor =
                target.StickType;
            target.StickType =
                default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.StickTypeEnum);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.StickTypeEnum> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                    com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.StickTypeEnum>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData),
                default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.StickTypeEnum));
        }

        // com.Phantoms.ActionNotification.Runtime.AnchorNotificationData.TrackableType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AnchorNotificationData_TrackableType()
        {
            global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData);
            global::com.Phantoms.ActionNotification.Runtime.TrackableTypeEnum accessor =
                target.TrackableType;
            target.TrackableType =
                default;
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                com.Phantoms.ActionNotification.Runtime.TrackableTypeEnum> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.AnchorNotificationData,
                    com.Phantoms.ActionNotification.Runtime.TrackableTypeEnum>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.AnchorNotificationData),
                default(global::com.Phantoms.ActionNotification.Runtime.TrackableTypeEnum));
        }

        // com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AROcclusionNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AROcclusionNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AROcclusionNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AROcclusionNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData.OcclusionDataType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_AROcclusionNotificationData_OcclusionDataType()
        {
            global::com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData);
            global::com.Phantoms.ActionNotification.Runtime.OcclusionDataType accessor = target.OcclusionDataType;
            target.OcclusionDataType = default(global::com.Phantoms.ActionNotification.Runtime.OcclusionDataType);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData,
                com.Phantoms.ActionNotification.Runtime.OcclusionDataType> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData,
                    com.Phantoms.ActionNotification.Runtime.OcclusionDataType>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.AROcclusionNotificationData),
                default(global::com.Phantoms.ActionNotification.Runtime.OcclusionDataType));
        }

        // com.Phantoms.ActionNotification.Runtime.BaseNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_BaseNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.BaseNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_BaseNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.BaseNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_BaseNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.BaseNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_BaseNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.FaceGameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_FaceGameObject()
        {
            global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData);
            global::UnityEngine.GameObject accessor = target.FaceAnchor;
            target.FaceAnchor = default(global::UnityEngine.GameObject);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData,
                UnityEngine.GameObject> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData
                    , UnityEngine.GameObject>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData),
                default(global::UnityEngine.GameObject));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.FaceTrackingState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_FaceTrackingState()
        {
            global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData);
            global::com.Phantoms.ActionNotification.Runtime.FaceTrackingState accessor = target.FaceTrackingState;
            target.FaceTrackingState = default(global::com.Phantoms.ActionNotification.Runtime.FaceTrackingState);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData,
                com.Phantoms.ActionNotification.Runtime.FaceTrackingState> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData
                    , com.Phantoms.ActionNotification.Runtime.FaceTrackingState>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData),
                default(global::com.Phantoms.ActionNotification.Runtime.FaceTrackingState));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.indices
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_indices()
        {
            global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData);
            global::Unity.Collections.NativeArray<int> accessor = target.indices;
            target.indices = default(global::Unity.Collections.NativeArray<int>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData,
                Unity.Collections.NativeArray<int>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData
                    , Unity.Collections.NativeArray<int>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData),
                default(global::Unity.Collections.NativeArray<int>));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.normals
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_normals()
        {
            global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData);
            global::Unity.Collections.NativeArray<UnityEngine.Vector3> accessor = target.normals;
            target.normals = default(global::Unity.Collections.NativeArray<UnityEngine.Vector3>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData,
                Unity.Collections.NativeArray<UnityEngine.Vector3>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData
                    , Unity.Collections.NativeArray<UnityEngine.Vector3>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData),
                default(global::Unity.Collections.NativeArray<UnityEngine.Vector3>));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.TrackingId
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_TrackingId()
        {
            global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData);
            string accessor = target.TrackingId;
            target.TrackingId = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData,
                string> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData
                    , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.uvs
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_uvs()
        {
            global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData);
            global::Unity.Collections.NativeArray<UnityEngine.Vector2> accessor = target.uvs;
            target.uvs = default(global::Unity.Collections.NativeArray<UnityEngine.Vector2>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData,
                Unity.Collections.NativeArray<UnityEngine.Vector2>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData
                    , Unity.Collections.NativeArray<UnityEngine.Vector2>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData),
                default(global::Unity.Collections.NativeArray<UnityEngine.Vector2>));
        }

        // com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData.vertices
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FaceMeshNotificationData_vertices()
        {
            global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData);
            global::Unity.Collections.NativeArray<UnityEngine.Vector3> accessor = target.vertices;
            target.vertices = default(global::Unity.Collections.NativeArray<UnityEngine.Vector3>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData,
                Unity.Collections.NativeArray<UnityEngine.Vector3>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData
                    , Unity.Collections.NativeArray<UnityEngine.Vector3>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FaceMeshNotificationData),
                default(global::Unity.Collections.NativeArray<UnityEngine.Vector3>));
        }

        // com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FocusResultNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FocusResultNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData.FocusPos
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FocusResultNotificationData_FocusPos()
        {
            global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData);
            global::UnityEngine.Vector3 accessor = target.FocusPos;
            target.FocusPos = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData,
                UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData, UnityEngine.Vector3>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData),
                default(global::UnityEngine.Vector3));
        }

        // com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData.FocusRot
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FocusResultNotificationData_FocusRot()
        {
            global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData);
            global::UnityEngine.Quaternion accessor = target.FocusRot;
            target.FocusRot = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData,
                UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData, UnityEngine.Quaternion>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData),
                default(global::UnityEngine.Quaternion));
        }

        // com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData.FocusState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FocusResultNotificationData_FocusState()
        {
            global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData);
            global::com.Phantoms.ActionNotification.Runtime.FindingType accessor = target.FocusState;
            target.FocusState = default(global::com.Phantoms.ActionNotification.Runtime.FindingType);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData,
                com.Phantoms.ActionNotification.Runtime.FindingType> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData,
                    com.Phantoms.ActionNotification.Runtime.FindingType>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData),
                default(global::com.Phantoms.ActionNotification.Runtime.FindingType));
        }

        // com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FocusResultNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.FocusResultNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_FocusResultNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_ImmersalNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_ImmersalNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData.LocalizerPose
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_ImmersalNotificationData_LocalizerPose()
        {
            global::com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData);
            global::com.Phantoms.ActionNotification.Runtime.LocalizerPose accessor = target.LocalizerPose;
            target.LocalizerPose = default(global::com.Phantoms.ActionNotification.Runtime.LocalizerPose);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData,
                com.Phantoms.ActionNotification.Runtime.LocalizerPose> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData
                    , com.Phantoms.ActionNotification.Runtime.LocalizerPose>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData),
                default(global::com.Phantoms.ActionNotification.Runtime.LocalizerPose));
        }

        // com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData.MapId
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_ImmersalNotificationData_MapId()
        {
            global::com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData);
            int accessor = target.MapId;
            target.MapId = default(int);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData, int>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData, int>(
                        default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData),
                default(int));
        }

        // com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_ImmersalNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.ImmersalNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_ImmersalNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.MarkerNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_MarkerNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.MarkerNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_MarkerNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.MarkerNotificationData.MarkerName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_MarkerNotificationData_MarkerName()
        {
            global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData);
            string accessor = target.MarkerName;
            target.MarkerName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.MarkerNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.MarkerNotificationData, string>(
                        default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.MarkerNotificationData.MarkerState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_MarkerNotificationData_MarkerState()
        {
            global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData);
            global::com.Phantoms.ActionNotification.Runtime.MarkerTrackingState accessor = target.MarkerState;
            target.MarkerState = default(global::com.Phantoms.ActionNotification.Runtime.MarkerTrackingState);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.MarkerNotificationData,
                com.Phantoms.ActionNotification.Runtime.MarkerTrackingState> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.MarkerNotificationData,
                    com.Phantoms.ActionNotification.Runtime.MarkerTrackingState>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData),
                default(global::com.Phantoms.ActionNotification.Runtime.MarkerTrackingState));
        }

        // com.Phantoms.ActionNotification.Runtime.MarkerNotificationData.MarkerTrackable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_MarkerNotificationData_MarkerTrackable()
        {
            global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData);
            global::UnityEngine.Transform accessor = target.MarkerTrackable;
            target.MarkerTrackable = default(global::UnityEngine.Transform);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.MarkerNotificationData,
                UnityEngine.Transform> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.MarkerNotificationData,
                    UnityEngine.Transform>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.MarkerNotificationData),
                default(global::UnityEngine.Transform));
        }

        // com.Phantoms.ActionNotification.Runtime.MarkerNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_MarkerNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.MarkerNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_MarkerNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_OpenBuiltInNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_OpenBuiltInNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData.Data
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_OpenBuiltInNotificationData_Data()
        {
            global::com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData);
            string accessor = target.Data;
            target.Data = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData,
                string> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData, string>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_OpenBuiltInNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_OpenBuiltInNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData.Url
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_OpenBuiltInNotificationData_Url()
        {
            global::com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData);
            string accessor = target.Url;
            target.Url = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData,
                string> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData, string>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.OpenBuiltInNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_TryAcquireAppInfoNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_TryAcquireAppInfoNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData.GetInfoType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_TryAcquireAppInfoNotificationData_GetInfoType()
        {
            global::com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData);
            string accessor = target.GetInfoType;
            target.GetInfoType = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData, string> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData, string>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(
                default(global::com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData));
            optimized.SetValue(
                default(global::com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_TryAcquireAppInfoNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireAppInfoNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void
            com_Phantoms_ActionNotification_Runtime_TryAcquireAppInfoNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData.AcquiredTextureFormat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void
            com_Phantoms_ActionNotification_Runtime_TryAcquireCurrentFrameNotificationData_AcquiredTextureFormat()
        {
            global::com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData);
            global::UnityEngine.TextureFormat accessor = target.AcquiredTextureFormat;
            target.AcquiredTextureFormat = default(global::UnityEngine.TextureFormat);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData,
                UnityEngine.TextureFormat> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData,
                    UnityEngine.TextureFormat>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(
                default(global::com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData));
            optimized.SetValue(
                default(global::com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData),
                default(global::UnityEngine.TextureFormat));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData.ActionName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_TryAcquireCurrentFrameNotificationData_ActionName()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.ActionName;
            target.ActionName = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData.BaseData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void com_Phantoms_ActionNotification_Runtime_TryAcquireCurrentFrameNotificationData_BaseData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            string accessor = target.BaseData;
            target.BaseData = default(string);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData, string>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<
                        com.Phantoms.ActionNotification.Runtime.BaseNotificationData
                        , string>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(string));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData.ConversionType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void
            com_Phantoms_ActionNotification_Runtime_TryAcquireCurrentFrameNotificationData_ConversionType()
        {
            global::com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData);
            global::com.Phantoms.ActionNotification.Runtime.ConversionType accessor = target.ConversionType;
            target.ConversionType = default(global::com.Phantoms.ActionNotification.Runtime.ConversionType);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData,
                com.Phantoms.ActionNotification.Runtime.ConversionType> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData,
                    com.Phantoms.ActionNotification.Runtime.ConversionType>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(
                default(global::com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData));
            optimized.SetValue(
                default(global::com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData),
                default(global::com.Phantoms.ActionNotification.Runtime.ConversionType));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData.NotificationAct
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void
            com_Phantoms_ActionNotification_Runtime_TryAcquireCurrentFrameNotificationData_NotificationAct()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action accessor = target.NotificationAct;
            target.NotificationAct = default(global::System.Action);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action));
        }

        // com.Phantoms.ActionNotification.Runtime.TryAcquireCurrentFrameNotificationData.NotificationActWithData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void
            com_Phantoms_ActionNotification_Runtime_TryAcquireCurrentFrameNotificationData_NotificationActWithData()
        {
            global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData target =
                default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData);
            global::System.Action<object> accessor = target.NotificationActWithData;
            target.NotificationActWithData = default(global::System.Action<object>);
            global::Unity.VisualScripting.InstanceFieldAccessor<
                com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                System.Action<object>> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<
                    com.Phantoms.ActionNotification.Runtime.BaseNotificationData,
                    System.Action<object>>(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData));
            optimized.SetValue(default(global::com.Phantoms.ActionNotification.Runtime.BaseNotificationData),
                default(global::System.Action<object>));
        }

        // Unity.VisualScripting.AnimatorMessageListener.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_AnimatorMessageListener_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.AnimatorMessageListener.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_AnimatorMessageListener_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.AnimatorMessageListener.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_AnimatorMessageListener_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.FlowMachine.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMachine_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.FlowMachine.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMachine_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.FlowMachine.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMachine_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        //Unity.VisualScripting.FlowMacro.aotStubs
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void VisualScripting_FlowMacro_aotStubs()
        // {
        //     global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph> target = default(global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>);
        //     global::System.Collections.Generic.IEnumerable<object> accessor = target.aotStubs;
        //     global::Unity.VisualScripting.InstancePropertyAccessor<Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>,
        //         System.Collections.Generic.IEnumerable<object>> optimized =
        //         new global::Unity.VisualScripting.InstancePropertyAccessor<Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>,
        //             System.Collections.Generic.IEnumerable<object>>(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>));
        // }

        // Unity.VisualScripting.FlowMacro.graph
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMacro_graph()
        {
            global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph> target =
                default(global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>);
            global::Unity.VisualScripting.FlowGraph accessor = target.graph;
            target.graph = default(global::Unity.VisualScripting.FlowGraph);
            global::Unity.VisualScripting.InstancePropertyAccessor<
                VisualScripting.Macro<Unity.VisualScripting.FlowGraph>, Unity.VisualScripting.FlowGraph> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<
                    Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>, Unity.VisualScripting.FlowGraph>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>));
            optimized.SetValue(default(global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>),
                default(global::Unity.VisualScripting.FlowGraph));
        }

        // Unity.VisualScripting.FlowMacro.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMacro_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // Unity.VisualScripting.FlowMacro.isDescriptionValid
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMacro_isDescriptionValid()
        {
            global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph> target =
                default(global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>);
            bool accessor = target.isDescriptionValid;
            target.isDescriptionValid = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<
                Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<
                    Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>));
            optimized.SetValue(default(global::Unity.VisualScripting.Macro<Unity.VisualScripting.FlowGraph>),
                default(bool));
        }

        // Unity.VisualScripting.FlowMacro.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMacro_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // Unity.VisualScripting.FlowMacro.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMacro_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.FlowMacro.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMacro_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.FlowMacro.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_FlowMacro_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.StateMachine.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_StateMachine_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.StateMachine.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_StateMachine_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.StateMachine.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_StateMachine_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.StateMacro.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_StateMacro_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.StateMacro.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_StateMacro_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScripting.StateMacro.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void VisualScripting_StateMacro_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // float.Epsilon
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_Epsilon()
        {
            float accessor = float.Epsilon;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // float.Equals
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_Equals()
        {
            float target = default(float);
            float arg0 = default(float);
            target.Equals(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(float), arg0);
            optimized.Invoke(default(object[]));
        }

        // float.Equals
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_Equals_0()
        {
            float target = default(float);
            object arg0 = default(object);
            target.Equals(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(float), arg0);
            optimized.Invoke(default(object[]));
        }

        // float.GetTypeCode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_GetTypeCode()
        {
            float target = default(float);
            target.GetTypeCode();
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(float));
            optimized.Invoke(default(object[]));
        }

        // float.MaxValue
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_MaxValue()
        {
            float accessor = float.MaxValue;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // float.MinValue
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_MinValue()
        {
            float accessor = float.MinValue;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // float.NaN
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_NaN()
        {
            float accessor = float.NaN;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // float.NegativeInfinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_NegativeInfinity()
        {
            float accessor = float.NegativeInfinity;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // float.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_op_Equality()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // float.op_GreaterThan
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_op_GreaterThan()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            bool @operator = (arg0 > arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // float.op_GreaterThanOrEqual
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_op_GreaterThanOrEqual()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            bool @operator = (arg0 >= arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // float.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_op_Inequality()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // float.op_LessThan
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_op_LessThan()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            bool @operator = (arg0 < arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // float.op_LessThanOrEqual
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_op_LessThanOrEqual()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            bool @operator = (arg0 <= arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // float.PositiveInfinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_PositiveInfinity()
        {
            float accessor = float.PositiveInfinity;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // float.ToString
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void float_ToString()
        {
            float target = default(float);
            target.ToString();
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(float));
            optimized.Invoke(default(object[]));
        }

        // int.Equals
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void int_Equals()
        {
            int target = default(int);
            object arg0 = default(object);
            target.Equals(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(int), arg0);
            optimized.Invoke(default(object[]));
        }

        // int.GetTypeCode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void int_GetTypeCode()
        {
            int target = default(int);
            target.GetTypeCode();
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(int));
            optimized.Invoke(default(object[]));
        }

        // int.Parse
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void int_Parse()
        {
            string arg0 = default(string);
            global::System.Globalization.NumberStyles arg1 = default(global::System.Globalization.NumberStyles);
            int.Parse(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, System.Globalization.NumberStyles, int>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<string, System.Globalization.NumberStyles,
                        int>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // int.ToString
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void int_ToString()
        {
            int target = default(int);
            string arg0 = default(string);
            target.ToString(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(int), arg0);
            optimized.Invoke(default(object[]));
        }

        // long.ToString
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void long_ToString()
        {
            long target = default(long);
            string arg0 = default(string);
            target.ToString(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(long), arg0);
            optimized.Invoke(default(object[]));
        }

        // Unity.VisualScriptingAotList..ctor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void Ludiq_AotList_ctor()
        {
            new Unity.VisualScripting.AotList();
        }

        // object.GetType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void object_GetType()
        {
            object target = default(object);
            target.GetType();
            global::Unity.VisualScripting.InstanceFunctionInvoker<object, System.Type> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<object, System.Type>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object));
            optimized.Invoke(default(object[]));
        }

        // object.ToString
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void object_ToString()
        {
            object target = default(object);
            target.ToString();
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object));
            optimized.Invoke(default(object[]));
        }


        // Simulater.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void Simulater_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // Simulater.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void Simulater_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // Simulater.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void Simulater_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // string.Concat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Concat()
        {
            object arg0 = default(object);
            object arg1 = default(object);
            string.Concat(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<object, object, string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<object, object, string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // string.Concat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Concat_0()
        {
            string arg0 = default(string);
            string arg1 = default(string);
            string arg2 = default(string);
            string arg3 = default(string);
            string.Concat(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, string, string, string, string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, string, string, string, string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // string.Concat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Concat_1()
        {
            string arg0 = default(string);
            string arg1 = default(string);
            string.Concat(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, string, string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, string, string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // string.Concat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Concat_2()
        {
            object[] arg0 = default(object[]);
            string.Concat(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<object[], string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<object[], string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // string.Concat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Concat_3()
        {
            object arg0 = default(object);
            object arg1 = default(object);
            object arg2 = default(object);
            string.Concat(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<object, object, object, string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<object, object, object, string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // string.Format
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Format()
        {
            string arg0 = default(string);
            object arg1 = default(object);
            string.Format(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, object, string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, object, string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // string.Format
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Format_0()
        {
            string arg0 = default(string);
            object arg1 = default(object);
            object arg2 = default(object);
            string.Format(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, object, object, string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, object, object, string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // string.Format
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Format_1()
        {
            string arg0 = default(string);
            object[] arg1 = default(object[]);
            string.Format(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, object[], string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, object[], string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // string.Format
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Format_2()
        {
            string arg0 = default(string);
            object arg1 = default(object);
            object arg2 = default(object);
            object arg3 = default(object);
            string.Format(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, object, object, object, string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, object, object, object, string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // string.IsNullOrWhiteSpace
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_IsNullOrWhiteSpace()
        {
            string arg0 = default(string);
            string.IsNullOrWhiteSpace(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // string.Join
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Join()
        {
            string arg0 = default(string);
            object[] arg1 = default(object[]);
            string.Join(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, object[], string> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, object[], string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // string.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_op_Equality()
        {
            string arg0 = default(string);
            string arg1 = default(string);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, string, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, string, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // string.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_op_Inequality()
        {
            string arg0 = default(string);
            string arg1 = default(string);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, string, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, string, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // string.Substring
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void string_Substring()
        {
            string target = default(string);
            int arg0 = default(int);
            int arg1 = default(int);
            target.Substring(arg0, arg1);
            global::Unity.VisualScripting.InstanceFunctionInvoker<string, int, int, string> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<string, int, int, string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(string), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // System.Collections.IList.Add
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Collections_IList_Add()
        {
            global::System.Collections.IList target = default(global::System.Collections.IList);
            object arg0 = default(object);
            target.Add(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::System.Collections.IList), arg0);
            optimized.Invoke(default(object[]));
        }

        // System.Collections.IList.Contains
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Collections_IList_Contains()
        {
            global::System.Collections.IList target = default(global::System.Collections.IList);
            object arg0 = default(object);
            target.Contains(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::System.Collections.IList), arg0);
            optimized.Invoke(default(object[]));
        }

        // System.DateTime..ctor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_DateTime_ctor()
        {
            int arg0 = default(int);
            int arg1 = default(int);
            int arg2 = default(int);
            int arg3 = default(int);
            int arg4 = default(int);
            int arg5 = default(int);
            global::System.DateTimeKind arg6 = default(global::System.DateTimeKind);
            new System.DateTime(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        // System.DateTime..ctor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_DateTime_ctor_0()
        {
            int arg0 = default(int);
            int arg1 = default(int);
            int arg2 = default(int);
            new System.DateTime(arg0, arg1, arg2);
        }

        // System.DateTime.AddMilliseconds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_DateTime_AddMilliseconds()
        {
            global::System.DateTime target = default(global::System.DateTime);
            double arg0 = default(double);
            target.AddMilliseconds(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::System.DateTime), arg0);
            optimized.Invoke(default(object[]));
        }

        // System.DateTime.AddSeconds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_DateTime_AddSeconds()
        {
            global::System.DateTime target = default(global::System.DateTime);
            double arg0 = default(double);
            target.AddSeconds(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::System.DateTime), arg0);
            optimized.Invoke(default(object[]));
        }

        // System.DateTime.Subtract
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_DateTime_Subtract()
        {
            global::System.DateTime target = default(global::System.DateTime);
            global::System.DateTime arg0 = default(global::System.DateTime);
            target.Subtract(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::System.DateTime), arg0);
            optimized.Invoke(default(object[]));
        }

        // System.DateTime.UtcNow
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_DateTime_UtcNow()
        {
            global::System.DateTime accessor = global::System.DateTime.UtcNow;
            global::Unity.VisualScripting.StaticPropertyAccessor<System.DateTime> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<System.DateTime>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // System.Exception.Data
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Exception_Data()
        {
            global::System.Exception target = default(global::System.Exception);
            global::System.Collections.IDictionary accessor = target.Data;
            global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, System.Collections.IDictionary>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception,
                        System.Collections.IDictionary>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.Exception));
        }

        // System.Exception.HelpLink
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Exception_HelpLink()
        {
            global::System.Exception target = default(global::System.Exception);
            string accessor = target.HelpLink;
            target.HelpLink = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.Exception));
            optimized.SetValue(default(global::System.Exception), default(string));
        }

        // System.Exception.HResult
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Exception_HResult()
        {
            global::System.Exception target = default(global::System.Exception);
            int accessor = target.HResult;
            global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.Exception));
            optimized.SetValue(default(global::System.Exception), default(int));
        }

        // System.Exception.InnerException
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Exception_InnerException()
        {
            global::System.Exception target = default(global::System.Exception);
            global::System.Exception accessor = target.InnerException;
            global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, System.Exception> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, System.Exception>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.Exception));
        }

        // System.Exception.Message
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Exception_Message()
        {
            global::System.Exception target = default(global::System.Exception);
            string accessor = target.Message;
            global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.Exception));
        }

        // System.Exception.Source
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Exception_Source()
        {
            global::System.Exception target = default(global::System.Exception);
            string accessor = target.Source;
            target.Source = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.Exception));
            optimized.SetValue(default(global::System.Exception), default(string));
        }

        // System.Exception.StackTrace
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Exception_StackTrace()
        {
            global::System.Exception target = default(global::System.Exception);
            string accessor = target.StackTrace;
            global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.Exception));
        }

        // System.Exception.TargetSite
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Exception_TargetSite()
        {
            global::System.Exception target = default(global::System.Exception);
            global::System.Reflection.MethodBase accessor = target.TargetSite;
            global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception, System.Reflection.MethodBase>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<System.Exception,
                        System.Reflection.MethodBase>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.Exception));
        }

        // System.Random..ctor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Random_ctor()
        {
            new System.Random();
        }

        // System.Random.Next
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Random_Next()
        {
            global::System.Random target = default(global::System.Random);
            int arg0 = default(int);
            target.Next(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::System.Random), arg0);
            optimized.Invoke(default(object[]));
        }

        // System.TimeSpan.Hours
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_TimeSpan_Hours()
        {
            global::System.TimeSpan target = default(global::System.TimeSpan);
            int accessor = target.Hours;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.TimeSpan));
        }

        // System.TimeSpan.Milliseconds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_TimeSpan_Milliseconds()
        {
            global::System.TimeSpan target = default(global::System.TimeSpan);
            int accessor = target.Milliseconds;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.TimeSpan));
        }

        // System.TimeSpan.Minutes
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_TimeSpan_Minutes()
        {
            global::System.TimeSpan target = default(global::System.TimeSpan);
            int accessor = target.Minutes;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.TimeSpan));
        }

        // System.TimeSpan.Seconds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_TimeSpan_Seconds()
        {
            global::System.TimeSpan target = default(global::System.TimeSpan);
            int accessor = target.Seconds;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.TimeSpan));
        }

        // System.TimeSpan.TotalDays
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_TimeSpan_TotalDays()
        {
            global::System.TimeSpan target = default(global::System.TimeSpan);
            double accessor = target.TotalDays;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.TimeSpan));
        }

        // System.TimeSpan.TotalHours
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_TimeSpan_TotalHours()
        {
            global::System.TimeSpan target = default(global::System.TimeSpan);
            double accessor = target.TotalHours;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.TimeSpan));
        }

        // System.TimeSpan.TotalMilliseconds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_TimeSpan_TotalMilliseconds()
        {
            global::System.TimeSpan target = default(global::System.TimeSpan);
            double accessor = target.TotalMilliseconds;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.TimeSpan));
        }

        // System.TimeSpan.TotalSeconds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_TimeSpan_TotalSeconds()
        {
            global::System.TimeSpan target = default(global::System.TimeSpan);
            double accessor = target.TotalSeconds;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::System.TimeSpan));
        }

        // System.Type.GetTypeCode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void System_Type_GetTypeCode()
        {
            global::System.Type arg0 = default(global::System.Type);
            global::System.Type.GetTypeCode(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<System.Type, System.TypeCode> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<System.Type, System.TypeCode>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMesh.AddLink
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMesh_AddLink()
        {
            global::UnityEngine.AI.NavMeshLinkData arg0 = default(global::UnityEngine.AI.NavMeshLinkData);
            global::UnityEngine.AI.NavMesh.AddLink(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.AI.NavMeshLinkData,
                    UnityEngine.AI.NavMeshLinkInstance>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.AI.NavMeshLinkData,
                        UnityEngine.AI.NavMeshLinkInstance>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMesh.AddLink
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMesh_AddLink_0()
        {
            global::UnityEngine.AI.NavMeshLinkData arg0 = default(global::UnityEngine.AI.NavMeshLinkData);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg2 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.AI.NavMesh.AddLink(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.AI.NavMeshLinkData, UnityEngine.Vector3,
                UnityEngine.Quaternion, UnityEngine.AI.NavMeshLinkInstance> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.AI.NavMeshLinkData,
                    UnityEngine.Vector3,
                    UnityEngine.Quaternion, UnityEngine.AI.NavMeshLinkInstance>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMesh.AllAreas
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMesh_AllAreas()
        {
            int accessor = global::UnityEngine.AI.NavMesh.AllAreas;
            global::Unity.VisualScripting.StaticFieldAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<int>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.AI.NavMesh.avoidancePredictionTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMesh_avoidancePredictionTime()
        {
            float accessor = global::UnityEngine.AI.NavMesh.avoidancePredictionTime;
            global::UnityEngine.AI.NavMesh.avoidancePredictionTime = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.AI.NavMesh.onPreUpdate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMesh_onPreUpdate()
        {
            global::UnityEngine.AI.NavMesh.OnNavMeshPreUpdate accessor = global::UnityEngine.AI.NavMesh.onPreUpdate;
            global::UnityEngine.AI.NavMesh.onPreUpdate = default(global::UnityEngine.AI.NavMesh.OnNavMeshPreUpdate);
            global::Unity.VisualScripting.StaticFieldAccessor<UnityEngine.AI.NavMesh.OnNavMeshPreUpdate> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<UnityEngine.AI.NavMesh.OnNavMeshPreUpdate>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.AI.NavMesh.OnNavMeshPreUpdate));
        }

        // UnityEngine.AI.NavMesh.pathfindingIterationsPerFrame
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMesh_pathfindingIterationsPerFrame()
        {
            int accessor = global::UnityEngine.AI.NavMesh.pathfindingIterationsPerFrame;
            global::UnityEngine.AI.NavMesh.pathfindingIterationsPerFrame = default(int);
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(int));
        }

        // UnityEngine.AI.NavMeshAgent.acceleration
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_acceleration()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            float accessor = target.acceleration;
            target.acceleration = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(float));
        }

        // UnityEngine.AI.NavMeshAgent.agentTypeID
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_agentTypeID()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            int accessor = target.agentTypeID;
            target.agentTypeID = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(int));
        }

        // UnityEngine.AI.NavMeshAgent.angularSpeed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_angularSpeed()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            float accessor = target.angularSpeed;
            target.angularSpeed = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(float));
        }

        // UnityEngine.AI.NavMeshAgent.areaMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_areaMask()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            int accessor = target.areaMask;
            target.areaMask = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(int));
        }

        // UnityEngine.AI.NavMeshAgent.autoBraking
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_autoBraking()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.autoBraking;
            target.autoBraking = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(bool));
        }

        // UnityEngine.AI.NavMeshAgent.autoRepath
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_autoRepath()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.autoRepath;
            target.autoRepath = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(bool));
        }

        // UnityEngine.AI.NavMeshAgent.autoTraverseOffMeshLink
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_autoTraverseOffMeshLink()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.autoTraverseOffMeshLink;
            target.autoTraverseOffMeshLink = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(bool));
        }

        // UnityEngine.AI.NavMeshAgent.avoidancePriority
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_avoidancePriority()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            int accessor = target.avoidancePriority;
            target.avoidancePriority = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(int));
        }

        // UnityEngine.AI.NavMeshAgent.baseOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_baseOffset()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            float accessor = target.baseOffset;
            target.baseOffset = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(float));
        }

        // UnityEngine.AI.NavMeshAgent.currentOffMeshLinkData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_currentOffMeshLinkData()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.AI.OffMeshLinkData accessor = target.currentOffMeshLinkData;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                    UnityEngine.AI.OffMeshLinkData>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.AI.OffMeshLinkData>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.desiredVelocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_desiredVelocity()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.Vector3 accessor = target.desiredVelocity;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.destination
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_destination()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.Vector3 accessor = target.destination;
            target.destination = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.AI.NavMeshAgent.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.AI.NavMeshAgent.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.AI.NavMeshAgent.hasPath
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_hasPath()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.hasPath;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.height
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_height()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            float accessor = target.height;
            target.height = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(float));
        }

        // UnityEngine.AI.NavMeshAgent.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.AI.NavMeshAgent.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.AI.NavMeshAgent.isOnNavMesh
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_isOnNavMesh()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.isOnNavMesh;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.isOnOffMeshLink
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_isOnOffMeshLink()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.isOnOffMeshLink;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.isPathStale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_isPathStale()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.isPathStale;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.isStopped
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_isStopped()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.isStopped;
            target.isStopped = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(bool));
        }

        // UnityEngine.AI.NavMeshAgent.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.AI.NavMeshAgent.navMeshOwner
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_navMeshOwner()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.Object accessor = target.navMeshOwner;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, UnityEngine.Object>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.Object>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.nextOffMeshLinkData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_nextOffMeshLinkData()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.AI.OffMeshLinkData accessor = target.nextOffMeshLinkData;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                    UnityEngine.AI.OffMeshLinkData>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.AI.OffMeshLinkData>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.nextPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_nextPosition()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.Vector3 accessor = target.nextPosition;
            target.nextPosition = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.AI.NavMeshAgent.obstacleAvoidanceType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_obstacleAvoidanceType()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.AI.ObstacleAvoidanceType accessor = target.obstacleAvoidanceType;
            target.obstacleAvoidanceType = default(global::UnityEngine.AI.ObstacleAvoidanceType);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                    UnityEngine.AI.ObstacleAvoidanceType>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.AI.ObstacleAvoidanceType>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent),
                default(global::UnityEngine.AI.ObstacleAvoidanceType));
        }

        // UnityEngine.AI.NavMeshAgent.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMeshAgent.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMeshAgent.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMeshAgent.path
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_path()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.AI.NavMeshPath accessor = target.path;
            target.path = default(global::UnityEngine.AI.NavMeshPath);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                UnityEngine.AI.NavMeshPath> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                    UnityEngine.AI.NavMeshPath>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent),
                default(global::UnityEngine.AI.NavMeshPath));
        }

        // UnityEngine.AI.NavMeshAgent.pathEndPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_pathEndPosition()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.Vector3 accessor = target.pathEndPosition;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.pathPending
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_pathPending()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.pathPending;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.pathStatus
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_pathStatus()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.AI.NavMeshPathStatus accessor = target.pathStatus;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                    UnityEngine.AI.NavMeshPathStatus>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.AI.NavMeshPathStatus>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.radius
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_radius()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            float accessor = target.radius;
            target.radius = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(float));
        }

        // UnityEngine.AI.NavMeshAgent.remainingDistance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_remainingDistance()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            float accessor = target.remainingDistance;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.speed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_speed()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            float accessor = target.speed;
            target.speed = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(float));
        }

        // UnityEngine.AI.NavMeshAgent.steeringTarget
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_steeringTarget()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.Vector3 accessor = target.steeringTarget;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
        }

        // UnityEngine.AI.NavMeshAgent.stoppingDistance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_stoppingDistance()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            float accessor = target.stoppingDistance;
            target.stoppingDistance = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(float));
        }

        // UnityEngine.AI.NavMeshAgent.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.AI.NavMeshAgent.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.AI.NavMeshAgent.updatePosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_updatePosition()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.updatePosition;
            target.updatePosition = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(bool));
        }

        // UnityEngine.AI.NavMeshAgent.updateRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_updateRotation()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.updateRotation;
            target.updateRotation = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(bool));
        }

        // UnityEngine.AI.NavMeshAgent.updateUpAxis
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_updateUpAxis()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            bool accessor = target.updateUpAxis;
            target.updateUpAxis = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(bool));
        }

        // UnityEngine.AI.NavMeshAgent.velocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshAgent_velocity()
        {
            global::UnityEngine.AI.NavMeshAgent target = default(global::UnityEngine.AI.NavMeshAgent);
            global::UnityEngine.Vector3 accessor = target.velocity;
            target.velocity = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshAgent,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshAgent));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshAgent), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.AI.NavMeshData.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshData_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.AI.NavMeshData.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshData_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.AI.NavMeshData.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshData_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMeshData.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshData_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMeshData.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshData_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMeshData.position
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshData_position()
        {
            global::UnityEngine.AI.NavMeshData target = default(global::UnityEngine.AI.NavMeshData);
            global::UnityEngine.Vector3 accessor = target.position;
            target.position = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshData, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshData,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshData));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshData), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.AI.NavMeshData.rotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshData_rotation()
        {
            global::UnityEngine.AI.NavMeshData target = default(global::UnityEngine.AI.NavMeshData);
            global::UnityEngine.Quaternion accessor = target.rotation;
            target.rotation = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshData, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshData,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshData));
            optimized.SetValue(default(global::UnityEngine.AI.NavMeshData), default(global::UnityEngine.Quaternion));
        }

        // UnityEngine.AI.NavMeshData.sourceBounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshData_sourceBounds()
        {
            global::UnityEngine.AI.NavMeshData target = default(global::UnityEngine.AI.NavMeshData);
            global::UnityEngine.Bounds accessor = target.sourceBounds;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshData, UnityEngine.Bounds>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AI.NavMeshData,
                        UnityEngine.Bounds>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AI.NavMeshData));
        }

        // UnityEngine.AI.NavMeshObstacle.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMeshObstacle.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.NavMeshObstacle.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_NavMeshObstacle_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.OffMeshLink.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_OffMeshLink_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.OffMeshLink.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_OffMeshLink_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AI.OffMeshLink.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AI_OffMeshLink_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AnchoredJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnchoredJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AnchoredJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnchoredJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AnchoredJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnchoredJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animation.animatePhysics
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_animatePhysics()
        {
            global::UnityEngine.Animation target = default(global::UnityEngine.Animation);
            bool accessor = target.animatePhysics;
            target.animatePhysics = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animation));
            optimized.SetValue(default(global::UnityEngine.Animation), default(bool));
        }

        // UnityEngine.Animation.clip
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_clip()
        {
            global::UnityEngine.Animation target = default(global::UnityEngine.Animation);
            global::UnityEngine.AnimationClip accessor = target.clip;
            target.clip = default(global::UnityEngine.AnimationClip);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation, UnityEngine.AnimationClip>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation,
                        UnityEngine.AnimationClip>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animation));
            optimized.SetValue(default(global::UnityEngine.Animation), default(global::UnityEngine.AnimationClip));
        }

        // UnityEngine.Animation.cullingType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_cullingType()
        {
            global::UnityEngine.Animation target = default(global::UnityEngine.Animation);
            global::UnityEngine.AnimationCullingType accessor = target.cullingType;
            target.cullingType = default(global::UnityEngine.AnimationCullingType);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation,
                UnityEngine.AnimationCullingType> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation,
                    UnityEngine.AnimationCullingType>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animation));
            optimized.SetValue(default(global::UnityEngine.Animation),
                default(global::UnityEngine.AnimationCullingType));
        }

        // UnityEngine.Animation.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Animation.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Animation.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Animation.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Animation.isPlaying
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_isPlaying()
        {
            global::UnityEngine.Animation target = default(global::UnityEngine.Animation);
            bool accessor = target.isPlaying;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animation));
        }

        // UnityEngine.Animation.localBounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_localBounds()
        {
            global::UnityEngine.Animation target = default(global::UnityEngine.Animation);
            global::UnityEngine.Bounds accessor = target.localBounds;
            target.localBounds = default(global::UnityEngine.Bounds);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation, UnityEngine.Bounds>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation,
                        UnityEngine.Bounds>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animation));
            optimized.SetValue(default(global::UnityEngine.Animation), default(global::UnityEngine.Bounds));
        }

        // UnityEngine.Animation.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Animation.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animation.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animation.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animation.playAutomatically
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_playAutomatically()
        {
            global::UnityEngine.Animation target = default(global::UnityEngine.Animation);
            bool accessor = target.playAutomatically;
            target.playAutomatically = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animation));
            optimized.SetValue(default(global::UnityEngine.Animation), default(bool));
        }

        // UnityEngine.Animation.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Animation.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Animation.wrapMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animation_wrapMode()
        {
            global::UnityEngine.Animation target = default(global::UnityEngine.Animation);
            global::UnityEngine.WrapMode accessor = target.wrapMode;
            target.wrapMode = default(global::UnityEngine.WrapMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation, UnityEngine.WrapMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animation,
                        UnityEngine.WrapMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animation));
            optimized.SetValue(default(global::UnityEngine.Animation), default(global::UnityEngine.WrapMode));
        }

        // UnityEngine.AnimationClip.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimationClip_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AnimationClip.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimationClip_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AnimationClip.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimationClip_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.AimConstraint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.AimConstraint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.AimConstraint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_AimConstraint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.LookAtConstraint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.LookAtConstraint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.LookAtConstraint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_LookAtConstraint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.ParentConstraint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.ParentConstraint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.ParentConstraint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ParentConstraint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.PositionConstraint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_PositionConstraint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.PositionConstraint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_PositionConstraint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.PositionConstraint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_PositionConstraint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.RotationConstraint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_RotationConstraint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.RotationConstraint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_RotationConstraint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.RotationConstraint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_RotationConstraint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.ScaleConstraint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ScaleConstraint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.ScaleConstraint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ScaleConstraint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animations.ScaleConstraint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animations_ScaleConstraint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animator.angularVelocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_angularVelocity()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Vector3 accessor = target.angularVelocity;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.applyRootMotion
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_applyRootMotion()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.applyRootMotion;
            target.applyRootMotion = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(bool));
        }

        // UnityEngine.Animator.avatar
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_avatar()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Avatar accessor = target.avatar;
            target.avatar = default(global::UnityEngine.Avatar);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Avatar> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Avatar>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(global::UnityEngine.Avatar));
        }

        // UnityEngine.Animator.bodyPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_bodyPosition()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Vector3 accessor = target.bodyPosition;
            target.bodyPosition = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Animator.bodyRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_bodyRotation()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Quaternion accessor = target.bodyRotation;
            target.bodyRotation = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(global::UnityEngine.Quaternion));
        }

        // UnityEngine.Animator.cullingMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_cullingMode()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.AnimatorCullingMode accessor = target.cullingMode;
            target.cullingMode = default(global::UnityEngine.AnimatorCullingMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                UnityEngine.AnimatorCullingMode> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                    UnityEngine.AnimatorCullingMode>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(global::UnityEngine.AnimatorCullingMode));
        }

        // UnityEngine.Animator.deltaPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_deltaPosition()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Vector3 accessor = target.deltaPosition;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.deltaRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_deltaRotation()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Quaternion accessor = target.deltaRotation;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Animator.feetPivotActive
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_feetPivotActive()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.feetPivotActive;
            target.feetPivotActive = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(float));
        }

        // UnityEngine.Animator.fireEvents
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_fireEvents()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.fireEvents;
            target.fireEvents = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(bool));
        }

        // UnityEngine.Animator.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Animator.GetFloat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_GetFloat()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            string arg0 = default(string);
            target.GetFloat(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Animator, string, float> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Animator, string, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Animator), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animator.gravityWeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_gravityWeight()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.gravityWeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.hasBoundPlayables
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_hasBoundPlayables()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.hasBoundPlayables;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.hasRootMotion
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_hasRootMotion()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.hasRootMotion;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.hasTransformHierarchy
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_hasTransformHierarchy()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.hasTransformHierarchy;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Animator.humanScale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_humanScale()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.humanScale;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Animator.isHuman
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_isHuman()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.isHuman;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.isInitialized
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_isInitialized()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.isInitialized;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.isMatchingTarget
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_isMatchingTarget()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.isMatchingTarget;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.isOptimizable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_isOptimizable()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.isOptimizable;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.keepAnimatorControllerStateOnDisable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_keepAnimatorControllerStateOnDisable()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.keepAnimatorControllerStateOnDisable;
            target.keepAnimatorControllerStateOnDisable = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(bool));
        }

        // UnityEngine.Animator.layerCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_layerCount()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            int accessor = target.layerCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.layersAffectMassCenter
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_layersAffectMassCenter()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.layersAffectMassCenter;
            target.layersAffectMassCenter = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(bool));
        }

        // UnityEngine.Animator.leftFeetBottomHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_leftFeetBottomHeight()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.leftFeetBottomHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.logWarnings
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_logWarnings()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.logWarnings;
            target.logWarnings = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(bool));
        }

        // UnityEngine.Animator.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Animator.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animator.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animator.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animator.parameterCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_parameterCount()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            int accessor = target.parameterCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.parameters
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_parameters()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            UnityEngine.AnimatorControllerParameter[] accessor = target.parameters;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                    UnityEngine.AnimatorControllerParameter[]>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.AnimatorControllerParameter[]>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.pivotPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_pivotPosition()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Vector3 accessor = target.pivotPosition;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.pivotWeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_pivotWeight()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.pivotWeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.playableGraph
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_playableGraph()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Playables.PlayableGraph accessor = target.playableGraph;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                UnityEngine.Playables.PlayableGraph> optimized
                = new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                    UnityEngine.Playables.PlayableGraph>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.playbackTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_playbackTime()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.playbackTime;
            target.playbackTime = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(float));
        }

        // UnityEngine.Animator.recorderMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_recorderMode()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.AnimatorRecorderMode accessor = target.recorderMode;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                UnityEngine.AnimatorRecorderMode> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                    UnityEngine.AnimatorRecorderMode>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.recorderStartTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_recorderStartTime()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.recorderStartTime;
            target.recorderStartTime = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(float));
        }

        // UnityEngine.Animator.recorderStopTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_recorderStopTime()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.recorderStopTime;
            target.recorderStopTime = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(float));
        }

        // UnityEngine.Animator.rightFeetBottomHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_rightFeetBottomHeight()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.rightFeetBottomHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.rootPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_rootPosition()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Vector3 accessor = target.rootPosition;
            target.rootPosition = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Animator.rootRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_rootRotation()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Quaternion accessor = target.rootRotation;
            target.rootRotation = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(global::UnityEngine.Quaternion));
        }

        // UnityEngine.Animator.runtimeAnimatorController
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_runtimeAnimatorController()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.RuntimeAnimatorController accessor = target.runtimeAnimatorController;
            target.runtimeAnimatorController = default(global::UnityEngine.RuntimeAnimatorController);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                    UnityEngine.RuntimeAnimatorController>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.RuntimeAnimatorController>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator),
                default(global::UnityEngine.RuntimeAnimatorController));
        }

        // UnityEngine.Animator.SetBool
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_SetBool()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            string arg0 = default(string);
            bool arg1 = default(bool);
            target.SetBool(arg0, arg1);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Animator, string, bool> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Animator, string, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Animator), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animator.SetFloat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_SetFloat()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            string arg0 = default(string);
            float arg1 = default(float);
            target.SetFloat(arg0, arg1);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Animator, string, float> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Animator, string, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Animator), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animator.SetTrigger
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_SetTrigger()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            string arg0 = default(string);
            target.SetTrigger(arg0);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Animator, string> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Animator, string>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Animator), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Animator.speed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_speed()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            float accessor = target.speed;
            target.speed = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(float));
        }

        // UnityEngine.Animator.stabilizeFeet
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_stabilizeFeet()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            bool accessor = target.stabilizeFeet;
            target.stabilizeFeet = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(bool));
        }

        // UnityEngine.Animator.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Animator.targetPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_targetPosition()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Vector3 accessor = target.targetPosition;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.targetRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_targetRotation()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Quaternion accessor = target.targetRotation;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.Animator.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Animator.updateMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_updateMode()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.AnimatorUpdateMode accessor = target.updateMode;
            target.updateMode = default(global::UnityEngine.AnimatorUpdateMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.AnimatorUpdateMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.AnimatorUpdateMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
            optimized.SetValue(default(global::UnityEngine.Animator), default(global::UnityEngine.AnimatorUpdateMode));
        }

        // UnityEngine.Animator.velocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Animator_velocity()
        {
            global::UnityEngine.Animator target = default(global::UnityEngine.Animator);
            global::UnityEngine.Vector3 accessor = target.velocity;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Animator,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Animator));
        }

        // UnityEngine.AnimatorOverrideController.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimatorOverrideController_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AnimatorOverrideController.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimatorOverrideController_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AnimatorOverrideController.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AnimatorOverrideController_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Application.isEditor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Application_isEditor()
        {
            bool accessor = global::UnityEngine.Application.isEditor;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Application.Quit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Application_Quit()
        {
            global::UnityEngine.Application.Quit();
            global::Unity.VisualScripting.StaticActionInvoker optimized =
                new global::Unity.VisualScripting.StaticActionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AreaEffector2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AreaEffector2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AreaEffector2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AreaEffector2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AreaEffector2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AreaEffector2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ArticulationBody.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ArticulationBody_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ArticulationBody.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ArticulationBody_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ArticulationBody.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ArticulationBody_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AssetBundle.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AssetBundle_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AssetBundle.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AssetBundle_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AssetBundle.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AssetBundle_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AssetBundleManifest.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AssetBundleManifest_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AssetBundleManifest.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AssetBundleManifest_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AssetBundleManifest.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AssetBundleManifest_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixer.FindSnapshot
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixer_FindSnapshot()
        {
            global::UnityEngine.Audio.AudioMixer target = default(global::UnityEngine.Audio.AudioMixer);
            string arg0 = default(string);
            target.FindSnapshot(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Audio.AudioMixer, string,
                UnityEngine.Audio.AudioMixerSnapshot> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Audio.AudioMixer, string,
                    UnityEngine.Audio.AudioMixerSnapshot>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Audio.AudioMixer), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixer.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixer_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Audio.AudioMixer.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixer_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Audio.AudioMixer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixer.outputAudioMixerGroup
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixer_outputAudioMixerGroup()
        {
            global::UnityEngine.Audio.AudioMixer target = default(global::UnityEngine.Audio.AudioMixer);
            global::UnityEngine.Audio.AudioMixerGroup accessor = target.outputAudioMixerGroup;
            target.outputAudioMixerGroup = default(global::UnityEngine.Audio.AudioMixerGroup);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Audio.AudioMixer,
                    UnityEngine.Audio.AudioMixerGroup>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Audio.AudioMixer,
                        UnityEngine.Audio.AudioMixerGroup>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Audio.AudioMixer));
            optimized.SetValue(default(global::UnityEngine.Audio.AudioMixer),
                default(global::UnityEngine.Audio.AudioMixerGroup));
        }

        // UnityEngine.Audio.AudioMixer.SetFloat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixer_SetFloat()
        {
            global::UnityEngine.Audio.AudioMixer target = default(global::UnityEngine.Audio.AudioMixer);
            string arg0 = default(string);
            float arg1 = default(float);
            target.SetFloat(arg0, arg1);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Audio.AudioMixer, string, float, bool>
                optimized =
                    new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Audio.AudioMixer, string,
                        float, bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Audio.AudioMixer), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixer.updateMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixer_updateMode()
        {
            global::UnityEngine.Audio.AudioMixer target = default(global::UnityEngine.Audio.AudioMixer);
            global::UnityEngine.Audio.AudioMixerUpdateMode accessor = target.updateMode;
            target.updateMode = default(global::UnityEngine.Audio.AudioMixerUpdateMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Audio.AudioMixer,
                    UnityEngine.Audio.AudioMixerUpdateMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Audio.AudioMixer,
                        UnityEngine.Audio.AudioMixerUpdateMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Audio.AudioMixer));
            optimized.SetValue(default(global::UnityEngine.Audio.AudioMixer),
                default(global::UnityEngine.Audio.AudioMixerUpdateMode));
        }

        // UnityEngine.Audio.AudioMixerGroup.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixerGroup_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixerGroup.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixerGroup_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixerGroup.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixerGroup_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixerSnapshot.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixerSnapshot_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixerSnapshot.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixerSnapshot_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixerSnapshot.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixerSnapshot_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Audio.AudioMixerSnapshot.TransitionTo
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Audio_AudioMixerSnapshot_TransitionTo()
        {
            global::UnityEngine.Audio.AudioMixerSnapshot target = default(global::UnityEngine.Audio.AudioMixerSnapshot);
            float arg0 = default(float);
            target.TransitionTo(arg0);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Audio.AudioMixerSnapshot, float> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Audio.AudioMixerSnapshot, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Audio.AudioMixerSnapshot), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioBehaviour.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.AudioBehaviour.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.AudioBehaviour.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.AudioBehaviour.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.AudioBehaviour.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.AudioBehaviour.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioBehaviour.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioBehaviour.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioBehaviour.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.AudioBehaviour.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioBehaviour_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.AudioChorusFilter.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioChorusFilter_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioChorusFilter.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioChorusFilter_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioChorusFilter.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioChorusFilter_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioClip.ambisonic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_ambisonic()
        {
            global::UnityEngine.AudioClip target = default(global::UnityEngine.AudioClip);
            bool accessor = target.ambisonic;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioClip.channels
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_channels()
        {
            global::UnityEngine.AudioClip target = default(global::UnityEngine.AudioClip);
            int accessor = target.channels;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioClip.frequency
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_frequency()
        {
            global::UnityEngine.AudioClip target = default(global::UnityEngine.AudioClip);
            int accessor = target.frequency;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioClip.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.AudioClip.length
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_length()
        {
            global::UnityEngine.AudioClip target = default(global::UnityEngine.AudioClip);
            float accessor = target.length;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioClip.loadInBackground
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_loadInBackground()
        {
            global::UnityEngine.AudioClip target = default(global::UnityEngine.AudioClip);
            bool accessor = target.loadInBackground;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioClip.loadState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_loadState()
        {
            global::UnityEngine.AudioClip target = default(global::UnityEngine.AudioClip);
            global::UnityEngine.AudioDataLoadState accessor = target.loadState;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip,
                UnityEngine.AudioDataLoadState> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip,
                    UnityEngine.AudioDataLoadState>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioClip.loadType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_loadType()
        {
            global::UnityEngine.AudioClip target = default(global::UnityEngine.AudioClip);
            global::UnityEngine.AudioClipLoadType accessor = target.loadType;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, UnityEngine.AudioClipLoadType>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip,
                        UnityEngine.AudioClipLoadType>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioClip.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.AudioClip.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioClip.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioClip.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioClip.preloadAudioData
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_preloadAudioData()
        {
            global::UnityEngine.AudioClip target = default(global::UnityEngine.AudioClip);
            bool accessor = target.preloadAudioData;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioClip.samples
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioClip_samples()
        {
            global::UnityEngine.AudioClip target = default(global::UnityEngine.AudioClip);
            int accessor = target.samples;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioClip, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioDistortionFilter.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioDistortionFilter_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioDistortionFilter.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioDistortionFilter_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioDistortionFilter.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioDistortionFilter_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioEchoFilter.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioEchoFilter_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioEchoFilter.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioEchoFilter_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioEchoFilter.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioEchoFilter_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioHighPassFilter.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioHighPassFilter_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioHighPassFilter.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioHighPassFilter_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioHighPassFilter.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioHighPassFilter_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioListener.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.AudioListener.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.AudioListener.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.AudioListener.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.AudioListener.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.AudioListener.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioListener.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioListener.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioListener.pause
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_pause()
        {
            bool accessor = global::UnityEngine.AudioListener.pause;
            global::UnityEngine.AudioListener.pause = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.AudioListener.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.AudioListener.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.AudioListener.velocityUpdateMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_velocityUpdateMode()
        {
            global::UnityEngine.AudioListener target = default(global::UnityEngine.AudioListener);
            global::UnityEngine.AudioVelocityUpdateMode accessor = target.velocityUpdateMode;
            target.velocityUpdateMode = default(global::UnityEngine.AudioVelocityUpdateMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioListener,
                    UnityEngine.AudioVelocityUpdateMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioListener,
                        UnityEngine.AudioVelocityUpdateMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioListener));
            optimized.SetValue(default(global::UnityEngine.AudioListener),
                default(global::UnityEngine.AudioVelocityUpdateMode));
        }

        // UnityEngine.AudioListener.volume
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioListener_volume()
        {
            float accessor = global::UnityEngine.AudioListener.volume;
            global::UnityEngine.AudioListener.volume = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.AudioLowPassFilter.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioLowPassFilter_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioLowPassFilter.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioLowPassFilter_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioLowPassFilter.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioLowPassFilter_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioReverbFilter.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioReverbFilter_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioReverbFilter.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioReverbFilter_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioReverbFilter.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioReverbFilter_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioReverbZone.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioReverbZone_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioReverbZone.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioReverbZone_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioReverbZone.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioReverbZone_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioSource.bypassEffects
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_bypassEffects()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.bypassEffects;
            target.bypassEffects = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.bypassListenerEffects
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_bypassListenerEffects()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.bypassListenerEffects;
            target.bypassListenerEffects = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.bypassReverbZones
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_bypassReverbZones()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.bypassReverbZones;
            target.bypassReverbZones = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.clip
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_clip()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            global::UnityEngine.AudioClip accessor = target.clip;
            target.clip = default(global::UnityEngine.AudioClip);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, UnityEngine.AudioClip>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource,
                        UnityEngine.AudioClip>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(global::UnityEngine.AudioClip));
        }

        // UnityEngine.AudioSource.dopplerLevel
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_dopplerLevel()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.dopplerLevel;
            target.dopplerLevel = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.AudioSource.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.AudioSource.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.AudioSource.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.AudioSource.ignoreListenerPause
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_ignoreListenerPause()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.ignoreListenerPause;
            target.ignoreListenerPause = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.ignoreListenerVolume
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_ignoreListenerVolume()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.ignoreListenerVolume;
            target.ignoreListenerVolume = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.AudioSource.isPlaying
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_isPlaying()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.isPlaying;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
        }

        // UnityEngine.AudioSource.isVirtual
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_isVirtual()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.isVirtual;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
        }

        // UnityEngine.AudioSource.loop
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_loop()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.loop;
            target.loop = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.maxDistance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_maxDistance()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.maxDistance;
            target.maxDistance = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.AudioSource.minDistance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_minDistance()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.minDistance;
            target.minDistance = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.AudioSource.mute
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_mute()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.mute;
            target.mute = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.AudioSource.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioSource.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioSource.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AudioSource.outputAudioMixerGroup
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_outputAudioMixerGroup()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            global::UnityEngine.Audio.AudioMixerGroup accessor = target.outputAudioMixerGroup;
            target.outputAudioMixerGroup = default(global::UnityEngine.Audio.AudioMixerGroup);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource,
                UnityEngine.Audio.AudioMixerGroup> optimized
                = new
                    global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource,
                        UnityEngine.Audio.AudioMixerGroup>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource),
                default(global::UnityEngine.Audio.AudioMixerGroup));
        }

        // UnityEngine.AudioSource.panStereo
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_panStereo()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.panStereo;
            target.panStereo = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.AudioSource.pitch
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_pitch()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.pitch;
            target.pitch = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.AudioSource.playOnAwake
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_playOnAwake()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.playOnAwake;
            target.playOnAwake = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.priority
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_priority()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            int accessor = target.priority;
            target.priority = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(int));
        }

        // UnityEngine.AudioSource.reverbZoneMix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_reverbZoneMix()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.reverbZoneMix;
            target.reverbZoneMix = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.AudioSource.rolloffMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_rolloffMode()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            global::UnityEngine.AudioRolloffMode accessor = target.rolloffMode;
            target.rolloffMode = default(global::UnityEngine.AudioRolloffMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource,
                UnityEngine.AudioRolloffMode> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource,
                    UnityEngine.AudioRolloffMode>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(global::UnityEngine.AudioRolloffMode));
        }

        // UnityEngine.AudioSource.spatialBlend
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_spatialBlend()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.spatialBlend;
            target.spatialBlend = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.AudioSource.spatialize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_spatialize()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.spatialize;
            target.spatialize = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.spatializePostEffects
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_spatializePostEffects()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            bool accessor = target.spatializePostEffects;
            target.spatializePostEffects = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(bool));
        }

        // UnityEngine.AudioSource.spread
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_spread()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.spread;
            target.spread = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.AudioSource.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.AudioSource.time
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_time()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.time;
            target.time = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.AudioSource.timeSamples
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_timeSamples()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            int accessor = target.timeSamples;
            target.timeSamples = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(int));
        }

        // UnityEngine.AudioSource.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.AudioSource.velocityUpdateMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_velocityUpdateMode()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            global::UnityEngine.AudioVelocityUpdateMode accessor = target.velocityUpdateMode;
            target.velocityUpdateMode = default(global::UnityEngine.AudioVelocityUpdateMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource,
                    UnityEngine.AudioVelocityUpdateMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource,
                        UnityEngine.AudioVelocityUpdateMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource),
                default(global::UnityEngine.AudioVelocityUpdateMode));
        }

        // UnityEngine.AudioSource.volume
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AudioSource_volume()
        {
            global::UnityEngine.AudioSource target = default(global::UnityEngine.AudioSource);
            float accessor = target.volume;
            target.volume = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.AudioSource, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.AudioSource));
            optimized.SetValue(default(global::UnityEngine.AudioSource), default(float));
        }

        // UnityEngine.Avatar.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Avatar_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Avatar.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Avatar_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Avatar.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Avatar_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AvatarMask.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AvatarMask_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AvatarMask.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AvatarMask_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.AvatarMask.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_AvatarMask_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Behaviour.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Behaviour_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Behaviour.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Behaviour_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Behaviour.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Behaviour_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BillboardAsset.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BillboardAsset_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BillboardAsset.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BillboardAsset_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BillboardAsset.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BillboardAsset_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BillboardRenderer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BillboardRenderer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BillboardRenderer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BillboardRenderer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BillboardRenderer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BillboardRenderer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Bounds.center
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Bounds_center()
        {
            global::UnityEngine.Bounds target = default(global::UnityEngine.Bounds);
            global::UnityEngine.Vector3 accessor = target.center;
            target.center = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Bounds));
            optimized.SetValue(default(global::UnityEngine.Bounds), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Bounds.extents
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Bounds_extents()
        {
            global::UnityEngine.Bounds target = default(global::UnityEngine.Bounds);
            global::UnityEngine.Vector3 accessor = target.extents;
            target.extents = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Bounds));
            optimized.SetValue(default(global::UnityEngine.Bounds), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Bounds.max
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Bounds_max()
        {
            global::UnityEngine.Bounds target = default(global::UnityEngine.Bounds);
            global::UnityEngine.Vector3 accessor = target.max;
            target.max = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Bounds));
            optimized.SetValue(default(global::UnityEngine.Bounds), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Bounds.min
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Bounds_min()
        {
            global::UnityEngine.Bounds target = default(global::UnityEngine.Bounds);
            global::UnityEngine.Vector3 accessor = target.min;
            target.min = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Bounds));
            optimized.SetValue(default(global::UnityEngine.Bounds), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Bounds.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Bounds_op_Equality()
        {
            global::UnityEngine.Bounds arg0 = default(global::UnityEngine.Bounds);
            global::UnityEngine.Bounds arg1 = default(global::UnityEngine.Bounds);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Bounds, UnityEngine.Bounds, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Bounds, UnityEngine.Bounds,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Bounds.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Bounds_op_Inequality()
        {
            global::UnityEngine.Bounds arg0 = default(global::UnityEngine.Bounds);
            global::UnityEngine.Bounds arg1 = default(global::UnityEngine.Bounds);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Bounds, UnityEngine.Bounds, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Bounds, UnityEngine.Bounds,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Bounds.size
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Bounds_size()
        {
            global::UnityEngine.Bounds target = default(global::UnityEngine.Bounds);
            global::UnityEngine.Vector3 accessor = target.size;
            target.size = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Bounds));
            optimized.SetValue(default(global::UnityEngine.Bounds), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.BoxCollider.attachedArticulationBody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_attachedArticulationBody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.ArticulationBody accessor = target.attachedArticulationBody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.ArticulationBody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.ArticulationBody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.BoxCollider.attachedRigidbody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_attachedRigidbody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Rigidbody accessor = target.attachedRigidbody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Rigidbody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.Rigidbody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.BoxCollider.bounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_bounds()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Bounds accessor = target.bounds;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.BoxCollider.center
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_center()
        {
            global::UnityEngine.BoxCollider target = default(global::UnityEngine.BoxCollider);
            global::UnityEngine.Vector3 accessor = target.center;
            target.center = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.BoxCollider, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.BoxCollider,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.BoxCollider));
            optimized.SetValue(default(global::UnityEngine.BoxCollider), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.BoxCollider.contactOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_contactOffset()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            float accessor = target.contactOffset;
            target.contactOffset = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(float));
        }

        // UnityEngine.BoxCollider.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_enabled()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.BoxCollider.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.BoxCollider.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.BoxCollider.isTrigger
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_isTrigger()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.isTrigger;
            target.isTrigger = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.BoxCollider.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_material()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.material;
            target.material = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.BoxCollider.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.BoxCollider.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BoxCollider.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BoxCollider.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BoxCollider.sharedMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_sharedMaterial()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.sharedMaterial;
            target.sharedMaterial = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.BoxCollider.size
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_size()
        {
            global::UnityEngine.BoxCollider target = default(global::UnityEngine.BoxCollider);
            global::UnityEngine.Vector3 accessor = target.size;
            target.size = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.BoxCollider, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.BoxCollider,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.BoxCollider));
            optimized.SetValue(default(global::UnityEngine.BoxCollider), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.BoxCollider.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.BoxCollider.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.BoxCollider2D.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider2D_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.BoxCollider2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BoxCollider2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BoxCollider2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BoxCollider2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BuoyancyEffector2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BuoyancyEffector2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BuoyancyEffector2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BuoyancyEffector2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.BuoyancyEffector2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_BuoyancyEffector2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Camera.activeTexture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_activeTexture()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.RenderTexture accessor = target.activeTexture;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.RenderTexture>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.RenderTexture>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.actualRenderingPath
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_actualRenderingPath()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.RenderingPath accessor = target.actualRenderingPath;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.RenderingPath>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.RenderingPath>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.allCameras
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_allCameras()
        {
            UnityEngine.Camera[] accessor = global::UnityEngine.Camera.allCameras;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Camera[]> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Camera[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Camera.allCamerasCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_allCamerasCount()
        {
            int accessor = global::UnityEngine.Camera.allCamerasCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Camera.allowDynamicResolution
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_allowDynamicResolution()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.allowDynamicResolution;
            target.allowDynamicResolution = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.allowHDR
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_allowHDR()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.allowHDR;
            target.allowHDR = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.allowMSAA
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_allowMSAA()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.allowMSAA;
            target.allowMSAA = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.areVRStereoViewMatricesWithinSingleCullTolerance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_areVRStereoViewMatricesWithinSingleCullTolerance()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.areVRStereoViewMatricesWithinSingleCullTolerance;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.aspect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_aspect()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float accessor = target.aspect;
            target.aspect = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float));
        }

        // UnityEngine.Camera.backgroundColor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_backgroundColor()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Color accessor = target.backgroundColor;
            target.backgroundColor = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Color));
        }

        // UnityEngine.Camera.cameraToWorldMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_cameraToWorldMatrix()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Matrix4x4 accessor = target.cameraToWorldMatrix;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.cameraType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_cameraType()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.CameraType accessor = target.cameraType;
            target.cameraType = default(global::UnityEngine.CameraType);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.CameraType>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.CameraType>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.CameraType));
        }

        // UnityEngine.Camera.clearFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_clearFlags()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.CameraClearFlags accessor = target.clearFlags;
            target.clearFlags = default(global::UnityEngine.CameraClearFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.CameraClearFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.CameraClearFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.CameraClearFlags));
        }

        // UnityEngine.Camera.clearStencilAfterLightingPass
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_clearStencilAfterLightingPass()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.clearStencilAfterLightingPass;
            target.clearStencilAfterLightingPass = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.commandBufferCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_commandBufferCount()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            int accessor = target.commandBufferCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.cullingMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_cullingMask()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            int accessor = target.cullingMask;
            target.cullingMask = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(int));
        }

        // UnityEngine.Camera.cullingMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_cullingMatrix()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Matrix4x4 accessor = target.cullingMatrix;
            target.cullingMatrix = default(global::UnityEngine.Matrix4x4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Matrix4x4));
        }

        // UnityEngine.Camera.current
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_current()
        {
            global::UnityEngine.Camera accessor = global::UnityEngine.Camera.current;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Camera> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Camera>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Camera.depth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_depth()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float accessor = target.depth;
            target.depth = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float));
        }

        // UnityEngine.Camera.depthTextureMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_depthTextureMode()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.DepthTextureMode accessor = target.depthTextureMode;
            target.depthTextureMode = default(global::UnityEngine.DepthTextureMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.DepthTextureMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.DepthTextureMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.DepthTextureMode));
        }

        // UnityEngine.Camera.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Camera.eventMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_eventMask()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            int accessor = target.eventMask;
            target.eventMask = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(int));
        }

        // UnityEngine.Camera.farClipPlane
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_farClipPlane()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float accessor = target.farClipPlane;
            target.farClipPlane = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float));
        }

        // UnityEngine.Camera.fieldOfView
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_fieldOfView()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float accessor = target.fieldOfView;
            target.fieldOfView = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float));
        }

        // UnityEngine.Camera.focalLength
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_focalLength()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float accessor = target.focalLength;
            target.focalLength = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float));
        }

        // UnityEngine.Camera.forceIntoRenderTexture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_forceIntoRenderTexture()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.forceIntoRenderTexture;
            target.forceIntoRenderTexture = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Camera.gateFit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_gateFit()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Camera.GateFitMode accessor = target.gateFit;
            target.gateFit = default(global::UnityEngine.Camera.GateFitMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Camera.GateFitMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.Camera.GateFitMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Camera.GateFitMode));
        }

        // UnityEngine.Camera.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Camera.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Camera.layerCullDistances
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_layerCullDistances()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float[] accessor = target.layerCullDistances;
            target.layerCullDistances = default(float[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float[]));
        }

        // UnityEngine.Camera.layerCullSpherical
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_layerCullSpherical()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.layerCullSpherical;
            target.layerCullSpherical = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.lensShift
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_lensShift()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Vector2 accessor = target.lensShift;
            target.lensShift = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Camera.main
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_main()
        {
            global::UnityEngine.Camera accessor = global::UnityEngine.Camera.main;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Camera> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Camera>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Camera.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Camera.nearClipPlane
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_nearClipPlane()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float accessor = target.nearClipPlane;
            target.nearClipPlane = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float));
        }

        // UnityEngine.Camera.nonJitteredProjectionMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_nonJitteredProjectionMatrix()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Matrix4x4 accessor = target.nonJitteredProjectionMatrix;
            target.nonJitteredProjectionMatrix = default(global::UnityEngine.Matrix4x4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Matrix4x4));
        }

        // UnityEngine.Camera.onPostRender
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_onPostRender()
        {
            global::UnityEngine.Camera.CameraCallback accessor = global::UnityEngine.Camera.onPostRender;
            global::UnityEngine.Camera.onPostRender = default(global::UnityEngine.Camera.CameraCallback);
            global::Unity.VisualScripting.StaticFieldAccessor<UnityEngine.Camera.CameraCallback> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<UnityEngine.Camera.CameraCallback>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.Camera.CameraCallback));
        }

        // UnityEngine.Camera.onPreCull
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_onPreCull()
        {
            global::UnityEngine.Camera.CameraCallback accessor = global::UnityEngine.Camera.onPreCull;
            global::UnityEngine.Camera.onPreCull = default(global::UnityEngine.Camera.CameraCallback);
            global::Unity.VisualScripting.StaticFieldAccessor<UnityEngine.Camera.CameraCallback> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<UnityEngine.Camera.CameraCallback>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.Camera.CameraCallback));
        }

        // UnityEngine.Camera.onPreRender
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_onPreRender()
        {
            global::UnityEngine.Camera.CameraCallback accessor = global::UnityEngine.Camera.onPreRender;
            global::UnityEngine.Camera.onPreRender = default(global::UnityEngine.Camera.CameraCallback);
            global::Unity.VisualScripting.StaticFieldAccessor<UnityEngine.Camera.CameraCallback> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<UnityEngine.Camera.CameraCallback>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.Camera.CameraCallback));
        }

        // UnityEngine.Camera.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Camera.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Camera.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Camera.opaqueSortMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_opaqueSortMode()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Rendering.OpaqueSortMode accessor = target.opaqueSortMode;
            target.opaqueSortMode = default(global::UnityEngine.Rendering.OpaqueSortMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                UnityEngine.Rendering.OpaqueSortMode> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                    UnityEngine.Rendering.OpaqueSortMode>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera),
                default(global::UnityEngine.Rendering.OpaqueSortMode));
        }

        // UnityEngine.Camera.orthographic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_orthographic()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.orthographic;
            target.orthographic = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.orthographicSize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_orthographicSize()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float accessor = target.orthographicSize;
            target.orthographicSize = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float));
        }

        // UnityEngine.Camera.overrideSceneCullingMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_overrideSceneCullingMask()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            ulong accessor = target.overrideSceneCullingMask;
            target.overrideSceneCullingMask = default(ulong);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, ulong> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(ulong));
        }

        // UnityEngine.Camera.pixelHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_pixelHeight()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            int accessor = target.pixelHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.pixelRect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_pixelRect()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Rect accessor = target.pixelRect;
            target.pixelRect = default(global::UnityEngine.Rect);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Rect> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Rect>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Rect));
        }

        // UnityEngine.Camera.pixelWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_pixelWidth()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            int accessor = target.pixelWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.previousViewProjectionMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_previousViewProjectionMatrix()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Matrix4x4 accessor = target.previousViewProjectionMatrix;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.projectionMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_projectionMatrix()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Matrix4x4 accessor = target.projectionMatrix;
            target.projectionMatrix = default(global::UnityEngine.Matrix4x4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Matrix4x4));
        }

        // UnityEngine.Camera.rect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_rect()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Rect accessor = target.rect;
            target.rect = default(global::UnityEngine.Rect);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Rect> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Rect>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Rect));
        }

        // UnityEngine.Camera.renderingPath
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_renderingPath()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.RenderingPath accessor = target.renderingPath;
            target.renderingPath = default(global::UnityEngine.RenderingPath);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.RenderingPath>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.RenderingPath>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.RenderingPath));
        }

        // UnityEngine.Camera.scaledPixelHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_scaledPixelHeight()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            int accessor = target.scaledPixelHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.scaledPixelWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_scaledPixelWidth()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            int accessor = target.scaledPixelWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.scene
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_scene()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.SceneManagement.Scene accessor = target.scene;
            target.scene = default(global::UnityEngine.SceneManagement.Scene);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                UnityEngine.SceneManagement.Scene> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                    UnityEngine.SceneManagement.Scene>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.SceneManagement.Scene));
        }

        // UnityEngine.Camera.ScreenPointToRay
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_ScreenPointToRay()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            target.ScreenPointToRay(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Camera, UnityEngine.Vector3,
                UnityEngine.Ray> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Camera, UnityEngine.Vector3,
                    UnityEngine.Ray>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Camera), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Camera.ScreenToWorldPoint
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_ScreenToWorldPoint()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            target.ScreenToWorldPoint(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Camera, UnityEngine.Vector3,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Camera, UnityEngine.Vector3,
                        UnityEngine.Vector3>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Camera), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Camera.sensorSize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_sensorSize()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Vector2 accessor = target.sensorSize;
            target.sensorSize = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Camera.stereoActiveEye
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_stereoActiveEye()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Camera.MonoOrStereoscopicEye accessor = target.stereoActiveEye;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                    UnityEngine.Camera.MonoOrStereoscopicEye>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.Camera.MonoOrStereoscopicEye>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.stereoConvergence
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_stereoConvergence()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float accessor = target.stereoConvergence;
            target.stereoConvergence = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float));
        }

        // UnityEngine.Camera.stereoEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_stereoEnabled()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.stereoEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.stereoSeparation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_stereoSeparation()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            float accessor = target.stereoSeparation;
            target.stereoSeparation = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(float));
        }

        // UnityEngine.Camera.stereoTargetEye
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_stereoTargetEye()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.StereoTargetEyeMask accessor = target.stereoTargetEye;
            target.stereoTargetEye = default(global::UnityEngine.StereoTargetEyeMask);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.StereoTargetEyeMask>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.StereoTargetEyeMask>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.StereoTargetEyeMask));
        }

        // UnityEngine.Camera.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Camera.targetDisplay
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_targetDisplay()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            int accessor = target.targetDisplay;
            target.targetDisplay = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(int));
        }

        // UnityEngine.Camera.targetTexture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_targetTexture()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.RenderTexture accessor = target.targetTexture;
            target.targetTexture = default(global::UnityEngine.RenderTexture);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.RenderTexture>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.RenderTexture>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.RenderTexture));
        }

        // UnityEngine.Camera.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Camera.transparencySortAxis
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_transparencySortAxis()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Vector3 accessor = target.transparencySortAxis;
            target.transparencySortAxis = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Camera.transparencySortMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_transparencySortMode()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.TransparencySortMode accessor = target.transparencySortMode;
            target.transparencySortMode = default(global::UnityEngine.TransparencySortMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.TransparencySortMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.TransparencySortMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.TransparencySortMode));
        }

        // UnityEngine.Camera.useJitteredProjectionMatrixForTransparentRendering
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_useJitteredProjectionMatrixForTransparentRendering()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.useJitteredProjectionMatrixForTransparentRendering;
            target.useJitteredProjectionMatrixForTransparentRendering = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.useOcclusionCulling
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_useOcclusionCulling()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.useOcclusionCulling;
            target.useOcclusionCulling = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.usePhysicalProperties
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_usePhysicalProperties()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            bool accessor = target.usePhysicalProperties;
            target.usePhysicalProperties = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(bool));
        }

        // UnityEngine.Camera.velocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_velocity()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Vector3 accessor = target.velocity;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
        }

        // UnityEngine.Camera.worldToCameraMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_worldToCameraMatrix()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Matrix4x4 accessor = target.worldToCameraMatrix;
            target.worldToCameraMatrix = default(global::UnityEngine.Matrix4x4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Camera,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Camera));
            optimized.SetValue(default(global::UnityEngine.Camera), default(global::UnityEngine.Matrix4x4));
        }

        // UnityEngine.Camera.WorldToScreenPoint
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Camera_WorldToScreenPoint()
        {
            global::UnityEngine.Camera target = default(global::UnityEngine.Camera);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            target.WorldToScreenPoint(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Camera, UnityEngine.Vector3,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Camera, UnityEngine.Vector3,
                        UnityEngine.Vector3>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Camera), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Canvas.additionalShaderChannels
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_additionalShaderChannels()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            global::UnityEngine.AdditionalCanvasShaderChannels accessor = target.additionalShaderChannels;
            target.additionalShaderChannels = default(global::UnityEngine.AdditionalCanvasShaderChannels);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas,
                    UnityEngine.AdditionalCanvasShaderChannels>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas,
                        UnityEngine.AdditionalCanvasShaderChannels>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas),
                default(global::UnityEngine.AdditionalCanvasShaderChannels));
        }

        // UnityEngine.Canvas.cachedSortingLayerValue
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_cachedSortingLayerValue()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            int accessor = target.cachedSortingLayerValue;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
        }

        // UnityEngine.Canvas.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Canvas.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Canvas.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Canvas.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Canvas.isRootCanvas
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_isRootCanvas()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            bool accessor = target.isRootCanvas;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
        }

        // UnityEngine.Canvas.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Canvas.normalizedSortingGridSize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_normalizedSortingGridSize()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            float accessor = target.normalizedSortingGridSize;
            target.normalizedSortingGridSize = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(float));
        }

        // UnityEngine.Canvas.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Canvas.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Canvas.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Canvas.overridePixelPerfect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_overridePixelPerfect()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            bool accessor = target.overridePixelPerfect;
            target.overridePixelPerfect = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(bool));
        }

        // UnityEngine.Canvas.overrideSorting
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_overrideSorting()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            bool accessor = target.overrideSorting;
            target.overrideSorting = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(bool));
        }

        // UnityEngine.Canvas.pixelPerfect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_pixelPerfect()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            bool accessor = target.pixelPerfect;
            target.pixelPerfect = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(bool));
        }

        // UnityEngine.Canvas.pixelRect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_pixelRect()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            global::UnityEngine.Rect accessor = target.pixelRect;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, UnityEngine.Rect> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, UnityEngine.Rect>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
        }

        // UnityEngine.Canvas.planeDistance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_planeDistance()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            float accessor = target.planeDistance;
            target.planeDistance = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(float));
        }

        // UnityEngine.Canvas.referencePixelsPerUnit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_referencePixelsPerUnit()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            float accessor = target.referencePixelsPerUnit;
            target.referencePixelsPerUnit = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(float));
        }

        // UnityEngine.Canvas.renderingDisplaySize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_renderingDisplaySize()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            global::UnityEngine.Vector2 accessor = target.renderingDisplaySize;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
        }

        // UnityEngine.Canvas.renderMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_renderMode()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            global::UnityEngine.RenderMode accessor = target.renderMode;
            target.renderMode = default(global::UnityEngine.RenderMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, UnityEngine.RenderMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas,
                        UnityEngine.RenderMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(global::UnityEngine.RenderMode));
        }

        // UnityEngine.Canvas.renderOrder
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_renderOrder()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            int accessor = target.renderOrder;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
        }

        // UnityEngine.Canvas.rootCanvas
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_rootCanvas()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            global::UnityEngine.Canvas accessor = target.rootCanvas;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, UnityEngine.Canvas> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, UnityEngine.Canvas>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
        }

        // UnityEngine.Canvas.scaleFactor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_scaleFactor()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            float accessor = target.scaleFactor;
            target.scaleFactor = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(float));
        }

        // UnityEngine.Canvas.sortingLayerID
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_sortingLayerID()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            int accessor = target.sortingLayerID;
            target.sortingLayerID = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(int));
        }

        // UnityEngine.Canvas.sortingLayerName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_sortingLayerName()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            string accessor = target.sortingLayerName;
            target.sortingLayerName = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(string));
        }

        // UnityEngine.Canvas.sortingOrder
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_sortingOrder()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            int accessor = target.sortingOrder;
            target.sortingOrder = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(int));
        }

        // UnityEngine.Canvas.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Canvas.targetDisplay
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_targetDisplay()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            int accessor = target.targetDisplay;
            target.targetDisplay = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(int));
        }

        // UnityEngine.Canvas.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Canvas.worldCamera
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Canvas_worldCamera()
        {
            global::UnityEngine.Canvas target = default(global::UnityEngine.Canvas);
            global::UnityEngine.Camera accessor = target.worldCamera;
            target.worldCamera = default(global::UnityEngine.Camera);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, UnityEngine.Camera> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Canvas, UnityEngine.Camera>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Canvas));
            optimized.SetValue(default(global::UnityEngine.Canvas), default(global::UnityEngine.Camera));
        }

        // UnityEngine.CanvasGroup.alpha
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CanvasGroup_alpha()
        {
            global::UnityEngine.CanvasGroup target = default(global::UnityEngine.CanvasGroup);
            float accessor = target.alpha;
            target.alpha = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CanvasGroup, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CanvasGroup, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CanvasGroup));
            optimized.SetValue(default(global::UnityEngine.CanvasGroup), default(float));
        }

        // UnityEngine.CanvasGroup.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CanvasGroup_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CanvasGroup.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CanvasGroup_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CanvasGroup.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CanvasGroup_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CanvasRenderer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CanvasRenderer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CanvasRenderer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CanvasRenderer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CanvasRenderer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CanvasRenderer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CapsuleCollider.attachedArticulationBody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_attachedArticulationBody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.ArticulationBody accessor = target.attachedArticulationBody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.ArticulationBody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.ArticulationBody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.CapsuleCollider.attachedRigidbody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_attachedRigidbody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Rigidbody accessor = target.attachedRigidbody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Rigidbody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.Rigidbody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.CapsuleCollider.bounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_bounds()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Bounds accessor = target.bounds;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.CapsuleCollider.center
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_center()
        {
            global::UnityEngine.CapsuleCollider target = default(global::UnityEngine.CapsuleCollider);
            global::UnityEngine.Vector3 accessor = target.center;
            target.center = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CapsuleCollider, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CapsuleCollider,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CapsuleCollider));
            optimized.SetValue(default(global::UnityEngine.CapsuleCollider), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.CapsuleCollider.contactOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_contactOffset()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            float accessor = target.contactOffset;
            target.contactOffset = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(float));
        }

        // UnityEngine.CapsuleCollider.direction
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_direction()
        {
            global::UnityEngine.CapsuleCollider target = default(global::UnityEngine.CapsuleCollider);
            int accessor = target.direction;
            target.direction = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CapsuleCollider, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CapsuleCollider, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CapsuleCollider));
            optimized.SetValue(default(global::UnityEngine.CapsuleCollider), default(int));
        }

        // UnityEngine.CapsuleCollider.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_enabled()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.CapsuleCollider.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.CapsuleCollider.height
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_height()
        {
            global::UnityEngine.CapsuleCollider target = default(global::UnityEngine.CapsuleCollider);
            float accessor = target.height;
            target.height = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CapsuleCollider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CapsuleCollider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CapsuleCollider));
            optimized.SetValue(default(global::UnityEngine.CapsuleCollider), default(float));
        }

        // UnityEngine.CapsuleCollider.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.CapsuleCollider.isTrigger
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_isTrigger()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.isTrigger;
            target.isTrigger = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.CapsuleCollider.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_material()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.material;
            target.material = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.CapsuleCollider.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.CapsuleCollider.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CapsuleCollider.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CapsuleCollider.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CapsuleCollider.radius
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_radius()
        {
            global::UnityEngine.CapsuleCollider target = default(global::UnityEngine.CapsuleCollider);
            float accessor = target.radius;
            target.radius = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CapsuleCollider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.CapsuleCollider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.CapsuleCollider));
            optimized.SetValue(default(global::UnityEngine.CapsuleCollider), default(float));
        }

        // UnityEngine.CapsuleCollider.sharedMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_sharedMaterial()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.sharedMaterial;
            target.sharedMaterial = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.CapsuleCollider.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.CapsuleCollider.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.CapsuleCollider2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CapsuleCollider2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CapsuleCollider2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CapsuleCollider2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CharacterJoint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterJoint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CharacterJoint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterJoint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CharacterJoint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CharacterJoint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CircleCollider2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CircleCollider2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CircleCollider2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CircleCollider2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CircleCollider2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CircleCollider2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Cloth.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Cloth_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Cloth.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Cloth_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Cloth.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Cloth_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Collider.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Collider.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Collider.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Collider2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Collider2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Collider2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Collider2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color..ctor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_ctor()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            float arg3 = default(float);
            new UnityEngine.Color(arg0, arg1, arg2, arg3);
        }

        // UnityEngine.Color..ctor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_ctor_0()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            new UnityEngine.Color(arg0, arg1, arg2);
        }

        // UnityEngine.Color.a
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_a()
        {
            global::UnityEngine.Color target = default(global::UnityEngine.Color);
            float accessor = target.a;
            target.a = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Color));
            optimized.SetValue(default(global::UnityEngine.Color), default(float));
        }

        // UnityEngine.Color.b
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_b()
        {
            global::UnityEngine.Color target = default(global::UnityEngine.Color);
            float accessor = target.b;
            target.b = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Color));
            optimized.SetValue(default(global::UnityEngine.Color), default(float));
        }

        // UnityEngine.Color.black
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_black()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.black;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.blue
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_blue()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.blue;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.clear
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_clear()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.clear;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.cyan
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_cyan()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.cyan;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.g
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_g()
        {
            global::UnityEngine.Color target = default(global::UnityEngine.Color);
            float accessor = target.g;
            target.g = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Color));
            optimized.SetValue(default(global::UnityEngine.Color), default(float));
        }

        // UnityEngine.Color.gamma
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_gamma()
        {
            global::UnityEngine.Color target = default(global::UnityEngine.Color);
            global::UnityEngine.Color accessor = target.gamma;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Color));
        }

        // UnityEngine.Color.gray
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_gray()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.gray;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.grayscale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_grayscale()
        {
            global::UnityEngine.Color target = default(global::UnityEngine.Color);
            float accessor = target.grayscale;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Color));
        }

        // UnityEngine.Color.green
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_green()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.green;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.grey
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_grey()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.grey;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.Lerp
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_Lerp()
        {
            global::UnityEngine.Color arg0 = default(global::UnityEngine.Color);
            global::UnityEngine.Color arg1 = default(global::UnityEngine.Color);
            float arg2 = default(float);
            global::UnityEngine.Color.Lerp(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color, float,
                    UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color, float,
                        UnityEngine.Color>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.linear
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_linear()
        {
            global::UnityEngine.Color target = default(global::UnityEngine.Color);
            global::UnityEngine.Color accessor = target.linear;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Color));
        }

        // UnityEngine.Color.magenta
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_magenta()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.magenta;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.maxColorComponent
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_maxColorComponent()
        {
            global::UnityEngine.Color target = default(global::UnityEngine.Color);
            float accessor = target.maxColorComponent;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Color));
        }

        // UnityEngine.Color.op_Addition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Addition()
        {
            global::UnityEngine.Color arg0 = default(global::UnityEngine.Color);
            global::UnityEngine.Color arg1 = default(global::UnityEngine.Color);
            UnityEngine.Color @operator = (arg0 + arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color,
                        UnityEngine.Color>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.op_Division
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Division()
        {
            global::UnityEngine.Color arg0 = default(global::UnityEngine.Color);
            float arg1 = default(float);
            UnityEngine.Color @operator = (arg0 / arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, float, UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, float, UnityEngine.Color>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Equality()
        {
            global::UnityEngine.Color arg0 = default(global::UnityEngine.Color);
            global::UnityEngine.Color arg1 = default(global::UnityEngine.Color);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Implicit()
        {
            global::UnityEngine.Color arg0 = default(global::UnityEngine.Color);
            UnityEngine.Vector4 conversion = ((UnityEngine.Vector4) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Vector4>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Implicit_0()
        {
            global::UnityEngine.Vector4 arg0 = default(global::UnityEngine.Vector4);
            UnityEngine.Color conversion = ((UnityEngine.Color) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Color>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Inequality()
        {
            global::UnityEngine.Color arg0 = default(global::UnityEngine.Color);
            global::UnityEngine.Color arg1 = default(global::UnityEngine.Color);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Multiply()
        {
            global::UnityEngine.Color arg0 = default(global::UnityEngine.Color);
            global::UnityEngine.Color arg1 = default(global::UnityEngine.Color);
            UnityEngine.Color @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color,
                        UnityEngine.Color>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Multiply_0()
        {
            global::UnityEngine.Color arg0 = default(global::UnityEngine.Color);
            float arg1 = default(float);
            UnityEngine.Color @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, float, UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, float, UnityEngine.Color>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Multiply_1()
        {
            float arg0 = default(float);
            global::UnityEngine.Color arg1 = default(global::UnityEngine.Color);
            UnityEngine.Color @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Color, UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Color, UnityEngine.Color>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.op_Subtraction
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_op_Subtraction()
        {
            global::UnityEngine.Color arg0 = default(global::UnityEngine.Color);
            global::UnityEngine.Color arg1 = default(global::UnityEngine.Color);
            UnityEngine.Color @operator = (arg0 - arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Color, UnityEngine.Color,
                        UnityEngine.Color>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Color.r
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_r()
        {
            global::UnityEngine.Color target = default(global::UnityEngine.Color);
            float accessor = target.r;
            target.r = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Color));
            optimized.SetValue(default(global::UnityEngine.Color), default(float));
        }

        // UnityEngine.Color.red
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_red()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.red;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.white
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_white()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.white;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Color.yellow
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Color_yellow()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Color.yellow;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Component.Destroy
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_Destroy()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object.Destroy(arg0);
            global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Component.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Component.GetComponent
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_GetComponent()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::System.Type arg0 = default(global::System.Type);
            target.GetComponent(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Component, System.Type,
                UnityEngine.Component> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Component, System.Type,
                    UnityEngine.Component>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Component), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Component.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // // UnityEngine.Component.Instantiate
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Component_Instantiate()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
        //     global::UnityEngine.Quaternion arg2 = default(global::UnityEngine.Quaternion);
        //     global::UnityEngine.Object.Instantiate(arg0, arg1, arg2);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion,
        //         UnityEngine.Object> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion,
        //             UnityEngine.Object>(default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1, arg2);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Component.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Component.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Component.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Component.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Component.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Component.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Component_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.CompositeCollider2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CompositeCollider2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CompositeCollider2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CompositeCollider2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CompositeCollider2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CompositeCollider2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ComputeShader.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ComputeShader_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ComputeShader.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ComputeShader_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ComputeShader.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ComputeShader_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ConfigurableJoint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ConfigurableJoint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ConfigurableJoint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ConfigurableJoint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ConfigurableJoint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ConfigurableJoint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ConstantForce.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ConstantForce_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ConstantForce.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ConstantForce_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ConstantForce.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ConstantForce_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ConstantForce2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ConstantForce2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ConstantForce2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ConstantForce2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ConstantForce2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ConstantForce2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Cubemap.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Cubemap_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Cubemap.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Cubemap_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Cubemap.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Cubemap_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CubemapArray.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CubemapArray_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CubemapArray.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CubemapArray_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CubemapArray.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CubemapArray_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Cursor.lockState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Cursor_lockState()
        {
            global::UnityEngine.CursorLockMode accessor = global::UnityEngine.Cursor.lockState;
            global::UnityEngine.Cursor.lockState = default(global::UnityEngine.CursorLockMode);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.CursorLockMode> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.CursorLockMode>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.CursorLockMode));
        }

        // UnityEngine.Cursor.visible
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Cursor_visible()
        {
            bool accessor = global::UnityEngine.Cursor.visible;
            global::UnityEngine.Cursor.visible = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.CustomRenderTexture.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CustomRenderTexture_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CustomRenderTexture.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CustomRenderTexture_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.CustomRenderTexture.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_CustomRenderTexture_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Debug.developerConsoleVisible
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Debug_developerConsoleVisible()
        {
            bool accessor = global::UnityEngine.Debug.developerConsoleVisible;
            global::UnityEngine.Debug.developerConsoleVisible = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Debug.isDebugBuild
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Debug_isDebugBuild()
        {
            bool accessor = global::UnityEngine.Debug.isDebugBuild;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Debug.Log
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Debug_Log()
        {
            object arg0 = default(object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            global::UnityEngine.Debug.Log(arg0, arg1);
            global::Unity.VisualScripting.StaticActionInvoker<object, UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<object, UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Debug.Log
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Debug_Log_0()
        {
            object arg0 = default(object);
            global::UnityEngine.Debug.Log(arg0);
            global::Unity.VisualScripting.StaticActionInvoker<object> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Debug.LogError
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Debug_LogError()
        {
            object arg0 = default(object);
            global::UnityEngine.Debug.LogError(arg0);
            global::Unity.VisualScripting.StaticActionInvoker<object> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Debug.LogError
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Debug_LogError_0()
        {
            object arg0 = default(object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            global::UnityEngine.Debug.LogError(arg0, arg1);
            global::Unity.VisualScripting.StaticActionInvoker<object, UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<object, UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Debug.LogWarning
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Debug_LogWarning()
        {
            object arg0 = default(object);
            global::UnityEngine.Debug.LogWarning(arg0);
            global::Unity.VisualScripting.StaticActionInvoker<object> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Debug.LogWarning
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Debug_LogWarning_0()
        {
            object arg0 = default(object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            global::UnityEngine.Debug.LogWarning(arg0, arg1);
            global::Unity.VisualScripting.StaticActionInvoker<object, UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<object, UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Debug.unityLogger
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Debug_unityLogger()
        {
            global::UnityEngine.ILogger accessor = global::UnityEngine.Debug.unityLogger;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.ILogger> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.ILogger>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.DistanceJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_DistanceJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.DistanceJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_DistanceJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.DistanceJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_DistanceJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EdgeCollider2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EdgeCollider2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EdgeCollider2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EdgeCollider2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EdgeCollider2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EdgeCollider2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Effector2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Effector2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Effector2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Effector2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Effector2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Effector2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.BaseInput.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_BaseInput_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.BaseInput.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_BaseInput_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.BaseInput.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_BaseInput_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.EventSystem.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.EventSystem.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.EventSystem.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventSystem_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.EventTrigger.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.EventTrigger.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.EventTrigger.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_EventTrigger_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.Physics2DRaycaster.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_Physics2DRaycaster_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.Physics2DRaycaster.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_Physics2DRaycaster_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.Physics2DRaycaster.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_Physics2DRaycaster_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.PhysicsRaycaster.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_PhysicsRaycaster_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.StandaloneInputModule.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_StandaloneInputModule_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.StandaloneInputModule.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_StandaloneInputModule_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.EventSystems.StandaloneInputModule.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_EventSystems_StandaloneInputModule_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Experimental.Rendering.RayTracingShader.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Experimental_Rendering_RayTracingShader_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Experimental.Rendering.RayTracingShader.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Experimental_Rendering_RayTracingShader_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Experimental.Rendering.RayTracingShader.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Experimental_Rendering_RayTracingShader_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FixedJoint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FixedJoint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FixedJoint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FixedJoint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FixedJoint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FixedJoint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FixedJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FixedJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FixedJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FixedJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FixedJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FixedJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Flare.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Flare_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Flare.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Flare_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Flare.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Flare_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FlareLayer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FlareLayer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FlareLayer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FlareLayer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FlareLayer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FlareLayer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Font.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Font_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Font.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Font_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Font.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Font_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FrictionJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FrictionJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FrictionJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FrictionJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.FrictionJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_FrictionJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.activeInHierarchy
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_activeInHierarchy()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            bool accessor = target.activeInHierarchy;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.GameObject));
        }

        // UnityEngine.GameObject.activeSelf
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_activeSelf()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            bool accessor = target.activeSelf;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.GameObject));
        }

        // UnityEngine.GameObject.CompareTag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_CompareTag()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            string arg0 = default(string);
            target.CompareTag(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.GameObject, string, bool> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.GameObject, string, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.GameObject), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.Destroy
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_Destroy()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object.Destroy(arg0);
            global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.Destroy
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_Destroy_0()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            float arg1 = default(float);
            global::UnityEngine.Object.Destroy(arg0, arg1);
            global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Object, float> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Object, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.Find
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_Find()
        {
            string arg0 = default(string);
            global::UnityEngine.GameObject.Find(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, UnityEngine.GameObject> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, UnityEngine.GameObject>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.FindGameObjectsWithTag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_FindGameObjectsWithTag()
        {
            string arg0 = default(string);
            global::UnityEngine.GameObject.FindGameObjectsWithTag(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, UnityEngine.GameObject[]> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, UnityEngine.GameObject[]>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_gameObject()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.GameObject));
        }

        // UnityEngine.GameObject.GetComponent
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_GetComponent()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            global::System.Type arg0 = default(global::System.Type);
            target.GetComponent(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.GameObject, System.Type,
                UnityEngine.Component> optimized
                = new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.GameObject, System.Type,
                    UnityEngine.Component>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.GameObject), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.GetComponentsInChildren
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_GetComponentsInChildren()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            global::System.Type arg0 = default(global::System.Type);
            target.GetComponentsInChildren(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.GameObject, System.Type,
                    UnityEngine.Component[]>
                optimized =
                    new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.GameObject, System.Type,
                        UnityEngine.Component
                        []>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.GameObject), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.GameObject.isStatic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_isStatic()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            bool accessor = target.isStatic;
            target.isStatic = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.GameObject));
            optimized.SetValue(default(global::UnityEngine.GameObject), default(bool));
        }

        // UnityEngine.GameObject.layer
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_layer()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            int accessor = target.layer;
            target.layer = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.GameObject));
            optimized.SetValue(default(global::UnityEngine.GameObject), default(int));
        }

        // UnityEngine.GameObject.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.GameObject.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.scene
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_scene()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            global::UnityEngine.SceneManagement.Scene accessor = target.scene;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject,
                UnityEngine.SceneManagement.Scene> optimized
                = new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject,
                    UnityEngine.SceneManagement.Scene>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.GameObject));
        }

        // UnityEngine.GameObject.sceneCullingMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_sceneCullingMask()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            ulong accessor = target.sceneCullingMask;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, ulong> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.GameObject));
        }

        // UnityEngine.GameObject.SetActive
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_SetActive()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            bool arg0 = default(bool);
            target.SetActive(arg0);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.GameObject, bool> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.GameObject, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.GameObject), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GameObject.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_tag()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.GameObject));
            optimized.SetValue(default(global::UnityEngine.GameObject), default(string));
        }

        // UnityEngine.GameObject.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_GameObject_transform()
        {
            global::UnityEngine.GameObject target = default(global::UnityEngine.GameObject);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GameObject,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.GameObject));
        }

        // UnityEngine.Gizmos.color
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Gizmos_color()
        {
            global::UnityEngine.Color accessor = global::UnityEngine.Gizmos.color;
            global::UnityEngine.Gizmos.color = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.Color));
        }

        // UnityEngine.Gizmos.DrawLine
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Gizmos_DrawLine()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Gizmos.DrawLine(arg0, arg1);
            global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Vector3, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Vector3, UnityEngine.Vector3>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Gizmos.DrawWireSphere
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Gizmos_DrawWireSphere()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Gizmos.DrawWireSphere(arg0, arg1);
            global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Vector3, float> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Vector3, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.GUI.color
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_GUI_color()
        // {
        //     global::UnityEngine.Color accessor = global::UnityEngine.GUI.color;
        //     global::UnityEngine.GUI.color = default(global::UnityEngine.Color);
        //     global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color> optimized =
        //         new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Color>(
        //             default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(null);
        //     optimized.SetValue(null, default(global::UnityEngine.Color));
        // }

        // UnityEngine.GUI.Label
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_GUI_Label()
        // {
        //     global::UnityEngine.Rect arg0 = default(global::UnityEngine.Rect);
        //     string arg1 = default(string);
        //     global::UnityEngine.GUI.Label(arg0, arg1);
        //     global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Rect, string> optimized =
        //         new global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Rect, string>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.GUI.skin
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_GUI_skin()
        // {
        //     global::UnityEngine.GUISkin accessor = global::UnityEngine.GUI.skin;
        //     global::UnityEngine.GUI.skin = default(global::UnityEngine.GUISkin);
        //     global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.GUISkin> optimized =
        //         new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.GUISkin>(
        //             default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(null);
        //     optimized.SetValue(null, default(global::UnityEngine.GUISkin));
        // }

        // UnityEngine.GUISkin.label
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_GUISkin_label()
        // {
        //     global::UnityEngine.GUISkin target = default(global::UnityEngine.GUISkin);
        //     global::UnityEngine.GUIStyle accessor = target.label;
        //     target.label = default(global::UnityEngine.GUIStyle);
        //     global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GUISkin, UnityEngine.GUIStyle> optimized =
        //         new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GUISkin, UnityEngine.GUIStyle>(
        //             default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.GUISkin));
        //     optimized.SetValue(default(global::UnityEngine.GUISkin), default(global::UnityEngine.GUIStyle));
        // }

        // UnityEngine.GUISkin.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_GUISkin_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.GUISkin.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_GUISkin_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.GUISkin.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_GUISkin_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.GUIStyle.fontSize
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_GUIStyle_fontSize()
        // {
        //     global::UnityEngine.GUIStyle target = default(global::UnityEngine.GUIStyle);
        //     int accessor = target.fontSize;
        //     target.fontSize = default(int);
        //     global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GUIStyle, int> optimized =
        //         new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.GUIStyle, int>(
        //             default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.GUIStyle));
        //     optimized.SetValue(default(global::UnityEngine.GUIStyle), default(int));
        // }

        // UnityEngine.HingeJoint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_HingeJoint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.HingeJoint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_HingeJoint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.HingeJoint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_HingeJoint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.HingeJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_HingeJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.HingeJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_HingeJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.HingeJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_HingeJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Input.acceleration
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_acceleration()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Input.acceleration;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.accelerationEventCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_accelerationEventCount()
        {
            int accessor = global::UnityEngine.Input.accelerationEventCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.accelerationEvents
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_accelerationEvents()
        {
            UnityEngine.AccelerationEvent[] accessor = global::UnityEngine.Input.accelerationEvents;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.AccelerationEvent[]> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.AccelerationEvent[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.anyKey
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_anyKey()
        {
            bool accessor = global::UnityEngine.Input.anyKey;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.anyKeyDown
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_anyKeyDown()
        {
            bool accessor = global::UnityEngine.Input.anyKeyDown;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.backButtonLeavesApp
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_backButtonLeavesApp()
        {
            bool accessor = global::UnityEngine.Input.backButtonLeavesApp;
            global::UnityEngine.Input.backButtonLeavesApp = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Input.compass
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_compass()
        {
            global::UnityEngine.Compass accessor = global::UnityEngine.Input.compass;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Compass> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Compass>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.compensateSensors
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_compensateSensors()
        {
            bool accessor = global::UnityEngine.Input.compensateSensors;
            global::UnityEngine.Input.compensateSensors = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Input.compositionCursorPos
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_compositionCursorPos()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Input.compositionCursorPos;
            global::UnityEngine.Input.compositionCursorPos = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Input.compositionString
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_compositionString()
        {
            string accessor = global::UnityEngine.Input.compositionString;
            global::Unity.VisualScripting.StaticPropertyAccessor<string> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.deviceOrientation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_deviceOrientation()
        {
            global::UnityEngine.DeviceOrientation accessor = global::UnityEngine.Input.deviceOrientation;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.DeviceOrientation> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.DeviceOrientation>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.GetAxis
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_GetAxis()
        {
            string arg0 = default(string);
            global::UnityEngine.Input.GetAxis(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Input.GetButtonDown
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_GetButtonDown()
        {
            string arg0 = default(string);
            global::UnityEngine.Input.GetButtonDown(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Input.GetKey
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_GetKey()
        {
            global::UnityEngine.KeyCode arg0 = default(global::UnityEngine.KeyCode);
            global::UnityEngine.Input.GetKey(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.KeyCode, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.KeyCode, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Input.GetKeyDown
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_GetKeyDown()
        {
            global::UnityEngine.KeyCode arg0 = default(global::UnityEngine.KeyCode);
            global::UnityEngine.Input.GetKeyDown(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.KeyCode, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.KeyCode, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Input.GetMouseButton
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_GetMouseButton()
        {
            int arg0 = default(int);
            global::UnityEngine.Input.GetMouseButton(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<int, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<int, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Input.GetMouseButtonDown
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_GetMouseButtonDown()
        {
            int arg0 = default(int);
            global::UnityEngine.Input.GetMouseButtonDown(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<int, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<int, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Input.gyro
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_gyro()
        {
            global::UnityEngine.Gyroscope accessor = global::UnityEngine.Input.gyro;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Gyroscope> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Gyroscope>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.imeCompositionMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_imeCompositionMode()
        {
            global::UnityEngine.IMECompositionMode accessor = global::UnityEngine.Input.imeCompositionMode;
            global::UnityEngine.Input.imeCompositionMode = default(global::UnityEngine.IMECompositionMode);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.IMECompositionMode> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.IMECompositionMode>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.IMECompositionMode));
        }

        // UnityEngine.Input.imeIsSelected
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_imeIsSelected()
        {
            bool accessor = global::UnityEngine.Input.imeIsSelected;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.inputString
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_inputString()
        {
            string accessor = global::UnityEngine.Input.inputString;
            global::Unity.VisualScripting.StaticPropertyAccessor<string> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.location
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_location()
        {
            global::UnityEngine.LocationService accessor = global::UnityEngine.Input.location;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.LocationService> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.LocationService>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.mousePosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_mousePosition()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Input.mousePosition;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.mousePresent
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_mousePresent()
        {
            bool accessor = global::UnityEngine.Input.mousePresent;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.mouseScrollDelta
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_mouseScrollDelta()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Input.mouseScrollDelta;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.multiTouchEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_multiTouchEnabled()
        {
            bool accessor = global::UnityEngine.Input.multiTouchEnabled;
            global::UnityEngine.Input.multiTouchEnabled = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Input.simulateMouseWithTouches
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_simulateMouseWithTouches()
        {
            bool accessor = global::UnityEngine.Input.simulateMouseWithTouches;
            global::UnityEngine.Input.simulateMouseWithTouches = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Input.stylusTouchSupported
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_stylusTouchSupported()
        {
            bool accessor = global::UnityEngine.Input.stylusTouchSupported;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.touchCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_touchCount()
        {
            int accessor = global::UnityEngine.Input.touchCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.touches
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_touches()
        {
            UnityEngine.Touch[] accessor = global::UnityEngine.Input.touches;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Touch[]> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Touch[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.touchPressureSupported
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_touchPressureSupported()
        {
            bool accessor = global::UnityEngine.Input.touchPressureSupported;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Input.touchSupported
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Input_touchSupported()
        {
            bool accessor = global::UnityEngine.Input.touchSupported;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Joint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Joint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Joint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Joint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Joint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Joint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Joint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Joint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Joint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Joint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Joint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Joint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.LayerMask.NameToLayer
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_LayerMask_NameToLayer()
        {
            string arg0 = default(string);
            global::UnityEngine.LayerMask.NameToLayer(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<string, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<string, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.LayerMask.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_LayerMask_op_Implicit()
        {
            global::UnityEngine.LayerMask arg0 = default(global::UnityEngine.LayerMask);
            int conversion = ((int) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.LayerMask, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.LayerMask, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.LayerMask.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_LayerMask_op_Implicit_0()
        {
            int arg0 = default(int);
            UnityEngine.LayerMask conversion = ((UnityEngine.LayerMask) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<int, UnityEngine.LayerMask> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<int, UnityEngine.LayerMask>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.LensFlare.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_LensFlare_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.LensFlare.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_LensFlare_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.LensFlare.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_LensFlare_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Light.areaSize
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Light_areaSize()
        // {
        // 	global::UnityEngine.Light target = default(global::UnityEngine.Light);
        // 	global::UnityEngine.Vector2 accessor = target.areaSize;
        // 	target.areaSize = default(global::UnityEngine.Vector2);
        // 	global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Vector2> optimized = new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Vector2>(default(global::System.Reflection.PropertyInfo));
        // 	optimized.GetValue(default(global::UnityEngine.Light));
        // 	optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.Vector2));
        // }

        // UnityEngine.Light.bakingOutput
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_bakingOutput()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.LightBakingOutput accessor = target.bakingOutput;
            target.bakingOutput = default(global::UnityEngine.LightBakingOutput);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.LightBakingOutput>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light,
                        UnityEngine.LightBakingOutput>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.LightBakingOutput));
        }

        // UnityEngine.Light.bounceIntensity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_bounceIntensity()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.bounceIntensity;
            target.bounceIntensity = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.boundingSphereOverride
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_boundingSphereOverride()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.Vector4 accessor = target.boundingSphereOverride;
            target.boundingSphereOverride = default(global::UnityEngine.Vector4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Vector4>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.Vector4));
        }

        // UnityEngine.Light.color
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_color()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.Color accessor = target.color;
            target.color = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.Color));
        }

        // UnityEngine.Light.colorTemperature
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_colorTemperature()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.colorTemperature;
            target.colorTemperature = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.commandBufferCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_commandBufferCount()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            int accessor = target.commandBufferCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
        }

        // UnityEngine.Light.cookie
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_cookie()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.Texture accessor = target.cookie;
            target.cookie = default(global::UnityEngine.Texture);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Texture> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Texture>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.Texture));
        }

        // UnityEngine.Light.cookieSize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_cookieSize()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.cookieSize;
            target.cookieSize = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.cullingMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_cullingMask()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            int accessor = target.cullingMask;
            target.cullingMask = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(int));
        }

        // UnityEngine.Light.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Light.flare
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_flare()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.Flare accessor = target.flare;
            target.flare = default(global::UnityEngine.Flare);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Flare> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Flare>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.Flare));
        }

        // UnityEngine.Light.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Light.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Light.innerSpotAngle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_innerSpotAngle()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.innerSpotAngle;
            target.innerSpotAngle = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.intensity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_intensity()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.intensity;
            target.intensity = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Light.layerShadowCullDistances
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_layerShadowCullDistances()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float[] accessor = target.layerShadowCullDistances;
            target.layerShadowCullDistances = default(float[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float[]));
        }

        // UnityEngine.Light.lightmapBakeType
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Light_lightmapBakeType()
        // {
        // 	global::UnityEngine.Light target = default(global::UnityEngine.Light);
        // 	global::UnityEngine.LightmapBakeType accessor = target.lightmapBakeType;
        // 	target.lightmapBakeType = default(global::UnityEngine.LightmapBakeType);
        // 	global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.LightmapBakeType> optimized = new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.LightmapBakeType>(default(global::System.Reflection.PropertyInfo));
        // 	optimized.GetValue(default(global::UnityEngine.Light));
        // 	optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.LightmapBakeType));
        // }

        // UnityEngine.Light.lightShadowCasterMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_lightShadowCasterMode()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.LightShadowCasterMode accessor = target.lightShadowCasterMode;
            target.lightShadowCasterMode = default(global::UnityEngine.LightShadowCasterMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.LightShadowCasterMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light,
                        UnityEngine.LightShadowCasterMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.LightShadowCasterMode));
        }

        // UnityEngine.Light.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Light.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Light.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Light.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Light.range
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_range()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.range;
            target.range = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.renderingLayerMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_renderingLayerMask()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            int accessor = target.renderingLayerMask;
            target.renderingLayerMask = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(int));
        }

        // UnityEngine.Light.renderMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_renderMode()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.LightRenderMode accessor = target.renderMode;
            target.renderMode = default(global::UnityEngine.LightRenderMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.LightRenderMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light,
                        UnityEngine.LightRenderMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.LightRenderMode));
        }

        // UnityEngine.Light.shadowAngle
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Light_shadowAngle()
        // {
        // 	global::UnityEngine.Light target = default(global::UnityEngine.Light);
        // 	float accessor = target.shadowAngle;
        // 	target.shadowAngle = default(float);
        // 	global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized = new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(default(global::System.Reflection.PropertyInfo));
        // 	optimized.GetValue(default(global::UnityEngine.Light));
        // 	optimized.SetValue(default(global::UnityEngine.Light), default(float));
        // }

        // UnityEngine.Light.shadowBias
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_shadowBias()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.shadowBias;
            target.shadowBias = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.shadowCustomResolution
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_shadowCustomResolution()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            int accessor = target.shadowCustomResolution;
            target.shadowCustomResolution = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(int));
        }

        // UnityEngine.Light.shadowMatrixOverride
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_shadowMatrixOverride()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.Matrix4x4 accessor = target.shadowMatrixOverride;
            target.shadowMatrixOverride = default(global::UnityEngine.Matrix4x4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Matrix4x4> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.Matrix4x4>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.Matrix4x4));
        }

        // UnityEngine.Light.shadowNearPlane
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_shadowNearPlane()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.shadowNearPlane;
            target.shadowNearPlane = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.shadowNormalBias
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_shadowNormalBias()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.shadowNormalBias;
            target.shadowNormalBias = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.shadowRadius
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Light_shadowRadius()
        // {
        // 	global::UnityEngine.Light target = default(global::UnityEngine.Light);
        // 	float accessor = target.shadowRadius;
        // 	target.shadowRadius = default(float);
        // 	global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized = new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(default(global::System.Reflection.PropertyInfo));
        // 	optimized.GetValue(default(global::UnityEngine.Light));
        // 	optimized.SetValue(default(global::UnityEngine.Light), default(float));
        // }

        // UnityEngine.Light.shadowResolution
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_shadowResolution()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.Rendering.LightShadowResolution accessor = target.shadowResolution;
            target.shadowResolution = default(global::UnityEngine.Rendering.LightShadowResolution);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light,
                    UnityEngine.Rendering.LightShadowResolution>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light,
                        UnityEngine.Rendering.LightShadowResolution>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light),
                default(global::UnityEngine.Rendering.LightShadowResolution));
        }

        // UnityEngine.Light.shadows
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_shadows()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.LightShadows accessor = target.shadows;
            target.shadows = default(global::UnityEngine.LightShadows);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.LightShadows>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light,
                        UnityEngine.LightShadows>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.LightShadows));
        }

        // UnityEngine.Light.shadowStrength
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_shadowStrength()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.shadowStrength;
            target.shadowStrength = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.shape
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_shape()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.LightShape accessor = target.shape;
            target.shape = default(global::UnityEngine.LightShape);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.LightShape>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light,
                        UnityEngine.LightShape>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.LightShape));
        }

        // UnityEngine.Light.spotAngle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_spotAngle()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            float accessor = target.spotAngle;
            target.spotAngle = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(float));
        }

        // UnityEngine.Light.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Light.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Light.type
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_type()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            global::UnityEngine.LightType accessor = target.type;
            target.type = default(global::UnityEngine.LightType);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.LightType> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, UnityEngine.LightType>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(global::UnityEngine.LightType));
        }

        // UnityEngine.Light.useBoundingSphereOverride
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_useBoundingSphereOverride()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            bool accessor = target.useBoundingSphereOverride;
            target.useBoundingSphereOverride = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(bool));
        }

        // UnityEngine.Light.useColorTemperature
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_useColorTemperature()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            bool accessor = target.useColorTemperature;
            target.useColorTemperature = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(bool));
        }

        // UnityEngine.Light.useShadowMatrixOverride
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_useShadowMatrixOverride()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            bool accessor = target.useShadowMatrixOverride;
            target.useShadowMatrixOverride = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(bool));
        }

        // UnityEngine.Light.useViewFrustumForShadowCasterCull
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Light_useViewFrustumForShadowCasterCull()
        {
            global::UnityEngine.Light target = default(global::UnityEngine.Light);
            bool accessor = target.useViewFrustumForShadowCasterCull;
            target.useViewFrustumForShadowCasterCull = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Light, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Light));
            optimized.SetValue(default(global::UnityEngine.Light), default(bool));
        }

        // UnityEngine.LightingSettings.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightingSettings_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightingSettings.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightingSettings_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightingSettings.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightingSettings_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightmapSettings.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightmapSettings_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightmapSettings.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightmapSettings_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightmapSettings.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightmapSettings_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightProbeGroup.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightProbeGroup_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightProbeGroup.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightProbeGroup_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightProbeGroup.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightProbeGroup_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightProbeProxyVolume.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightProbeProxyVolume_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightProbeProxyVolume.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightProbeProxyVolume_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightProbeProxyVolume.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightProbeProxyVolume_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightProbes.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightProbes_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightProbes.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightProbes_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LightProbes.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LightProbes_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LineRenderer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_LineRenderer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.LineRenderer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_LineRenderer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.LineRenderer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_LineRenderer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.LODGroup.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LODGroup_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LODGroup.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LODGroup_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.LODGroup.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_LODGroup_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Material.color
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_color()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            global::UnityEngine.Color accessor = target.color;
            target.color = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, UnityEngine.Color> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, UnityEngine.Color>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material), default(global::UnityEngine.Color));
        }

        // UnityEngine.Material.doubleSidedGI
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_doubleSidedGI()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            bool accessor = target.doubleSidedGI;
            target.doubleSidedGI = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material), default(bool));
        }

        // UnityEngine.Material.enableInstancing
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_enableInstancing()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            bool accessor = target.enableInstancing;
            target.enableInstancing = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material), default(bool));
        }

        // UnityEngine.Material.GetFloat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_GetFloat()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            string arg0 = default(string);
            target.GetFloat(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Material, string, float> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Material, string, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Material), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Material.globalIlluminationFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_globalIlluminationFlags()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            global::UnityEngine.MaterialGlobalIlluminationFlags accessor = target.globalIlluminationFlags;
            target.globalIlluminationFlags = default(global::UnityEngine.MaterialGlobalIlluminationFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material,
                    UnityEngine.MaterialGlobalIlluminationFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material,
                        UnityEngine.MaterialGlobalIlluminationFlags>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material),
                default(global::UnityEngine.MaterialGlobalIlluminationFlags));
        }

        // UnityEngine.Material.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Material.mainTexture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_mainTexture()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            global::UnityEngine.Texture accessor = target.mainTexture;
            target.mainTexture = default(global::UnityEngine.Texture);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, UnityEngine.Texture>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material,
                        UnityEngine.Texture>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material), default(global::UnityEngine.Texture));
        }

        // UnityEngine.Material.mainTextureOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_mainTextureOffset()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            global::UnityEngine.Vector2 accessor = target.mainTextureOffset;
            target.mainTextureOffset = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, UnityEngine.Vector2>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Material.mainTextureScale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_mainTextureScale()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            global::UnityEngine.Vector2 accessor = target.mainTextureScale;
            target.mainTextureScale = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, UnityEngine.Vector2>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Material.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Material.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Material.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Material.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Material.passCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_passCount()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            int accessor = target.passCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
        }

        // UnityEngine.Material.renderQueue
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_renderQueue()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            int accessor = target.renderQueue;
            target.renderQueue = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material), default(int));
        }

        // UnityEngine.Material.SetColor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_SetColor()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            string arg0 = default(string);
            global::UnityEngine.Color arg1 = default(global::UnityEngine.Color);
            target.SetColor(arg0, arg1);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Material, string, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Material, string,
                        UnityEngine.Color>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Material), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Material.SetFloat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_SetFloat()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            string arg0 = default(string);
            float arg1 = default(float);
            target.SetFloat(arg0, arg1);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Material, string, float> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Material, string, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Material), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Material.shader
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_shader()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            global::UnityEngine.Shader accessor = target.shader;
            target.shader = default(global::UnityEngine.Shader);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, UnityEngine.Shader> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, UnityEngine.Shader>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material), default(global::UnityEngine.Shader));
        }

        // UnityEngine.Material.shaderKeywords
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Material_shaderKeywords()
        {
            global::UnityEngine.Material target = default(global::UnityEngine.Material);
            string[] accessor = target.shaderKeywords;
            target.shaderKeywords = default(string[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, string[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Material, string[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Material));
            optimized.SetValue(default(global::UnityEngine.Material), default(string[]));
        }

        // UnityEngine.Mathf.Abs
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Abs()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Abs(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Abs
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Abs_0()
        {
            int arg0 = default(int);
            global::UnityEngine.Mathf.Abs(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<int, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<int, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Acos
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Acos()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Acos(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Approximately
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Approximately()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            global::UnityEngine.Mathf.Approximately(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Asin
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Asin()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Asin(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Atan
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Atan()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Atan(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Atan2
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Atan2()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            global::UnityEngine.Mathf.Atan2(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Ceil
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Ceil()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Ceil(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.CeilToInt
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_CeilToInt()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.CeilToInt(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Clamp
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Clamp()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            global::UnityEngine.Mathf.Clamp(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Clamp
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Clamp_0()
        {
            int arg0 = default(int);
            int arg1 = default(int);
            int arg2 = default(int);
            global::UnityEngine.Mathf.Clamp(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<int, int, int, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<int, int, int, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Clamp01
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Clamp01()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Clamp01(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Cos
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Cos()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Cos(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Deg2Rad
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Deg2Rad()
        {
            float accessor = global::UnityEngine.Mathf.Deg2Rad;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Mathf.DeltaAngle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_DeltaAngle()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            global::UnityEngine.Mathf.DeltaAngle(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Epsilon
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Epsilon()
        {
            float accessor = global::UnityEngine.Mathf.Epsilon;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Mathf.Exp
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Exp()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Exp(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Floor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Floor()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Floor(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.FloorToInt
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_FloorToInt()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.FloorToInt(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Infinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Infinity()
        {
            float accessor = global::UnityEngine.Mathf.Infinity;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Mathf.InverseLerp
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_InverseLerp()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            global::UnityEngine.Mathf.InverseLerp(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Lerp
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Lerp()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            global::UnityEngine.Mathf.Lerp(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.LerpAngle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_LerpAngle()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            global::UnityEngine.Mathf.LerpAngle(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.LerpUnclamped
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_LerpUnclamped()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            global::UnityEngine.Mathf.LerpUnclamped(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Log
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Log()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            global::UnityEngine.Mathf.Log(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Log
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Log_0()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Log(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Log10
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Log10()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Log10(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Max
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Max()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            global::UnityEngine.Mathf.Max(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Max
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Max_0()
        {
            int arg0 = default(int);
            int arg1 = default(int);
            global::UnityEngine.Mathf.Max(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<int, int, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<int, int, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Max
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Max_1()
        {
            int[] arg0 = default(int[]);
            global::UnityEngine.Mathf.Max(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<int[], int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<int[], int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Max
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Max_2()
        {
            float[] arg0 = default(float[]);
            global::UnityEngine.Mathf.Max(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float[], float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float[], float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Min
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Min()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            global::UnityEngine.Mathf.Min(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Min
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Min_0()
        {
            float[] arg0 = default(float[]);
            global::UnityEngine.Mathf.Min(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float[], float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float[], float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Min
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Min_1()
        {
            int arg0 = default(int);
            int arg1 = default(int);
            global::UnityEngine.Mathf.Min(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<int, int, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<int, int, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.NegativeInfinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_NegativeInfinity()
        {
            float accessor = global::UnityEngine.Mathf.NegativeInfinity;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Mathf.PI
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_PI()
        {
            float accessor = global::UnityEngine.Mathf.PI;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Mathf.Pow
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Pow()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            global::UnityEngine.Mathf.Pow(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Rad2Deg
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Rad2Deg()
        {
            float accessor = global::UnityEngine.Mathf.Rad2Deg;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Mathf.Repeat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Repeat()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            global::UnityEngine.Mathf.Repeat(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.RoundToInt
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_RoundToInt()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.RoundToInt(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Sin
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Sin()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Sin(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Sqrt
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Sqrt()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Sqrt(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mathf.Tan
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mathf_Tan()
        {
            float arg0 = default(float);
            global::UnityEngine.Mathf.Tan(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Matrix4x4.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Matrix4x4_op_Equality()
        {
            global::UnityEngine.Matrix4x4 arg0 = default(global::UnityEngine.Matrix4x4);
            global::UnityEngine.Matrix4x4 arg1 = default(global::UnityEngine.Matrix4x4);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Matrix4x4, UnityEngine.Matrix4x4, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Matrix4x4, UnityEngine.Matrix4x4
                        , bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Matrix4x4.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Matrix4x4_op_Inequality()
        {
            global::UnityEngine.Matrix4x4 arg0 = default(global::UnityEngine.Matrix4x4);
            global::UnityEngine.Matrix4x4 arg1 = default(global::UnityEngine.Matrix4x4);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Matrix4x4, UnityEngine.Matrix4x4, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Matrix4x4, UnityEngine.Matrix4x4
                        , bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Matrix4x4.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Matrix4x4_op_Multiply()
        {
            global::UnityEngine.Matrix4x4 arg0 = default(global::UnityEngine.Matrix4x4);
            global::UnityEngine.Matrix4x4 arg1 = default(global::UnityEngine.Matrix4x4);
            UnityEngine.Matrix4x4 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Matrix4x4, UnityEngine.Matrix4x4,
                    UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Matrix4x4, UnityEngine.Matrix4x4
                        ,
                        UnityEngine.Matrix4x4>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Matrix4x4.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Matrix4x4_op_Multiply_0()
        {
            global::UnityEngine.Matrix4x4 arg0 = default(global::UnityEngine.Matrix4x4);
            global::UnityEngine.Vector4 arg1 = default(global::UnityEngine.Vector4);
            UnityEngine.Vector4 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Matrix4x4, UnityEngine.Vector4,
                    UnityEngine.Vector4>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Matrix4x4, UnityEngine.Vector4,
                        UnityEngine.Vector4>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mesh.bindposes
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_bindposes()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Matrix4x4[] accessor = target.bindposes;
            target.bindposes = default(UnityEngine.Matrix4x4[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Matrix4x4[]>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Matrix4x4
                        []>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Matrix4x4[]));
        }

        // UnityEngine.Mesh.blendShapeCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_blendShapeCount()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            int accessor = target.blendShapeCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
        }

        // UnityEngine.Mesh.boneWeights
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_boneWeights()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.BoneWeight[] accessor = target.boneWeights;
            target.boneWeights = default(UnityEngine.BoneWeight[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.BoneWeight[]>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.BoneWeight
                        []>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.BoneWeight[]));
        }

        // UnityEngine.Mesh.bounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_bounds()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            global::UnityEngine.Bounds accessor = target.bounds;
            target.bounds = default(global::UnityEngine.Bounds);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Bounds> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Bounds>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(global::UnityEngine.Bounds));
        }

        // UnityEngine.Mesh.colors
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_colors()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Color[] accessor = target.colors;
            target.colors = default(UnityEngine.Color[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Color[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Color[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Color[]));
        }

        // UnityEngine.Mesh.colors32
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_colors32()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Color32[] accessor = target.colors32;
            target.colors32 = default(UnityEngine.Color32[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Color32[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Color32[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Color32[]));
        }

        // UnityEngine.Mesh.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Mesh.indexFormat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_indexFormat()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            global::UnityEngine.Rendering.IndexFormat accessor = target.indexFormat;
            target.indexFormat = default(global::UnityEngine.Rendering.IndexFormat);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Rendering.IndexFormat>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh,
                        UnityEngine.Rendering.IndexFormat>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(global::UnityEngine.Rendering.IndexFormat));
        }

        // UnityEngine.Mesh.isReadable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_isReadable()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            bool accessor = target.isReadable;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
        }

        // UnityEngine.Mesh.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Mesh.normals
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_normals()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector3[] accessor = target.normals;
            target.normals = default(UnityEngine.Vector3[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector3[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector3[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector3[]));
        }

        // UnityEngine.Mesh.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mesh.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mesh.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Mesh.subMeshCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_subMeshCount()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            int accessor = target.subMeshCount;
            target.subMeshCount = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(int));
        }

        // UnityEngine.Mesh.tangents
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_tangents()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector4[] accessor = target.tangents;
            target.tangents = default(UnityEngine.Vector4[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector4[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector4[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector4[]));
        }

        // UnityEngine.Mesh.triangles
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_triangles()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            int[] accessor = target.triangles;
            target.triangles = default(int[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(int[]));
        }

        // UnityEngine.Mesh.uv
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_uv()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector2[] accessor = target.uv;
            target.uv = default(UnityEngine.Vector2[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector2[]));
        }

        // UnityEngine.Mesh.uv2
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_uv2()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector2[] accessor = target.uv2;
            target.uv2 = default(UnityEngine.Vector2[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector2[]));
        }

        // UnityEngine.Mesh.uv3
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_uv3()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector2[] accessor = target.uv3;
            target.uv3 = default(UnityEngine.Vector2[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector2[]));
        }

        // UnityEngine.Mesh.uv4
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_uv4()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector2[] accessor = target.uv4;
            target.uv4 = default(UnityEngine.Vector2[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector2[]));
        }

        // UnityEngine.Mesh.uv5
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_uv5()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector2[] accessor = target.uv5;
            target.uv5 = default(UnityEngine.Vector2[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector2[]));
        }

        // UnityEngine.Mesh.uv6
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_uv6()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector2[] accessor = target.uv6;
            target.uv6 = default(UnityEngine.Vector2[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector2[]));
        }

        // UnityEngine.Mesh.uv7
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_uv7()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector2[] accessor = target.uv7;
            target.uv7 = default(UnityEngine.Vector2[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector2[]));
        }

        // UnityEngine.Mesh.uv8
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_uv8()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector2[] accessor = target.uv8;
            target.uv8 = default(UnityEngine.Vector2[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector2[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector2[]));
        }

        // UnityEngine.Mesh.vertexAttributeCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_vertexAttributeCount()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            int accessor = target.vertexAttributeCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
        }

        // UnityEngine.Mesh.vertexBufferCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_vertexBufferCount()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            int accessor = target.vertexBufferCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
        }

        // UnityEngine.Mesh.vertexCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_vertexCount()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            int accessor = target.vertexCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
        }

        // UnityEngine.Mesh.vertices
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Mesh_vertices()
        {
            global::UnityEngine.Mesh target = default(global::UnityEngine.Mesh);
            UnityEngine.Vector3[] accessor = target.vertices;
            target.vertices = default(UnityEngine.Vector3[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector3[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Mesh, UnityEngine.Vector3[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Mesh));
            optimized.SetValue(default(global::UnityEngine.Mesh), default(UnityEngine.Vector3[]));
        }

        // UnityEngine.MeshCollider.attachedArticulationBody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_attachedArticulationBody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.ArticulationBody accessor = target.attachedArticulationBody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.ArticulationBody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.ArticulationBody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.MeshCollider.attachedRigidbody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_attachedRigidbody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Rigidbody accessor = target.attachedRigidbody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Rigidbody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.Rigidbody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.MeshCollider.bounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_bounds()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Bounds accessor = target.bounds;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.MeshCollider.contactOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_contactOffset()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            float accessor = target.contactOffset;
            target.contactOffset = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(float));
        }

        // UnityEngine.MeshCollider.convex
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_convex()
        {
            global::UnityEngine.MeshCollider target = default(global::UnityEngine.MeshCollider);
            bool accessor = target.convex;
            target.convex = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MeshCollider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MeshCollider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MeshCollider));
            optimized.SetValue(default(global::UnityEngine.MeshCollider), default(bool));
        }

        // UnityEngine.MeshCollider.cookingOptions
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_cookingOptions()
        {
            global::UnityEngine.MeshCollider target = default(global::UnityEngine.MeshCollider);
            global::UnityEngine.MeshColliderCookingOptions accessor = target.cookingOptions;
            target.cookingOptions = default(global::UnityEngine.MeshColliderCookingOptions);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MeshCollider,
                    UnityEngine.MeshColliderCookingOptions>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MeshCollider,
                        UnityEngine.MeshColliderCookingOptions>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MeshCollider));
            optimized.SetValue(default(global::UnityEngine.MeshCollider),
                default(global::UnityEngine.MeshColliderCookingOptions));
        }

        // UnityEngine.MeshCollider.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_enabled()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.MeshCollider.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.MeshCollider.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.MeshCollider.isTrigger
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_isTrigger()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.isTrigger;
            target.isTrigger = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.MeshCollider.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_material()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.material;
            target.material = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.MeshCollider.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.MeshCollider.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MeshCollider.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MeshCollider.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MeshCollider.sharedMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_sharedMaterial()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.sharedMaterial;
            target.sharedMaterial = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.MeshCollider.sharedMesh
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_sharedMesh()
        {
            global::UnityEngine.MeshCollider target = default(global::UnityEngine.MeshCollider);
            global::UnityEngine.Mesh accessor = target.sharedMesh;
            target.sharedMesh = default(global::UnityEngine.Mesh);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MeshCollider, UnityEngine.Mesh>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MeshCollider,
                        UnityEngine.Mesh>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MeshCollider));
            optimized.SetValue(default(global::UnityEngine.MeshCollider), default(global::UnityEngine.Mesh));
        }

        // UnityEngine.MeshCollider.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.MeshCollider.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshCollider_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.MeshFilter.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshFilter_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MeshFilter.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshFilter_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MeshFilter.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshFilter_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MeshRenderer.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshRenderer_material()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Material accessor = target.material;
            target.material = default(global::UnityEngine.Material);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(global::UnityEngine.Material));
        }

        // UnityEngine.MeshRenderer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshRenderer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MeshRenderer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshRenderer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MeshRenderer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MeshRenderer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MonoBehaviour.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MonoBehaviour_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MonoBehaviour.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MonoBehaviour_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.MonoBehaviour.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_MonoBehaviour_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Motion.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Motion.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Motion.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Motion_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Networking.PlayerConnection.PlayerConnection.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Networking_PlayerConnection_PlayerConnection_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Networking.PlayerConnection.PlayerConnection.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Networking_PlayerConnection_PlayerConnection_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Networking.PlayerConnection.PlayerConnection.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Networking_PlayerConnection_PlayerConnection_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Object.DontDestroyOnLoad
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Object_DontDestroyOnLoad()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object.DontDestroyOnLoad(arg0);
            global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticActionInvoker<UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Object.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Object_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Object.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Object_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Object.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Object_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.OcclusionArea.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_OcclusionArea_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.OcclusionArea.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_OcclusionArea_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.OcclusionArea.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_OcclusionArea_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.OcclusionPortal.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_OcclusionPortal_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.OcclusionPortal.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_OcclusionPortal_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.OcclusionPortal.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_OcclusionPortal_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.ParticleSystem.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ParticleSystem_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ParticleSystem.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ParticleSystem_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ParticleSystem.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ParticleSystem_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ParticleSystemForceField.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ParticleSystemForceField_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ParticleSystemForceField.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ParticleSystemForceField_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ParticleSystemForceField.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ParticleSystemForceField_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ParticleSystemRenderer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ParticleSystemRenderer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ParticleSystemRenderer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ParticleSystemRenderer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ParticleSystemRenderer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ParticleSystemRenderer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.PhysicMaterial.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PhysicMaterial_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.PhysicMaterial.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PhysicMaterial_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.PhysicMaterial.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PhysicMaterial_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.AllLayers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_AllLayers()
        {
            int accessor = global::UnityEngine.Physics.AllLayers;
            global::Unity.VisualScripting.StaticFieldAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<int>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Physics.autoSimulation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_autoSimulation()
        {
            bool accessor = global::UnityEngine.Physics.autoSimulation;
            global::UnityEngine.Physics.autoSimulation = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Physics.autoSyncTransforms
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_autoSyncTransforms()
        {
            bool accessor = global::UnityEngine.Physics.autoSyncTransforms;
            global::UnityEngine.Physics.autoSyncTransforms = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Physics.bounceThreshold
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_bounceThreshold()
        {
            float accessor = global::UnityEngine.Physics.bounceThreshold;
            global::UnityEngine.Physics.bounceThreshold = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                    UnityEngine.Vector3, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        UnityEngine.Vector3, bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast_0()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg3 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Quaternion arg4 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3, arg4);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast_1()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg3 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Quaternion arg4 = default(global::UnityEngine.Quaternion);
            float arg5 = default(float);
            int arg6 = default(int);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3, arg4, arg5, arg6);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast_2()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg3 = default(global::UnityEngine.Quaternion);
            float arg4 = default(float);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2, arg3, arg4);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                UnityEngine.Vector3,
                UnityEngine.Quaternion, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                    UnityEngine.Vector3,
                    UnityEngine.Quaternion, float, bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast_3()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg3 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Quaternion arg4 = default(global::UnityEngine.Quaternion);
            float arg5 = default(float);
            int arg6 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg7 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3, arg4, arg5, arg6, arg7);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast_4()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg3 = default(global::UnityEngine.Quaternion);
            float arg4 = default(float);
            int arg5 = default(int);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4, arg5);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast_5()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg3 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                UnityEngine.Vector3,
                UnityEngine.Quaternion, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                    UnityEngine.Vector3,
                    UnityEngine.Quaternion, bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast_6()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg3 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Quaternion arg4 = default(global::UnityEngine.Quaternion);
            float arg5 = default(float);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3, arg4, arg5);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast_7()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg3 = default(global::UnityEngine.Quaternion);
            float arg4 = default(float);
            int arg5 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg6 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.BoxCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_BoxCast_8()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg3 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.clothGravity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_clothGravity()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Physics.clothGravity;
            global::UnityEngine.Physics.clothGravity = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Physics.defaultContactOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_defaultContactOffset()
        {
            float accessor = global::UnityEngine.Physics.defaultContactOffset;
            global::UnityEngine.Physics.defaultContactOffset = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Physics.defaultMaxAngularSpeed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_defaultMaxAngularSpeed()
        {
            float accessor = global::UnityEngine.Physics.defaultMaxAngularSpeed;
            global::UnityEngine.Physics.defaultMaxAngularSpeed = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Physics.defaultMaxDepenetrationVelocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_defaultMaxDepenetrationVelocity()
        {
            float accessor = global::UnityEngine.Physics.defaultMaxDepenetrationVelocity;
            global::UnityEngine.Physics.defaultMaxDepenetrationVelocity = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Physics.defaultPhysicsScene
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_defaultPhysicsScene()
        {
            global::UnityEngine.PhysicsScene accessor = global::UnityEngine.Physics.defaultPhysicsScene;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.PhysicsScene> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.PhysicsScene>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Physics.DefaultRaycastLayers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_DefaultRaycastLayers()
        {
            int accessor = global::UnityEngine.Physics.DefaultRaycastLayers;
            global::Unity.VisualScripting.StaticFieldAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<int>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Physics.defaultSolverIterations
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_defaultSolverIterations()
        {
            int accessor = global::UnityEngine.Physics.defaultSolverIterations;
            global::UnityEngine.Physics.defaultSolverIterations = default(int);
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(int));
        }

        // UnityEngine.Physics.defaultSolverVelocityIterations
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_defaultSolverVelocityIterations()
        {
            int accessor = global::UnityEngine.Physics.defaultSolverVelocityIterations;
            global::UnityEngine.Physics.defaultSolverVelocityIterations = default(int);
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(int));
        }

        // UnityEngine.Physics.gravity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_gravity()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Physics.gravity;
            global::UnityEngine.Physics.gravity = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Physics.IgnoreRaycastLayer
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_IgnoreRaycastLayer()
        {
            int accessor = global::UnityEngine.Physics.IgnoreRaycastLayer;
            global::Unity.VisualScripting.StaticFieldAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<int>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Physics.interCollisionDistance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_interCollisionDistance()
        {
            float accessor = global::UnityEngine.Physics.interCollisionDistance;
            global::UnityEngine.Physics.interCollisionDistance = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Physics.interCollisionSettingsToggle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_interCollisionSettingsToggle()
        {
            bool accessor = global::UnityEngine.Physics.interCollisionSettingsToggle;
            global::UnityEngine.Physics.interCollisionSettingsToggle = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Physics.interCollisionStiffness
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_interCollisionStiffness()
        {
            float accessor = global::UnityEngine.Physics.interCollisionStiffness;
            global::UnityEngine.Physics.interCollisionStiffness = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Physics.Linecast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Linecast()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            int arg2 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg3 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.Linecast(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, int,
                UnityEngine.QueryTriggerInteraction, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, int,
                    UnityEngine.QueryTriggerInteraction, bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Linecast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Linecast_0()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            int arg2 = default(int);
            global::UnityEngine.Physics.Linecast(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, int, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        int, bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Linecast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Linecast_1()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Physics.Linecast(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Linecast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Linecast_2()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            int arg3 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg4 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.Linecast(arg0, arg1, out arg2, arg3, arg4);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Linecast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Linecast_3()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            int arg3 = default(int);
            global::UnityEngine.Physics.Linecast(arg0, arg1, out arg2, arg3);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Linecast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Linecast_4()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Physics.Linecast(arg0, arg1, out arg2);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.queriesHitBackfaces
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_queriesHitBackfaces()
        {
            bool accessor = global::UnityEngine.Physics.queriesHitBackfaces;
            global::UnityEngine.Physics.queriesHitBackfaces = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Physics.queriesHitTriggers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_queriesHitTriggers()
        {
            bool accessor = global::UnityEngine.Physics.queriesHitTriggers;
            global::UnityEngine.Physics.queriesHitTriggers = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            float arg3 = default(float);
            int arg4 = default(int);
            global::UnityEngine.Physics.Raycast(arg0, arg1, out arg2, arg3, arg4);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_0()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            global::UnityEngine.RaycastHit arg1 = default(global::UnityEngine.RaycastHit);
            float arg2 = default(float);
            int arg3 = default(int);
            global::UnityEngine.Physics.Raycast(arg0, out arg1, arg2, arg3);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_1()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            global::UnityEngine.RaycastHit arg1 = default(global::UnityEngine.RaycastHit);
            float arg2 = default(float);
            global::UnityEngine.Physics.Raycast(arg0, out arg1, arg2);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_2()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Physics.Raycast(arg0, arg1, out arg2);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_3()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Physics.Raycast(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_4()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            float arg2 = default(float);
            int arg3 = default(int);
            global::UnityEngine.Physics.Raycast(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float, int,
                bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float,
                    int, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_5()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            float arg3 = default(float);
            global::UnityEngine.Physics.Raycast(arg0, arg1, out arg2, arg3);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_6()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            float arg3 = default(float);
            int arg4 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg5 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.Raycast(arg0, arg1, out arg2, arg3, arg4, arg5);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_7()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            float arg2 = default(float);
            global::UnityEngine.Physics.Raycast(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        float, bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_8()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            float arg2 = default(float);
            int arg3 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg4 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.Raycast(arg0, arg1, arg2, arg3, arg4);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float, int,
                UnityEngine.QueryTriggerInteraction, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float,
                    int,
                    UnityEngine.QueryTriggerInteraction, bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_9()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            global::UnityEngine.RaycastHit arg1 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Physics.Raycast(arg0, out arg1);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.Raycast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_Raycast_10()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            int arg2 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg3 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.Raycast(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, int,
                    UnityEngine.QueryTriggerInteraction, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, int,
                        UnityEngine.QueryTriggerInteraction, bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.reuseCollisionCallbacks
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_reuseCollisionCallbacks()
        {
            bool accessor = global::UnityEngine.Physics.reuseCollisionCallbacks;
            global::UnityEngine.Physics.reuseCollisionCallbacks = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Physics.sleepThreshold
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_sleepThreshold()
        {
            float accessor = global::UnityEngine.Physics.sleepThreshold;
            global::UnityEngine.Physics.sleepThreshold = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            float arg3 = default(float);
            int arg4 = default(int);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, out arg2, arg3, arg4);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_0()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            float arg2 = default(float);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, float, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_1()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg3 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, arg2, out arg3);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_2()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, out arg2);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_3()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            global::UnityEngine.RaycastHit arg2 = default(global::UnityEngine.RaycastHit);
            float arg3 = default(float);
            int arg4 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg5 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, out arg2, arg3, arg4, arg5);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_4()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg3 = default(global::UnityEngine.RaycastHit);
            float arg4 = default(float);
            int arg5 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg6 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, arg2, out arg3, arg4, arg5, arg6);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_5()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg3 = default(global::UnityEngine.RaycastHit);
            float arg4 = default(float);
            int arg5 = default(int);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, arg2, out arg3, arg4, arg5);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_6()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            float arg2 = default(float);
            int arg3 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg4 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, arg2, arg3, arg4);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, float, int,
                UnityEngine.QueryTriggerInteraction,
                bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, float, int,
                    UnityEngine.QueryTriggerInteraction, bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_7()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            global::UnityEngine.RaycastHit arg3 = default(global::UnityEngine.RaycastHit);
            float arg4 = default(float);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, arg2, out arg3, arg4);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_8()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            float arg2 = default(float);
            int arg3 = default(int);
            global::UnityEngine.Physics.SphereCast(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, float, int, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, float, int, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCast
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCast_9()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            global::UnityEngine.Physics.SphereCast(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCastAll
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCastAll()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            global::UnityEngine.Physics.SphereCastAll(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, UnityEngine.RaycastHit[]>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float,
                        UnityEngine.RaycastHit[]>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCastAll
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCastAll_0()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            float arg3 = default(float);
            global::UnityEngine.Physics.SphereCastAll(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, UnityEngine.Vector3, float,
                UnityEngine.RaycastHit[]> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, UnityEngine.Vector3,
                    float,
                    UnityEngine.RaycastHit[]>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCastNonAlloc
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCastNonAlloc()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            UnityEngine.RaycastHit[] arg3 = default(UnityEngine.RaycastHit[]);
            global::UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, UnityEngine.Vector3,
                UnityEngine.RaycastHit
                [], int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, UnityEngine.Vector3,
                    UnityEngine.RaycastHit[], int>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCastNonAlloc
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCastNonAlloc_0()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            UnityEngine.RaycastHit[] arg3 = default(UnityEngine.RaycastHit[]);
            float arg4 = default(float);
            int arg5 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg6 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCastNonAlloc
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCastNonAlloc_1()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            UnityEngine.RaycastHit[] arg2 = default(UnityEngine.RaycastHit[]);
            float arg3 = default(float);
            global::UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, UnityEngine.RaycastHit[], float,
                int> optimized
                = new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, UnityEngine.RaycastHit
                    [], float, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCastNonAlloc
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCastNonAlloc_2()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            UnityEngine.RaycastHit[] arg2 = default(UnityEngine.RaycastHit[]);
            float arg3 = default(float);
            int arg4 = default(int);
            global::UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3, arg4);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, UnityEngine.RaycastHit[], float,
                    int, int>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float,
                        UnityEngine.RaycastHit[], float, int
                        , int>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCastNonAlloc
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCastNonAlloc_3()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            UnityEngine.RaycastHit[] arg2 = default(UnityEngine.RaycastHit[]);
            float arg3 = default(float);
            int arg4 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg5 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4, arg5);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCastNonAlloc
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCastNonAlloc_4()
        {
            global::UnityEngine.Ray arg0 = default(global::UnityEngine.Ray);
            float arg1 = default(float);
            UnityEngine.RaycastHit[] arg2 = default(UnityEngine.RaycastHit[]);
            global::UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float, UnityEngine.RaycastHit[], int>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Ray, float,
                        UnityEngine.RaycastHit[], int>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.SphereCastNonAlloc
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_SphereCastNonAlloc_5()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Vector3 arg2 = default(global::UnityEngine.Vector3);
            UnityEngine.RaycastHit[] arg3 = default(UnityEngine.RaycastHit[]);
            float arg4 = default(float);
            int arg5 = default(int);
            global::UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4, arg5);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics2D.CircleCast
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Physics2D_CircleCast()
        // {
        //     global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
        //     float arg1 = default(float);
        //     global::UnityEngine.Vector2 arg2 = default(global::UnityEngine.Vector2);
        //     float arg3 = default(float);
        //     int arg4 = default(int);
        //     global::UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2, arg3, arg4);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, float, UnityEngine.Vector2, float, int,
        //         UnityEngine.RaycastHit2D> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, float, UnityEngine.Vector2, float, int,
        //             UnityEngine.RaycastHit2D>(default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.PhysicsMaterial2D.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_PhysicsMaterial2D_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.PhysicsMaterial2D.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_PhysicsMaterial2D_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.PhysicsMaterial2D.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_PhysicsMaterial2D_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.PhysicsUpdateBehaviour2D.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_PhysicsUpdateBehaviour2D_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.PhysicsUpdateBehaviour2D.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_PhysicsUpdateBehaviour2D_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.PhysicsUpdateBehaviour2D.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_PhysicsUpdateBehaviour2D_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.PlatformEffector2D.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_PlatformEffector2D_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.PlatformEffector2D.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_PlatformEffector2D_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.PlatformEffector2D.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_PlatformEffector2D_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Playables.PlayableDirector.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Playables.PlayableDirector.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Playables.PlayableDirector.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Playables_PlayableDirector_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.PointEffector2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PointEffector2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.PointEffector2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PointEffector2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.PointEffector2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PointEffector2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.PolygonCollider2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PolygonCollider2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.PolygonCollider2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PolygonCollider2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.PolygonCollider2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_PolygonCollider2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Profiling.Profiler.GetTotalAllocatedMemoryLong
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Profiling_Profiler_GetTotalAllocatedMemoryLong()
        {
            global::UnityEngine.Profiling.Profiler.GetTotalAllocatedMemoryLong();
            global::Unity.VisualScripting.StaticFunctionInvoker<long> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<long>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Projector.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Projector_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Projector.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Projector_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Projector.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Projector_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.QualitySettings.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_QualitySettings_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.QualitySettings.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_QualitySettings_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.QualitySettings.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_QualitySettings_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.Euler
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_Euler()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            global::UnityEngine.Quaternion.Euler(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float, UnityEngine.Quaternion>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.eulerAngles
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_eulerAngles()
        {
            global::UnityEngine.Quaternion target = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Vector3 accessor = target.eulerAngles;
            target.eulerAngles = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Quaternion));
            optimized.SetValue(default(global::UnityEngine.Quaternion), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Quaternion.identity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_identity()
        {
            global::UnityEngine.Quaternion accessor = global::UnityEngine.Quaternion.identity;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Quaternion>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Quaternion.kEpsilon
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_kEpsilon()
        {
            float accessor = global::UnityEngine.Quaternion.kEpsilon;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Quaternion.LookRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_LookRotation()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion.LookRotation(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                    UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        UnityEngine.Quaternion>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.normalized
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_normalized()
        {
            global::UnityEngine.Quaternion target = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion accessor = target.normalized;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Quaternion));
        }

        // UnityEngine.Quaternion.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_op_Equality()
        {
            global::UnityEngine.Quaternion arg0 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion arg1 = default(global::UnityEngine.Quaternion);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Quaternion, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion,
                        UnityEngine.Quaternion, bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_op_Inequality()
        {
            global::UnityEngine.Quaternion arg0 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion arg1 = default(global::UnityEngine.Quaternion);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Quaternion, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion,
                        UnityEngine.Quaternion, bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_op_Multiply()
        {
            global::UnityEngine.Quaternion arg0 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion arg1 = default(global::UnityEngine.Quaternion);
            UnityEngine.Quaternion @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Quaternion,
                    UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion,
                        UnityEngine.Quaternion,
                        UnityEngine.Quaternion>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_op_Multiply_0()
        {
            global::UnityEngine.Quaternion arg0 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            UnityEngine.Vector3 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Vector3,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Vector3,
                        UnityEngine.Vector3>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.w
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_w()
        {
            global::UnityEngine.Quaternion target = default(global::UnityEngine.Quaternion);
            float accessor = target.w;
            target.w = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Quaternion));
            optimized.SetValue(default(global::UnityEngine.Quaternion), default(float));
        }

        // UnityEngine.Quaternion.x
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_x()
        {
            global::UnityEngine.Quaternion target = default(global::UnityEngine.Quaternion);
            float accessor = target.x;
            target.x = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Quaternion));
            optimized.SetValue(default(global::UnityEngine.Quaternion), default(float));
        }

        // UnityEngine.Quaternion.y
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_y()
        {
            global::UnityEngine.Quaternion target = default(global::UnityEngine.Quaternion);
            float accessor = target.y;
            target.y = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Quaternion));
            optimized.SetValue(default(global::UnityEngine.Quaternion), default(float));
        }

        // UnityEngine.Quaternion.z
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_z()
        {
            global::UnityEngine.Quaternion target = default(global::UnityEngine.Quaternion);
            float accessor = target.z;
            target.z = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Quaternion));
            optimized.SetValue(default(global::UnityEngine.Quaternion), default(float));
        }

        // UnityEngine.Quaternion.FromToRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_FromToRotation()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion.FromToRotation(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                    UnityEngine.Quaternion>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.Lerp
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_Lerp()
        {
            global::UnityEngine.Quaternion arg0 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion arg1 = default(global::UnityEngine.Quaternion);
            float arg2 = default(float);
            global::UnityEngine.Quaternion.Lerp(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Quaternion, float,
                UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Quaternion,
                    float, UnityEngine.Quaternion>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.LerpUnclamped
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_LerpUnclamped()
        {
            global::UnityEngine.Quaternion arg0 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion arg1 = default(global::UnityEngine.Quaternion);
            float arg2 = default(float);
            global::UnityEngine.Quaternion.LerpUnclamped(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Quaternion, float,
                UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Quaternion,
                    float, UnityEngine.Quaternion>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.LookRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_LookRotation_0()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion.LookRotation(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Quaternion>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Random.insideUnitCircle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Random_insideUnitCircle()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Random.insideUnitCircle;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Random.insideUnitSphere
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Random_insideUnitSphere()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Random.insideUnitSphere;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Random.onUnitSphere
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Random_onUnitSphere()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Random.onUnitSphere;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Quaternion.Angle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_Angle()
        {
            global::UnityEngine.Quaternion arg0 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion arg1 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion.Angle(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Quaternion, float>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion,
                        UnityEngine.Quaternion, float>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.AngleAxis
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_AngleAxis()
        {
            float arg0 = default(float);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion.AngleAxis(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Vector3, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Vector3,
                        UnityEngine.Quaternion>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Quaternion.Dot
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Quaternion_Dot()
        {
            global::UnityEngine.Quaternion arg0 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion arg1 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Quaternion.Dot(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion, UnityEngine.Quaternion, float>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Quaternion,
                        UnityEngine.Quaternion, float>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Random.Range
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Random_Range()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            global::UnityEngine.Random.Range(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Random.Range
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Random_Range_0()
        {
            int arg0 = default(int);
            int arg1 = default(int);
            global::UnityEngine.Random.Range(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<int, int, int> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<int, int, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Random.rotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Random_rotation()
        {
            global::UnityEngine.Quaternion accessor = global::UnityEngine.Random.rotation;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Quaternion>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Random.rotationUniform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Random_rotationUniform()
        {
            global::UnityEngine.Quaternion accessor = global::UnityEngine.Random.rotationUniform;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Quaternion> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Quaternion>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Random.state
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Random_state()
        {
            global::UnityEngine.Random.State accessor = global::UnityEngine.Random.state;
            global::UnityEngine.Random.state = default(global::UnityEngine.Random.State);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Random.State> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Random.State>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.Random.State));
        }

        // UnityEngine.Random.value
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Random_value()
        {
            float accessor = global::UnityEngine.Random.value;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Ray.direction
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Ray_direction()
        {
            global::UnityEngine.Ray target = default(global::UnityEngine.Ray);
            global::UnityEngine.Vector3 accessor = target.direction;
            target.direction = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Ray));
            optimized.SetValue(default(global::UnityEngine.Ray), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Ray.origin
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Ray_origin()
        {
            global::UnityEngine.Ray target = default(global::UnityEngine.Ray);
            global::UnityEngine.Vector3 accessor = target.origin;
            target.origin = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Ray));
            optimized.SetValue(default(global::UnityEngine.Ray), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RaycastHit.articulationBody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_articulationBody()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.ArticulationBody accessor = target.articulationBody;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
        }

        // UnityEngine.RaycastHit.barycentricCoordinate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_barycentricCoordinate()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Vector3 accessor = target.barycentricCoordinate;
            target.barycentricCoordinate = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
            optimized.SetValue(default(global::UnityEngine.RaycastHit), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RaycastHit.collider
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_collider()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Collider accessor = target.collider;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
        }

        // UnityEngine.RaycastHit.distance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_distance()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            float accessor = target.distance;
            target.distance = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
            optimized.SetValue(default(global::UnityEngine.RaycastHit), default(float));
        }

        // UnityEngine.RaycastHit.Equals
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_Equals()
        {
            global::System.ValueType target = default(global::System.ValueType);
            object arg0 = default(object);
            target.Equals(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::System.ValueType), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RaycastHit.lightmapCoord
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_lightmapCoord()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Vector2 accessor = target.lightmapCoord;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
        }

        // UnityEngine.RaycastHit.normal
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_normal()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Vector3 accessor = target.normal;
            target.normal = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
            optimized.SetValue(default(global::UnityEngine.RaycastHit), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RaycastHit.point
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_point()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Vector3 accessor = target.point;
            target.point = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
            optimized.SetValue(default(global::UnityEngine.RaycastHit), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RaycastHit.rigidbody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_rigidbody()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Rigidbody accessor = target.rigidbody;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
        }

        // UnityEngine.RaycastHit.textureCoord
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_textureCoord()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Vector2 accessor = target.textureCoord;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
        }

        // UnityEngine.RaycastHit.textureCoord2
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_textureCoord2()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Vector2 accessor = target.textureCoord2;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
        }

        // UnityEngine.RaycastHit.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_transform()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
        }

        // UnityEngine.RaycastHit.triangleIndex
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RaycastHit_triangleIndex()
        {
            global::UnityEngine.RaycastHit target = default(global::UnityEngine.RaycastHit);
            int accessor = target.triangleIndex;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RaycastHit));
        }

        // UnityEngine.RaycastHit2D.centroid
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_RaycastHit2D_centroid()
        // {
        //     global::UnityEngine.RaycastHit2D target = default(global::UnityEngine.RaycastHit2D);
        //     global::UnityEngine.Vector2 accessor = target.centroid;
        //     target.centroid = default(global::UnityEngine.Vector2);
        //     global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
        //         new global::Unity.VisualScripting.ReflectionPropertyAccessor(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.RaycastHit2D));
        //     optimized.SetValue(default(global::UnityEngine.RaycastHit2D), default(global::UnityEngine.Vector2));
        // }

        // UnityEngine.RaycastHit2D.collider
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_RaycastHit2D_collider()
        // {
        //     global::UnityEngine.RaycastHit2D target = default(global::UnityEngine.RaycastHit2D);
        //     global::UnityEngine.Collider2D accessor = target.collider;
        //     global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
        //         new global::Unity.VisualScripting.ReflectionPropertyAccessor(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.RaycastHit2D));
        // }

        // UnityEngine.RaycastHit2D.distance
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_RaycastHit2D_distance()
        // {
        //     global::UnityEngine.RaycastHit2D target = default(global::UnityEngine.RaycastHit2D);
        //     float accessor = target.distance;
        //     target.distance = default(float);
        //     global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
        //         new global::Unity.VisualScripting.ReflectionPropertyAccessor(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.RaycastHit2D));
        //     optimized.SetValue(default(global::UnityEngine.RaycastHit2D), default(float));
        // }

        // UnityEngine.RaycastHit2D.fraction
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_RaycastHit2D_fraction()
        // {
        //     global::UnityEngine.RaycastHit2D target = default(global::UnityEngine.RaycastHit2D);
        //     float accessor = target.fraction;
        //     target.fraction = default(float);
        //     global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
        //         new global::Unity.VisualScripting.ReflectionPropertyAccessor(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.RaycastHit2D));
        //     optimized.SetValue(default(global::UnityEngine.RaycastHit2D), default(float));
        // }

        // UnityEngine.RaycastHit2D.normal
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_RaycastHit2D_normal()
        // {
        //     global::UnityEngine.RaycastHit2D target = default(global::UnityEngine.RaycastHit2D);
        //     global::UnityEngine.Vector2 accessor = target.normal;
        //     target.normal = default(global::UnityEngine.Vector2);
        //     global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
        //         new global::Unity.VisualScripting.ReflectionPropertyAccessor(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.RaycastHit2D));
        //     optimized.SetValue(default(global::UnityEngine.RaycastHit2D), default(global::UnityEngine.Vector2));
        // }

        // UnityEngine.RaycastHit2D.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_RaycastHit2D_op_Implicit()
        // {
        //     global::UnityEngine.RaycastHit2D arg0 = default(global::UnityEngine.RaycastHit2D);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.RaycastHit2D, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.RaycastHit2D, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.RaycastHit2D.point
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_RaycastHit2D_point()
        // {
        //     global::UnityEngine.RaycastHit2D target = default(global::UnityEngine.RaycastHit2D);
        //     global::UnityEngine.Vector2 accessor = target.point;
        //     target.point = default(global::UnityEngine.Vector2);
        //     global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
        //         new global::Unity.VisualScripting.ReflectionPropertyAccessor(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.RaycastHit2D));
        //     optimized.SetValue(default(global::UnityEngine.RaycastHit2D), default(global::UnityEngine.Vector2));
        // }

        // UnityEngine.RaycastHit2D.rigidbody
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_RaycastHit2D_rigidbody()
        // {
        //     global::UnityEngine.RaycastHit2D target = default(global::UnityEngine.RaycastHit2D);
        //     global::UnityEngine.Rigidbody2D accessor = target.rigidbody;
        //     global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
        //         new global::Unity.VisualScripting.ReflectionPropertyAccessor(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.RaycastHit2D));
        // }

        // UnityEngine.RaycastHit2D.transform
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_RaycastHit2D_transform()
        // {
        //     global::UnityEngine.RaycastHit2D target = default(global::UnityEngine.RaycastHit2D);
        //     global::UnityEngine.Transform accessor = target.transform;
        //     global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
        //         new global::Unity.VisualScripting.ReflectionPropertyAccessor(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.RaycastHit2D));
        // }

        // UnityEngine.Rect..ctor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_ctor()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            float arg3 = default(float);
            new UnityEngine.Rect(arg0, arg1, arg2, arg3);
        }

        // UnityEngine.Rect.center
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_center()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            global::UnityEngine.Vector2 accessor = target.center;
            target.center = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Rect.height
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_height()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            float accessor = target.height;
            target.height = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(float));
        }

        // UnityEngine.Rect.max
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_max()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            global::UnityEngine.Vector2 accessor = target.max;
            target.max = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Rect.min
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_min()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            global::UnityEngine.Vector2 accessor = target.min;
            target.min = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Rect.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_op_Equality()
        {
            global::UnityEngine.Rect arg0 = default(global::UnityEngine.Rect);
            global::UnityEngine.Rect arg1 = default(global::UnityEngine.Rect);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Rect, UnityEngine.Rect, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Rect, UnityEngine.Rect, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rect.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_op_Inequality()
        {
            global::UnityEngine.Rect arg0 = default(global::UnityEngine.Rect);
            global::UnityEngine.Rect arg1 = default(global::UnityEngine.Rect);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Rect, UnityEngine.Rect, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Rect, UnityEngine.Rect, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rect.position
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_position()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            global::UnityEngine.Vector2 accessor = target.position;
            target.position = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Rect.size
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_size()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            global::UnityEngine.Vector2 accessor = target.size;
            target.size = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Rect.width
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_width()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            float accessor = target.width;
            target.width = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(float));
        }

        // UnityEngine.Rect.x
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_x()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            float accessor = target.x;
            target.x = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(float));
        }

        // UnityEngine.Rect.xMax
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_xMax()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            float accessor = target.xMax;
            target.xMax = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(float));
        }

        // UnityEngine.Rect.xMin
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_xMin()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            float accessor = target.xMin;
            target.xMin = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(float));
        }

        // UnityEngine.Rect.y
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_y()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            float accessor = target.y;
            target.y = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(float));
        }

        // UnityEngine.Rect.yMax
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_yMax()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            float accessor = target.yMax;
            target.yMax = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(float));
        }

        // UnityEngine.Rect.yMin
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_yMin()
        {
            global::UnityEngine.Rect target = default(global::UnityEngine.Rect);
            float accessor = target.yMin;
            target.yMin = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rect));
            optimized.SetValue(default(global::UnityEngine.Rect), default(float));
        }

        // UnityEngine.Rect.zero
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rect_zero()
        {
            global::UnityEngine.Rect accessor = global::UnityEngine.Rect.zero;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Rect> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Rect>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Transform.Find
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_Find()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            string arg0 = default(string);
            target.Find(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, string, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, string,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RectTransform.forward
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_forward()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.forward;
            target.forward = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RectTransform.GetChild
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_GetChild()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            int arg0 = default(int);
            target.GetChild(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, int, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, int,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RectTransform.GetLocalCorners
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_GetLocalCorners()
        {
            global::UnityEngine.RectTransform target = default(global::UnityEngine.RectTransform);
            UnityEngine.Vector3[] arg0 = default(UnityEngine.Vector3[]);
            target.GetLocalCorners(arg0);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.RectTransform, UnityEngine.Vector3[]>
                optimized =
                    new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.RectTransform,
                        UnityEngine.Vector3[]>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.RectTransform), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RectTransform.localEulerAngles
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_localEulerAngles()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.localEulerAngles;
            target.localEulerAngles = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RectTransform.localPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_localPosition()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.localPosition;
            target.localPosition = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RectTransform.localRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_localRotation()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Quaternion accessor = target.localRotation;
            target.localRotation = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Quaternion));
        }

        // UnityEngine.RectTransform.localScale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_localScale()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.localScale;
            target.localScale = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RectTransform.localToWorldMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_localToWorldMatrix()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Matrix4x4 accessor = target.localToWorldMatrix;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.RectTransform.lossyScale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_lossyScale()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.lossyScale;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.RectTransform.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RectTransform.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RectTransform.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RectTransform.parent
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_parent()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Transform accessor = target.parent;
            target.parent = default(global::UnityEngine.Transform);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Transform));
        }

        // UnityEngine.RectTransform.pivot
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_pivot()
        {
            global::UnityEngine.RectTransform target = default(global::UnityEngine.RectTransform);
            global::UnityEngine.Vector2 accessor = target.pivot;
            target.pivot = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.RectTransform, UnityEngine.Vector2>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.RectTransform,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RectTransform));
            optimized.SetValue(default(global::UnityEngine.RectTransform), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.RectTransform.position
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_position()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.position;
            target.position = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RectTransform.rect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_rect()
        {
            global::UnityEngine.RectTransform target = default(global::UnityEngine.RectTransform);
            global::UnityEngine.Rect accessor = target.rect;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.RectTransform, UnityEngine.Rect>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.RectTransform,
                        UnityEngine.Rect>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.RectTransform));
        }

        // UnityEngine.RectTransform.right
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_right()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.right;
            target.right = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.RectTransform.root
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_root()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Transform accessor = target.root;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.RectTransform.worldToLocalMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RectTransform_worldToLocalMatrix()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Matrix4x4 accessor = target.worldToLocalMatrix;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.ReflectionProbe.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ReflectionProbe_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ReflectionProbe.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ReflectionProbe_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ReflectionProbe.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ReflectionProbe_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RelativeJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RelativeJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RelativeJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RelativeJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RelativeJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RelativeJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Renderer.allowOcclusionWhenDynamic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_allowOcclusionWhenDynamic()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            bool accessor = target.allowOcclusionWhenDynamic;
            target.allowOcclusionWhenDynamic = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(bool));
        }

        // UnityEngine.Renderer.bounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_bounds()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Bounds accessor = target.bounds;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Bounds> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Bounds>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
        }

        // UnityEngine.Renderer.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_enabled()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(bool));
        }

        // UnityEngine.Renderer.forceRenderingOff
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_forceRenderingOff()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            bool accessor = target.forceRenderingOff;
            target.forceRenderingOff = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(bool));
        }

        // UnityEngine.Renderer.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Renderer.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Renderer.isPartOfStaticBatch
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_isPartOfStaticBatch()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            bool accessor = target.isPartOfStaticBatch;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
        }

        // UnityEngine.Renderer.isVisible
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_isVisible()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            bool accessor = target.isVisible;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
        }

        // UnityEngine.Renderer.lightmapIndex
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_lightmapIndex()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            int accessor = target.lightmapIndex;
            target.lightmapIndex = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(int));
        }

        // UnityEngine.Renderer.lightmapScaleOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_lightmapScaleOffset()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Vector4 accessor = target.lightmapScaleOffset;
            target.lightmapScaleOffset = default(global::UnityEngine.Vector4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Vector4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Vector4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(global::UnityEngine.Vector4));
        }

        // UnityEngine.Renderer.lightProbeProxyVolumeOverride
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_lightProbeProxyVolumeOverride()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.GameObject accessor = target.lightProbeProxyVolumeOverride;
            target.lightProbeProxyVolumeOverride = default(global::UnityEngine.GameObject);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(global::UnityEngine.GameObject));
        }

        // UnityEngine.Renderer.lightProbeUsage
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_lightProbeUsage()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Rendering.LightProbeUsage accessor = target.lightProbeUsage;
            target.lightProbeUsage = default(global::UnityEngine.Rendering.LightProbeUsage);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                    UnityEngine.Rendering.LightProbeUsage>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Rendering.LightProbeUsage>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer),
                default(global::UnityEngine.Rendering.LightProbeUsage));
        }

        // UnityEngine.Renderer.localToWorldMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_localToWorldMatrix()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Matrix4x4 accessor = target.localToWorldMatrix;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
        }

        // UnityEngine.Renderer.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_material()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Material accessor = target.material;
            target.material = default(global::UnityEngine.Material);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(global::UnityEngine.Material));
        }

        // UnityEngine.Renderer.materials
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_materials()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            UnityEngine.Material[] accessor = target.materials;
            target.materials = default(UnityEngine.Material[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Material[]>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Material[]>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(UnityEngine.Material[]));
        }

        // UnityEngine.Renderer.motionVectorGenerationMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_motionVectorGenerationMode()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.MotionVectorGenerationMode accessor = target.motionVectorGenerationMode;
            target.motionVectorGenerationMode = default(global::UnityEngine.MotionVectorGenerationMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                    UnityEngine.MotionVectorGenerationMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.MotionVectorGenerationMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer),
                default(global::UnityEngine.MotionVectorGenerationMode));
        }

        // UnityEngine.Renderer.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Renderer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Renderer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Renderer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Renderer.probeAnchor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_probeAnchor()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Transform accessor = target.probeAnchor;
            target.probeAnchor = default(global::UnityEngine.Transform);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(global::UnityEngine.Transform));
        }

        // UnityEngine.Renderer.rayTracingMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_rayTracingMode()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Experimental.Rendering.RayTracingMode accessor = target.rayTracingMode;
            target.rayTracingMode = default(global::UnityEngine.Experimental.Rendering.RayTracingMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                UnityEngine.Experimental.Rendering.RayTracingMode> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                    UnityEngine.Experimental.Rendering.RayTracingMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer),
                default(global::UnityEngine.Experimental.Rendering.RayTracingMode));
        }

        // UnityEngine.Renderer.realtimeLightmapIndex
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_realtimeLightmapIndex()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            int accessor = target.realtimeLightmapIndex;
            target.realtimeLightmapIndex = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(int));
        }

        // UnityEngine.Renderer.realtimeLightmapScaleOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_realtimeLightmapScaleOffset()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Vector4 accessor = target.realtimeLightmapScaleOffset;
            target.realtimeLightmapScaleOffset = default(global::UnityEngine.Vector4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Vector4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Vector4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(global::UnityEngine.Vector4));
        }

        // UnityEngine.Renderer.receiveShadows
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_receiveShadows()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            bool accessor = target.receiveShadows;
            target.receiveShadows = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(bool));
        }

        // UnityEngine.Renderer.reflectionProbeUsage
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_reflectionProbeUsage()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Rendering.ReflectionProbeUsage accessor = target.reflectionProbeUsage;
            target.reflectionProbeUsage = default(global::UnityEngine.Rendering.ReflectionProbeUsage);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                    UnityEngine.Rendering.ReflectionProbeUsage>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Rendering.ReflectionProbeUsage>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer),
                default(global::UnityEngine.Rendering.ReflectionProbeUsage));
        }

        // UnityEngine.Renderer.rendererPriority
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_rendererPriority()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            int accessor = target.rendererPriority;
            target.rendererPriority = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(int));
        }

        // UnityEngine.Renderer.renderingLayerMask
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_renderingLayerMask()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            uint accessor = target.renderingLayerMask;
            target.renderingLayerMask = default(uint);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(uint));
        }

        // UnityEngine.Renderer.shadowCastingMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_shadowCastingMode()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Rendering.ShadowCastingMode accessor = target.shadowCastingMode;
            target.shadowCastingMode = default(global::UnityEngine.Rendering.ShadowCastingMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                    UnityEngine.Rendering.ShadowCastingMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Rendering.ShadowCastingMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer),
                default(global::UnityEngine.Rendering.ShadowCastingMode));
        }

        // UnityEngine.Renderer.sharedMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_sharedMaterial()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Material accessor = target.sharedMaterial;
            target.sharedMaterial = default(global::UnityEngine.Material);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(global::UnityEngine.Material));
        }

        // UnityEngine.Renderer.sharedMaterials
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_sharedMaterials()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            UnityEngine.Material[] accessor = target.sharedMaterials;
            target.sharedMaterials = default(UnityEngine.Material[]);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Material[]>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Material[]>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(UnityEngine.Material[]));
        }

        // UnityEngine.Renderer.sortingLayerID
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_sortingLayerID()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            int accessor = target.sortingLayerID;
            target.sortingLayerID = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(int));
        }

        // UnityEngine.Renderer.sortingLayerName
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_sortingLayerName()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            string accessor = target.sortingLayerName;
            target.sortingLayerName = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(string));
        }

        // UnityEngine.Renderer.sortingOrder
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_sortingOrder()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            int accessor = target.sortingOrder;
            target.sortingOrder = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
            optimized.SetValue(default(global::UnityEngine.Renderer), default(int));
        }

        // UnityEngine.Renderer.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Renderer.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Renderer.worldToLocalMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Renderer_worldToLocalMatrix()
        {
            global::UnityEngine.Renderer target = default(global::UnityEngine.Renderer);
            global::UnityEngine.Matrix4x4 accessor = target.worldToLocalMatrix;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Renderer,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Renderer));
        }

        // UnityEngine.Rendering.GraphicsSettings.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_GraphicsSettings_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rendering.GraphicsSettings.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_GraphicsSettings_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rendering.GraphicsSettings.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_GraphicsSettings_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rendering.SortingGroup.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rendering.SortingGroup.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rendering.SortingGroup.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rendering_SortingGroup_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RenderSettings.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RenderSettings_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RenderSettings.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RenderSettings_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RenderSettings.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RenderSettings_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RenderTexture.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RenderTexture_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RenderTexture.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RenderTexture_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RenderTexture.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RenderTexture_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rigidbody.AddForce
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_AddForce()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            target.AddForce(arg0);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Rigidbody, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Rigidbody, UnityEngine.Vector3>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Rigidbody), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rigidbody.AddForce
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_AddForce_0()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.ForceMode arg1 = default(global::UnityEngine.ForceMode);
            target.AddForce(arg0, arg1);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Rigidbody, UnityEngine.Vector3,
                    UnityEngine.ForceMode>
                optimized =
                    new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Rigidbody, UnityEngine.Vector3,
                        UnityEngine.ForceMode>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Rigidbody), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rigidbody.angularDrag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_angularDrag()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            float accessor = target.angularDrag;
            target.angularDrag = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(float));
        }

        // UnityEngine.Rigidbody.angularVelocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_angularVelocity()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Vector3 accessor = target.angularVelocity;
            target.angularVelocity = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Rigidbody.centerOfMass
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_centerOfMass()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Vector3 accessor = target.centerOfMass;
            target.centerOfMass = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Rigidbody.collisionDetectionMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_collisionDetectionMode()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.CollisionDetectionMode accessor = target.collisionDetectionMode;
            target.collisionDetectionMode = default(global::UnityEngine.CollisionDetectionMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                UnityEngine.CollisionDetectionMode> optimized
                = new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                    UnityEngine.CollisionDetectionMode>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody),
                default(global::UnityEngine.CollisionDetectionMode));
        }

        // UnityEngine.Rigidbody.constraints
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_constraints()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.RigidbodyConstraints accessor = target.constraints;
            target.constraints = default(global::UnityEngine.RigidbodyConstraints);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                UnityEngine.RigidbodyConstraints> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                    UnityEngine.RigidbodyConstraints>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody),
                default(global::UnityEngine.RigidbodyConstraints));
        }

        // UnityEngine.Rigidbody.detectCollisions
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_detectCollisions()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            bool accessor = target.detectCollisions;
            target.detectCollisions = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(bool));
        }

        // UnityEngine.Rigidbody.drag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_drag()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            float accessor = target.drag;
            target.drag = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(float));
        }

        // UnityEngine.Rigidbody.freezeRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_freezeRotation()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            bool accessor = target.freezeRotation;
            target.freezeRotation = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(bool));
        }

        // UnityEngine.Rigidbody.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Rigidbody.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Rigidbody.inertiaTensor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_inertiaTensor()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Vector3 accessor = target.inertiaTensor;
            target.inertiaTensor = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Rigidbody.inertiaTensorRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_inertiaTensorRotation()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Quaternion accessor = target.inertiaTensorRotation;
            target.inertiaTensorRotation = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(global::UnityEngine.Quaternion));
        }

        // UnityEngine.Rigidbody.interpolation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_interpolation()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.RigidbodyInterpolation accessor = target.interpolation;
            target.interpolation = default(global::UnityEngine.RigidbodyInterpolation);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                UnityEngine.RigidbodyInterpolation> optimized
                = new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                    UnityEngine.RigidbodyInterpolation>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody),
                default(global::UnityEngine.RigidbodyInterpolation));
        }

        // UnityEngine.Rigidbody.isKinematic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_isKinematic()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            bool accessor = target.isKinematic;
            target.isKinematic = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(bool));
        }

        // UnityEngine.Rigidbody.mass
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_mass()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            float accessor = target.mass;
            target.mass = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(float));
        }

        // UnityEngine.Rigidbody.maxAngularVelocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_maxAngularVelocity()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            float accessor = target.maxAngularVelocity;
            target.maxAngularVelocity = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(float));
        }

        // UnityEngine.Rigidbody.maxDepenetrationVelocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_maxDepenetrationVelocity()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            float accessor = target.maxDepenetrationVelocity;
            target.maxDepenetrationVelocity = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(float));
        }

        // UnityEngine.Rigidbody.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Rigidbody.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rigidbody.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rigidbody.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Rigidbody.position
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_position()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Vector3 accessor = target.position;
            target.position = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Rigidbody.rotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_rotation()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Quaternion accessor = target.rotation;
            target.rotation = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(global::UnityEngine.Quaternion));
        }

        // UnityEngine.Rigidbody.sleepThreshold
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_sleepThreshold()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            float accessor = target.sleepThreshold;
            target.sleepThreshold = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(float));
        }

        // UnityEngine.Rigidbody.solverIterations
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_solverIterations()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            int accessor = target.solverIterations;
            target.solverIterations = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(int));
        }

        // UnityEngine.Rigidbody.solverVelocityIterations
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_solverVelocityIterations()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            int accessor = target.solverVelocityIterations;
            target.solverVelocityIterations = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(int));
        }

        // UnityEngine.Rigidbody.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Rigidbody.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Rigidbody.useGravity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_useGravity()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            bool accessor = target.useGravity;
            target.useGravity = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(bool));
        }

        // UnityEngine.Rigidbody.velocity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_velocity()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Vector3 accessor = target.velocity;
            target.velocity = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
            optimized.SetValue(default(global::UnityEngine.Rigidbody), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Rigidbody.worldCenterOfMass
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Rigidbody_worldCenterOfMass()
        {
            global::UnityEngine.Rigidbody target = default(global::UnityEngine.Rigidbody);
            global::UnityEngine.Vector3 accessor = target.worldCenterOfMass;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Rigidbody));
        }

        // UnityEngine.Rigidbody2D.AddForce
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Rigidbody2D_AddForce()
        // {
        //     global::UnityEngine.Rigidbody2D target = default(global::UnityEngine.Rigidbody2D);
        //     global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
        //     global::UnityEngine.ForceMode2D arg1 = default(global::UnityEngine.ForceMode2D);
        //     target.AddForce(arg0, arg1);
        //     global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Rigidbody2D, UnityEngine.Vector2, UnityEngine.ForceMode2D>
        //         optimized =
        //             new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Rigidbody2D, UnityEngine.Vector2,
        //                 UnityEngine.ForceMode2D>(default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(default(global::UnityEngine.Rigidbody2D), arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Rigidbody2D.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Rigidbody2D_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Rigidbody2D.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Rigidbody2D_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Rigidbody2D.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Rigidbody2D_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Rigidbody2D.velocity
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Rigidbody2D_velocity()
        // {
        //     global::UnityEngine.Rigidbody2D target = default(global::UnityEngine.Rigidbody2D);
        //     global::UnityEngine.Vector2 accessor = target.velocity;
        //     target.velocity = default(global::UnityEngine.Vector2);
        //     global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody2D, UnityEngine.Vector2> optimized =
        //         new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Rigidbody2D, UnityEngine.Vector2>(
        //             default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.Rigidbody2D));
        //     optimized.SetValue(default(global::UnityEngine.Rigidbody2D), default(global::UnityEngine.Vector2));
        // }

        // UnityEngine.RuntimeAnimatorController.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RuntimeAnimatorController_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RuntimeAnimatorController.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RuntimeAnimatorController_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.RuntimeAnimatorController.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_RuntimeAnimatorController_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SceneManagement.Scene.name
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_SceneManagement_Scene_name()
        // {
        //     global::UnityEngine.SceneManagement.Scene target = default(global::UnityEngine.SceneManagement.Scene);
        //     string accessor = target.name;
        //     target.name = default(string);
        //     global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
        //         new global::Unity.VisualScripting.ReflectionPropertyAccessor(default(global::System.Reflection.PropertyInfo));
        //     optimized.GetValue(default(global::UnityEngine.SceneManagement.Scene));
        //     optimized.SetValue(default(global::UnityEngine.SceneManagement.Scene), default(string));
        // }

        // UnityEngine.SceneManagement.Scene.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_SceneManagement_Scene_op_Equality()
        // {
        //     global::UnityEngine.SceneManagement.Scene arg0 = default(global::UnityEngine.SceneManagement.Scene);
        //     global::UnityEngine.SceneManagement.Scene arg1 = default(global::UnityEngine.SceneManagement.Scene);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene,
        //         bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.SceneManagement.Scene,
        //             UnityEngine.SceneManagement.Scene, bool>(default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.SceneManagement.Scene.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_SceneManagement_Scene_op_Inequality()
        // {
        //     global::UnityEngine.SceneManagement.Scene arg0 = default(global::UnityEngine.SceneManagement.Scene);
        //     global::UnityEngine.SceneManagement.Scene arg1 = default(global::UnityEngine.SceneManagement.Scene);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene,
        //         bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.SceneManagement.Scene,
        //             UnityEngine.SceneManagement.Scene, bool>(default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.SceneManagement.SceneManager.GetActiveScene
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_SceneManagement_SceneManager_GetActiveScene()
        // {
        //     global::UnityEngine.SceneManagement.SceneManager.GetActiveScene();
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.SceneManagement.Scene> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.SceneManagement.Scene>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.SceneManagement.SceneManager.LoadScene
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_SceneManagement_SceneManager_LoadScene()
        // {
        //     string arg0 = default(string);
        //     global::UnityEngine.SceneManagement.LoadSceneMode arg1 =
        //         default(global::UnityEngine.SceneManagement.LoadSceneMode);
        //     global::UnityEngine.SceneManagement.SceneManager.LoadScene(arg0, arg1);
        //     global::Unity.VisualScripting.StaticActionInvoker<string, UnityEngine.SceneManagement.LoadSceneMode> optimized =
        //         new global::Unity.VisualScripting.StaticActionInvoker<string, UnityEngine.SceneManagement.LoadSceneMode>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.SceneManagement.SceneManager.LoadScene
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_SceneManagement_SceneManager_LoadScene_0()
        // {
        //     string arg0 = default(string);
        //     global::UnityEngine.SceneManagement.SceneManager.LoadScene(arg0);
        //     global::Unity.VisualScripting.StaticActionInvoker<string> optimized =
        //         new global::Unity.VisualScripting.StaticActionInvoker<string>(default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Screen.autorotateToLandscapeLeft
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_autorotateToLandscapeLeft()
        {
            bool accessor = global::UnityEngine.Screen.autorotateToLandscapeLeft;
            global::UnityEngine.Screen.autorotateToLandscapeLeft = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Screen.autorotateToLandscapeRight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_autorotateToLandscapeRight()
        {
            bool accessor = global::UnityEngine.Screen.autorotateToLandscapeRight;
            global::UnityEngine.Screen.autorotateToLandscapeRight = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Screen.autorotateToPortrait
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_autorotateToPortrait()
        {
            bool accessor = global::UnityEngine.Screen.autorotateToPortrait;
            global::UnityEngine.Screen.autorotateToPortrait = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Screen.autorotateToPortraitUpsideDown
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_autorotateToPortraitUpsideDown()
        {
            bool accessor = global::UnityEngine.Screen.autorotateToPortraitUpsideDown;
            global::UnityEngine.Screen.autorotateToPortraitUpsideDown = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Screen.brightness
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_brightness()
        {
            float accessor = global::UnityEngine.Screen.brightness;
            global::UnityEngine.Screen.brightness = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Screen.currentResolution
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_currentResolution()
        {
            global::UnityEngine.Resolution accessor = global::UnityEngine.Screen.currentResolution;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Resolution> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Resolution>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Screen.cutouts
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_cutouts()
        {
            UnityEngine.Rect[] accessor = global::UnityEngine.Screen.cutouts;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Rect[]> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Rect[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Screen.dpi
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_dpi()
        {
            float accessor = global::UnityEngine.Screen.dpi;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Screen.fullScreen
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_fullScreen()
        {
            bool accessor = global::UnityEngine.Screen.fullScreen;
            global::UnityEngine.Screen.fullScreen = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Screen.fullScreenMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_fullScreenMode()
        {
            global::UnityEngine.FullScreenMode accessor = global::UnityEngine.Screen.fullScreenMode;
            global::UnityEngine.Screen.fullScreenMode = default(global::UnityEngine.FullScreenMode);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.FullScreenMode> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.FullScreenMode>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.FullScreenMode));
        }

        // UnityEngine.Screen.height
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_height()
        {
            int accessor = global::UnityEngine.Screen.height;
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Screen.orientation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_orientation()
        {
            global::UnityEngine.ScreenOrientation accessor = global::UnityEngine.Screen.orientation;
            global::UnityEngine.Screen.orientation = default(global::UnityEngine.ScreenOrientation);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.ScreenOrientation> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.ScreenOrientation>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.ScreenOrientation));
        }

        // UnityEngine.Screen.resolutions
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_resolutions()
        {
            UnityEngine.Resolution[] accessor = global::UnityEngine.Screen.resolutions;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Resolution[]> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Resolution[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Screen.safeArea
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_safeArea()
        {
            global::UnityEngine.Rect accessor = global::UnityEngine.Screen.safeArea;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Rect> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Rect>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Screen.sleepTimeout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_sleepTimeout()
        {
            int accessor = global::UnityEngine.Screen.sleepTimeout;
            global::UnityEngine.Screen.sleepTimeout = default(int);
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(int));
        }

        // UnityEngine.Screen.width
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Screen_width()
        {
            int accessor = global::UnityEngine.Screen.width;
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.ScriptableObject.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ScriptableObject_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ScriptableObject.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ScriptableObject_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ScriptableObject.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ScriptableObject_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Shader.globalMaximumLOD
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_globalMaximumLOD()
        {
            int accessor = global::UnityEngine.Shader.globalMaximumLOD;
            global::UnityEngine.Shader.globalMaximumLOD = default(int);
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(int));
        }

        // UnityEngine.Shader.globalRenderPipeline
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_globalRenderPipeline()
        {
            string accessor = global::UnityEngine.Shader.globalRenderPipeline;
            global::UnityEngine.Shader.globalRenderPipeline = default(string);
            global::Unity.VisualScripting.StaticPropertyAccessor<string> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(string));
        }

        // UnityEngine.Shader.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Shader.isSupported
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_isSupported()
        {
            global::UnityEngine.Shader target = default(global::UnityEngine.Shader);
            bool accessor = target.isSupported;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Shader, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Shader, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Shader));
        }

        // UnityEngine.Shader.maximumLOD
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_maximumLOD()
        {
            global::UnityEngine.Shader target = default(global::UnityEngine.Shader);
            int accessor = target.maximumLOD;
            target.maximumLOD = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Shader, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Shader, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Shader));
            optimized.SetValue(default(global::UnityEngine.Shader), default(int));
        }

        // UnityEngine.Shader.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Shader.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Shader.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Shader.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Shader.passCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_passCount()
        {
            global::UnityEngine.Shader target = default(global::UnityEngine.Shader);
            int accessor = target.passCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Shader, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Shader, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Shader));
        }

        // UnityEngine.Shader.renderQueue
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Shader_renderQueue()
        {
            global::UnityEngine.Shader target = default(global::UnityEngine.Shader);
            int accessor = target.renderQueue;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Shader, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Shader, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Shader));
        }

        // UnityEngine.ShaderVariantCollection.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ShaderVariantCollection_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ShaderVariantCollection.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ShaderVariantCollection_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.ShaderVariantCollection.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_ShaderVariantCollection_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SkinnedMeshRenderer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SkinnedMeshRenderer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SkinnedMeshRenderer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SkinnedMeshRenderer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SkinnedMeshRenderer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SkinnedMeshRenderer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Skybox.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Skybox_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Skybox.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Skybox_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Skybox.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Skybox_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SliderJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SliderJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SliderJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SliderJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SliderJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SliderJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SparseTexture.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SparseTexture_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SparseTexture.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SparseTexture_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SparseTexture.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SparseTexture_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpatialTracking.TrackedPoseDriver.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpatialTracking_TrackedPoseDriver_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpatialTracking.TrackedPoseDriver.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpatialTracking_TrackedPoseDriver_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpatialTracking.TrackedPoseDriver.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpatialTracking_TrackedPoseDriver_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SphereCollider.attachedArticulationBody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_attachedArticulationBody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.ArticulationBody accessor = target.attachedArticulationBody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.ArticulationBody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.ArticulationBody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.SphereCollider.attachedRigidbody
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_attachedRigidbody()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Rigidbody accessor = target.attachedRigidbody;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Rigidbody>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.Rigidbody>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.SphereCollider.bounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_bounds()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.Bounds accessor = target.bounds;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.Bounds>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
        }

        // UnityEngine.SphereCollider.center
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_center()
        {
            global::UnityEngine.SphereCollider target = default(global::UnityEngine.SphereCollider);
            global::UnityEngine.Vector3 accessor = target.center;
            target.center = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.SphereCollider, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.SphereCollider,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.SphereCollider));
            optimized.SetValue(default(global::UnityEngine.SphereCollider), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.SphereCollider.contactOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_contactOffset()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            float accessor = target.contactOffset;
            target.contactOffset = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(float));
        }

        // UnityEngine.SphereCollider.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_enabled()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.SphereCollider.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.SphereCollider.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.SphereCollider.isTrigger
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_isTrigger()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            bool accessor = target.isTrigger;
            target.isTrigger = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(bool));
        }

        // UnityEngine.SphereCollider.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_material()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.material;
            target.material = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.SphereCollider.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.SphereCollider.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SphereCollider.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SphereCollider.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SphereCollider.radius
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_radius()
        {
            global::UnityEngine.SphereCollider target = default(global::UnityEngine.SphereCollider);
            float accessor = target.radius;
            target.radius = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.SphereCollider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.SphereCollider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.SphereCollider));
            optimized.SetValue(default(global::UnityEngine.SphereCollider), default(float));
        }

        // UnityEngine.SphereCollider.sharedMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_sharedMaterial()
        {
            global::UnityEngine.Collider target = default(global::UnityEngine.Collider);
            global::UnityEngine.PhysicMaterial accessor = target.sharedMaterial;
            target.sharedMaterial = default(global::UnityEngine.PhysicMaterial);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider, UnityEngine.PhysicMaterial>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Collider,
                        UnityEngine.PhysicMaterial>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Collider));
            optimized.SetValue(default(global::UnityEngine.Collider), default(global::UnityEngine.PhysicMaterial));
        }

        // UnityEngine.SphereCollider.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.SphereCollider.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SphereCollider_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.SpringJoint.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpringJoint_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpringJoint.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpringJoint_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpringJoint.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpringJoint_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpringJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpringJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpringJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpringJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpringJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpringJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Sprite.associatedAlphaSplitTexture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_associatedAlphaSplitTexture()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.Texture2D accessor = target.associatedAlphaSplitTexture;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Texture2D>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite,
                        UnityEngine.Texture2D>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.border
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_border()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.Vector4 accessor = target.border;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector4>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.bounds
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_bounds()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.Bounds accessor = target.bounds;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Bounds> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Bounds>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Sprite.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Sprite.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Sprite.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Sprite.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Sprite.packed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_packed()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            bool accessor = target.packed;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.packingMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_packingMode()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.SpritePackingMode accessor = target.packingMode;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.SpritePackingMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite,
                        UnityEngine.SpritePackingMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.packingRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_packingRotation()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.SpritePackingRotation accessor = target.packingRotation;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite,
                UnityEngine.SpritePackingRotation> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite,
                    UnityEngine.SpritePackingRotation>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.pivot
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_pivot()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.Vector2 accessor = target.pivot;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.pixelsPerUnit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_pixelsPerUnit()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            float accessor = target.pixelsPerUnit;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.rect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_rect()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.Rect accessor = target.rect;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Rect> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Rect>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.spriteAtlasTextureScale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_spriteAtlasTextureScale()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            float accessor = target.spriteAtlasTextureScale;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.texture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_texture()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.Texture2D accessor = target.texture;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Texture2D>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite,
                        UnityEngine.Texture2D>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.textureRect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_textureRect()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.Rect accessor = target.textureRect;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Rect> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Rect>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.textureRectOffset
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_textureRectOffset()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            global::UnityEngine.Vector2 accessor = target.textureRectOffset;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.triangles
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_triangles()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            ushort[] accessor = target.triangles;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, ushort[]> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, ushort[]>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.uv
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_uv()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            UnityEngine.Vector2[] accessor = target.uv;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector2[]>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector2
                        []>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.Sprite.vertices
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Sprite_vertices()
        {
            global::UnityEngine.Sprite target = default(global::UnityEngine.Sprite);
            UnityEngine.Vector2[] accessor = target.vertices;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector2[]>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Sprite, UnityEngine.Vector2
                        []>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Sprite));
        }

        // UnityEngine.SpriteMask.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpriteMask_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpriteMask.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpriteMask_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpriteMask.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpriteMask_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpriteRenderer.color
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpriteRenderer_color()
        {
            global::UnityEngine.SpriteRenderer target = default(global::UnityEngine.SpriteRenderer);
            global::UnityEngine.Color accessor = target.color;
            target.color = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.SpriteRenderer, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.SpriteRenderer,
                        UnityEngine.Color>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.SpriteRenderer));
            optimized.SetValue(default(global::UnityEngine.SpriteRenderer), default(global::UnityEngine.Color));
        }

        // UnityEngine.SpriteRenderer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpriteRenderer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpriteRenderer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpriteRenderer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpriteRenderer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpriteRenderer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SpriteRenderer.sprite
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SpriteRenderer_sprite()
        {
            global::UnityEngine.SpriteRenderer target = default(global::UnityEngine.SpriteRenderer);
            global::UnityEngine.Sprite accessor = target.sprite;
            target.sprite = default(global::UnityEngine.Sprite);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.SpriteRenderer, UnityEngine.Sprite>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.SpriteRenderer,
                        UnityEngine.Sprite>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.SpriteRenderer));
            optimized.SetValue(default(global::UnityEngine.SpriteRenderer), default(global::UnityEngine.Sprite));
        }

        // UnityEngine.SurfaceEffector2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SurfaceEffector2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SurfaceEffector2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SurfaceEffector2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.SurfaceEffector2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_SurfaceEffector2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TargetJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TargetJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TargetJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TargetJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TargetJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TargetJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Terrain.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Terrain_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Terrain.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Terrain_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Terrain.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Terrain_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TerrainCollider.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_TerrainCollider_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TerrainCollider.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_TerrainCollider_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TerrainCollider.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_TerrainCollider_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TerrainData.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_TerrainData_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TerrainData.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_TerrainData_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TerrainData.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_TerrainData_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TerrainLayer.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_TerrainLayer_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TerrainLayer.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_TerrainLayer_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TerrainLayer.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_TerrainLayer_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.TextAsset.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TextAsset_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TextAsset.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TextAsset_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TextAsset.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TextAsset_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TextMesh.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TextMesh_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TextMesh.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TextMesh_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TextMesh.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TextMesh_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture.allowThreadedTextureCreation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_allowThreadedTextureCreation()
        {
            bool accessor = global::UnityEngine.Texture.allowThreadedTextureCreation;
            global::UnityEngine.Texture.allowThreadedTextureCreation = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Texture.anisoLevel
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_anisoLevel()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            int accessor = target.anisoLevel;
            target.anisoLevel = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture), default(int));
        }

        // UnityEngine.Texture.anisotropicFiltering
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_anisotropicFiltering()
        {
            global::UnityEngine.AnisotropicFiltering accessor = global::UnityEngine.Texture.anisotropicFiltering;
            global::UnityEngine.Texture.anisotropicFiltering = default(global::UnityEngine.AnisotropicFiltering);
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.AnisotropicFiltering> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.AnisotropicFiltering>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(global::UnityEngine.AnisotropicFiltering));
        }

        // UnityEngine.Texture.currentTextureMemory
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_currentTextureMemory()
        {
            ulong accessor = global::UnityEngine.Texture.currentTextureMemory;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.desiredTextureMemory
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_desiredTextureMemory()
        {
            ulong accessor = global::UnityEngine.Texture.desiredTextureMemory;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.dimension
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_dimension()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            global::UnityEngine.Rendering.TextureDimension accessor = target.dimension;
            target.dimension = default(global::UnityEngine.Rendering.TextureDimension);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture,
                    UnityEngine.Rendering.TextureDimension>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture,
                        UnityEngine.Rendering.TextureDimension>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture),
                default(global::UnityEngine.Rendering.TextureDimension));
        }

        // UnityEngine.Texture.filterMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_filterMode()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            global::UnityEngine.FilterMode accessor = target.filterMode;
            target.filterMode = default(global::UnityEngine.FilterMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, UnityEngine.FilterMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture,
                        UnityEngine.FilterMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture), default(global::UnityEngine.FilterMode));
        }

        // UnityEngine.Texture.GenerateAllMips
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_GenerateAllMips()
        {
            int accessor = global::UnityEngine.Texture.GenerateAllMips;
            global::Unity.VisualScripting.StaticFieldAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<int>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.graphicsFormat
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_graphicsFormat()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            global::UnityEngine.Experimental.Rendering.GraphicsFormat accessor = target.graphicsFormat;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture,
                UnityEngine.Experimental.Rendering.GraphicsFormat> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture,
                    UnityEngine.Experimental.Rendering.GraphicsFormat>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
        }

        // UnityEngine.Texture.height
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_height()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            int accessor = target.height;
            target.height = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture), default(int));
        }

        // UnityEngine.Texture.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Texture.imageContentsHash
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Texture_imageContentsHash()
        // {
        // 	global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
        // 	global::UnityEngine.Hash128 accessor = target.imageContentsHash;
        // 	target.imageContentsHash = default(global::UnityEngine.Hash128);
        // 	global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, UnityEngine.Hash128> optimized = new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, UnityEngine.Hash128>(default(global::System.Reflection.PropertyInfo));
        // 	optimized.GetValue(default(global::UnityEngine.Texture));
        // 	optimized.SetValue(default(global::UnityEngine.Texture), default(global::UnityEngine.Hash128));
        // }

        // UnityEngine.Texture.isReadable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_isReadable()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            bool accessor = target.isReadable;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
        }

        // UnityEngine.Texture.masterTextureLimit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_masterTextureLimit()
        {
            int accessor = global::UnityEngine.Texture.masterTextureLimit;
            global::UnityEngine.Texture.masterTextureLimit = default(int);
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(int));
        }

        // UnityEngine.Texture.mipMapBias
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_mipMapBias()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            float accessor = target.mipMapBias;
            target.mipMapBias = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture), default(float));
        }

        // UnityEngine.Texture.mipmapCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_mipmapCount()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            int accessor = target.mipmapCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
        }

        // UnityEngine.Texture.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Texture.nonStreamingTextureCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_nonStreamingTextureCount()
        {
            ulong accessor = global::UnityEngine.Texture.nonStreamingTextureCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.nonStreamingTextureMemory
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_nonStreamingTextureMemory()
        {
            ulong accessor = global::UnityEngine.Texture.nonStreamingTextureMemory;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture.streamingMipmapUploadCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_streamingMipmapUploadCount()
        {
            ulong accessor = global::UnityEngine.Texture.streamingMipmapUploadCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.streamingRendererCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_streamingRendererCount()
        {
            ulong accessor = global::UnityEngine.Texture.streamingRendererCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.streamingTextureCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_streamingTextureCount()
        {
            ulong accessor = global::UnityEngine.Texture.streamingTextureCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.streamingTextureDiscardUnusedMips
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_streamingTextureDiscardUnusedMips()
        {
            bool accessor = global::UnityEngine.Texture.streamingTextureDiscardUnusedMips;
            global::UnityEngine.Texture.streamingTextureDiscardUnusedMips = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Texture.streamingTextureForceLoadAll
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_streamingTextureForceLoadAll()
        {
            bool accessor = global::UnityEngine.Texture.streamingTextureForceLoadAll;
            global::UnityEngine.Texture.streamingTextureForceLoadAll = default(bool);
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(bool));
        }

        // UnityEngine.Texture.streamingTextureLoadingCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_streamingTextureLoadingCount()
        {
            ulong accessor = global::UnityEngine.Texture.streamingTextureLoadingCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.streamingTexturePendingLoadCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_streamingTexturePendingLoadCount()
        {
            ulong accessor = global::UnityEngine.Texture.streamingTexturePendingLoadCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.targetTextureMemory
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_targetTextureMemory()
        {
            ulong accessor = global::UnityEngine.Texture.targetTextureMemory;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.texelSize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_texelSize()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            global::UnityEngine.Vector2 accessor = target.texelSize;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
        }

        // UnityEngine.Texture.totalTextureMemory
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_totalTextureMemory()
        {
            ulong accessor = global::UnityEngine.Texture.totalTextureMemory;
            global::Unity.VisualScripting.StaticPropertyAccessor<ulong> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Texture.updateCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_updateCount()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            uint accessor = target.updateCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
        }

        // UnityEngine.Texture.width
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_width()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            int accessor = target.width;
            target.width = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture), default(int));
        }

        // UnityEngine.Texture.wrapMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_wrapMode()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            global::UnityEngine.TextureWrapMode accessor = target.wrapMode;
            target.wrapMode = default(global::UnityEngine.TextureWrapMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, UnityEngine.TextureWrapMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture,
                        UnityEngine.TextureWrapMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture), default(global::UnityEngine.TextureWrapMode));
        }

        // UnityEngine.Texture.wrapModeU
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_wrapModeU()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            global::UnityEngine.TextureWrapMode accessor = target.wrapModeU;
            target.wrapModeU = default(global::UnityEngine.TextureWrapMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, UnityEngine.TextureWrapMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture,
                        UnityEngine.TextureWrapMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture), default(global::UnityEngine.TextureWrapMode));
        }

        // UnityEngine.Texture.wrapModeV
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_wrapModeV()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            global::UnityEngine.TextureWrapMode accessor = target.wrapModeV;
            target.wrapModeV = default(global::UnityEngine.TextureWrapMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, UnityEngine.TextureWrapMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture,
                        UnityEngine.TextureWrapMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture), default(global::UnityEngine.TextureWrapMode));
        }

        // UnityEngine.Texture.wrapModeW
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture_wrapModeW()
        {
            global::UnityEngine.Texture target = default(global::UnityEngine.Texture);
            global::UnityEngine.TextureWrapMode accessor = target.wrapModeW;
            target.wrapModeW = default(global::UnityEngine.TextureWrapMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture, UnityEngine.TextureWrapMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Texture,
                        UnityEngine.TextureWrapMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Texture));
            optimized.SetValue(default(global::UnityEngine.Texture), default(global::UnityEngine.TextureWrapMode));
        }

        // UnityEngine.Texture2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture2DArray.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture2DArray_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture2DArray.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture2DArray_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture2DArray.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture2DArray_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture3D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture3D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture3D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture3D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Texture3D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Texture3D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Tilemaps.Tile.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_Tile_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.Tile.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_Tile_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.Tile.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_Tile_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.Tilemap.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_Tilemap_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.Tilemap.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_Tilemap_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.Tilemap.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_Tilemap_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.TilemapCollider2D.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_TilemapCollider2D_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.TilemapCollider2D.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_TilemapCollider2D_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.TilemapCollider2D.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_TilemapCollider2D_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.TilemapRenderer.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_TilemapRenderer_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.TilemapRenderer.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_TilemapRenderer_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Tilemaps.TilemapRenderer.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_Tilemaps_TilemapRenderer_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Time.captureDeltaTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_captureDeltaTime()
        {
            float accessor = global::UnityEngine.Time.captureDeltaTime;
            global::UnityEngine.Time.captureDeltaTime = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Time.captureFramerate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_captureFramerate()
        {
            int accessor = global::UnityEngine.Time.captureFramerate;
            global::UnityEngine.Time.captureFramerate = default(int);
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(int));
        }

        // UnityEngine.Time.deltaTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_deltaTime()
        {
            float accessor = global::UnityEngine.Time.deltaTime;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.fixedDeltaTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_fixedDeltaTime()
        {
            float accessor = global::UnityEngine.Time.fixedDeltaTime;
            global::UnityEngine.Time.fixedDeltaTime = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Time.fixedTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_fixedTime()
        {
            float accessor = global::UnityEngine.Time.fixedTime;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.fixedTimeAsDouble
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_fixedTimeAsDouble()
        {
            double accessor = global::UnityEngine.Time.fixedTimeAsDouble;
            global::Unity.VisualScripting.StaticPropertyAccessor<double> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.fixedUnscaledDeltaTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_fixedUnscaledDeltaTime()
        {
            float accessor = global::UnityEngine.Time.fixedUnscaledDeltaTime;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.fixedUnscaledTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_fixedUnscaledTime()
        {
            float accessor = global::UnityEngine.Time.fixedUnscaledTime;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.fixedUnscaledTimeAsDouble
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_fixedUnscaledTimeAsDouble()
        {
            double accessor = global::UnityEngine.Time.fixedUnscaledTimeAsDouble;
            global::Unity.VisualScripting.StaticPropertyAccessor<double> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.frameCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_frameCount()
        {
            int accessor = global::UnityEngine.Time.frameCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.inFixedTimeStep
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_inFixedTimeStep()
        {
            bool accessor = global::UnityEngine.Time.inFixedTimeStep;
            global::Unity.VisualScripting.StaticPropertyAccessor<bool> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.maximumDeltaTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_maximumDeltaTime()
        {
            float accessor = global::UnityEngine.Time.maximumDeltaTime;
            global::UnityEngine.Time.maximumDeltaTime = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Time.maximumParticleDeltaTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_maximumParticleDeltaTime()
        {
            float accessor = global::UnityEngine.Time.maximumParticleDeltaTime;
            global::UnityEngine.Time.maximumParticleDeltaTime = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Time.realtimeSinceStartup
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_realtimeSinceStartup()
        {
            float accessor = global::UnityEngine.Time.realtimeSinceStartup;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.realtimeSinceStartupAsDouble
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_realtimeSinceStartupAsDouble()
        {
            double accessor = global::UnityEngine.Time.realtimeSinceStartupAsDouble;
            global::Unity.VisualScripting.StaticPropertyAccessor<double> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.renderedFrameCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_renderedFrameCount()
        {
            int accessor = global::UnityEngine.Time.renderedFrameCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<int> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.smoothDeltaTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_smoothDeltaTime()
        {
            float accessor = global::UnityEngine.Time.smoothDeltaTime;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.time
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_time()
        {
            float accessor = global::UnityEngine.Time.time;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.timeAsDouble
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_timeAsDouble()
        {
            double accessor = global::UnityEngine.Time.timeAsDouble;
            global::Unity.VisualScripting.StaticPropertyAccessor<double> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.timeScale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_timeScale()
        {
            float accessor = global::UnityEngine.Time.timeScale;
            global::UnityEngine.Time.timeScale = default(float);
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
            optimized.SetValue(null, default(float));
        }

        // UnityEngine.Time.timeSinceLevelLoad
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_timeSinceLevelLoad()
        {
            float accessor = global::UnityEngine.Time.timeSinceLevelLoad;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.timeSinceLevelLoadAsDouble
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_timeSinceLevelLoadAsDouble()
        {
            double accessor = global::UnityEngine.Time.timeSinceLevelLoadAsDouble;
            global::Unity.VisualScripting.StaticPropertyAccessor<double> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.unscaledDeltaTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_unscaledDeltaTime()
        {
            float accessor = global::UnityEngine.Time.unscaledDeltaTime;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.unscaledTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_unscaledTime()
        {
            float accessor = global::UnityEngine.Time.unscaledTime;
            global::Unity.VisualScripting.StaticPropertyAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Time.unscaledTimeAsDouble
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Time_unscaledTimeAsDouble()
        {
            double accessor = global::UnityEngine.Time.unscaledTimeAsDouble;
            global::Unity.VisualScripting.StaticPropertyAccessor<double> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Touch.altitudeAngle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_altitudeAngle()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            float accessor = target.altitudeAngle;
            target.altitudeAngle = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(float));
        }

        // UnityEngine.Touch.azimuthAngle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_azimuthAngle()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            float accessor = target.azimuthAngle;
            target.azimuthAngle = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(float));
        }

        // UnityEngine.Touch.deltaPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_deltaPosition()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            global::UnityEngine.Vector2 accessor = target.deltaPosition;
            target.deltaPosition = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Touch.deltaTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_deltaTime()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            float accessor = target.deltaTime;
            target.deltaTime = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(float));
        }

        // UnityEngine.Touch.fingerId
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_fingerId()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            int accessor = target.fingerId;
            target.fingerId = default(int);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(int));
        }

        // UnityEngine.Touch.maximumPossiblePressure
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_maximumPossiblePressure()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            float accessor = target.maximumPossiblePressure;
            target.maximumPossiblePressure = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(float));
        }

        // UnityEngine.Touch.phase
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_phase()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            global::UnityEngine.TouchPhase accessor = target.phase;
            target.phase = default(global::UnityEngine.TouchPhase);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(global::UnityEngine.TouchPhase));
        }

        // UnityEngine.Touch.position
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_position()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            global::UnityEngine.Vector2 accessor = target.position;
            target.position = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Touch.pressure
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_pressure()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            float accessor = target.pressure;
            target.pressure = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(float));
        }

        // UnityEngine.Touch.radius
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_radius()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            float accessor = target.radius;
            target.radius = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(float));
        }

        // UnityEngine.Touch.radiusVariance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_radiusVariance()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            float accessor = target.radiusVariance;
            target.radiusVariance = default(float);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(float));
        }

        // UnityEngine.Touch.rawPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_rawPosition()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            global::UnityEngine.Vector2 accessor = target.rawPosition;
            target.rawPosition = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Touch.tapCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_tapCount()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            int accessor = target.tapCount;
            target.tapCount = default(int);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(int));
        }

        // UnityEngine.Touch.type
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Touch_type()
        {
            global::UnityEngine.Touch target = default(global::UnityEngine.Touch);
            global::UnityEngine.TouchType accessor = target.type;
            target.type = default(global::UnityEngine.TouchType);
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Touch));
            optimized.SetValue(default(global::UnityEngine.Touch), default(global::UnityEngine.TouchType));
        }

        // UnityEngine.TrailRenderer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TrailRenderer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TrailRenderer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TrailRenderer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.TrailRenderer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_TrailRenderer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.childCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_childCount()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            int accessor = target.childCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.Transform.eulerAngles
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_eulerAngles()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.eulerAngles;
            target.eulerAngles = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Transform.forward
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_forward()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.forward;
            target.forward = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Transform.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Transform.GetChild
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_GetChild()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            int arg0 = default(int);
            target.GetChild(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, int, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, int,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.GetSiblingIndex
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_GetSiblingIndex()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            target.GetSiblingIndex();
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, int> optimized =
                new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, int>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform));
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.hasChanged
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_hasChanged()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            bool accessor = target.hasChanged;
            target.hasChanged = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(bool));
        }

        // UnityEngine.Transform.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Transform.hierarchyCapacity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_hierarchyCapacity()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            int accessor = target.hierarchyCapacity;
            target.hierarchyCapacity = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(int));
        }

        // UnityEngine.Transform.hierarchyCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_hierarchyCount()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            int accessor = target.hierarchyCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.Transform.localEulerAngles
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_localEulerAngles()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.localEulerAngles;
            target.localEulerAngles = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Transform.localPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_localPosition()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.localPosition;
            target.localPosition = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Transform.localRotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_localRotation()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Quaternion accessor = target.localRotation;
            target.localRotation = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Quaternion));
        }

        // UnityEngine.Transform.localScale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_localScale()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.localScale;
            target.localScale = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Transform.localToWorldMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_localToWorldMatrix()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Matrix4x4 accessor = target.localToWorldMatrix;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.Transform.LookAt
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_LookAt()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            target.LookAt(arg0, arg1);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3,
                        UnityEngine.Vector3>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.LookAt
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_LookAt_0()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Transform arg0 = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            target.LookAt(arg0, arg1);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Transform,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Transform
                        ,
                        UnityEngine.Vector3>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.LookAt
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_LookAt_1()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            target.LookAt(arg0);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.lossyScale
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_lossyScale()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.lossyScale;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.Transform.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Transform.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.parent
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_parent()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Transform accessor = target.parent;
            target.parent = default(global::UnityEngine.Transform);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Transform));
        }

        // UnityEngine.Transform.position
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_position()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.position;
            target.position = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Transform.right
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_right()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.right;
            target.right = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Transform.root
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_root()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Transform accessor = target.root;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.Transform.Rotate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_Rotate()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            target.Rotate(arg0, arg1, arg2);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, float, float, float> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.Rotate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_Rotate_0()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Space arg1 = default(global::UnityEngine.Space);
            target.Rotate(arg0, arg1);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3,
                UnityEngine.Space> optimized
                = new
                    global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3,
                        UnityEngine.Space>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.Rotate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_Rotate_1()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            target.Rotate(arg0);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.RotateAround
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_RotateAround()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            float arg2 = default(float);
            target.RotateAround(arg0, arg1, arg2);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3,
                    UnityEngine.Vector3, float>
                optimized =
                    new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3,
                        UnityEngine.Vector3, float>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.rotation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_rotation()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Quaternion accessor = target.rotation;
            target.rotation = default(global::UnityEngine.Quaternion);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Quaternion>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Quaternion>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Quaternion));
        }

        // UnityEngine.Transform.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Transform.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Transform.TransformDirection
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_TransformDirection()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            target.TransformDirection(arg0);
            global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, UnityEngine.Vector3,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstanceFunctionInvoker<UnityEngine.Transform, UnityEngine.Vector3
                        ,
                        UnityEngine.Vector3>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.Translate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_Translate()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            target.Translate(arg0);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, UnityEngine.Vector3>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.Translate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_Translate_0()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            target.Translate(arg0, arg1, arg2);
            global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, float, float, float> optimized =
                new global::Unity.VisualScripting.InstanceActionInvoker<UnityEngine.Transform, float, float, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Transform), arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Transform.up
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_up()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Vector3 accessor = target.up;
            target.up = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
            optimized.SetValue(default(global::UnityEngine.Transform), default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Transform.worldToLocalMatrix
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Transform_worldToLocalMatrix()
        {
            global::UnityEngine.Transform target = default(global::UnityEngine.Transform);
            global::UnityEngine.Matrix4x4 accessor = target.worldToLocalMatrix;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform, UnityEngine.Matrix4x4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Transform,
                        UnityEngine.Matrix4x4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Transform));
        }

        // UnityEngine.Tree.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Tree_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Tree.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Tree_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Tree.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Tree_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.U2D.SpriteAtlas.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_U2D_SpriteAtlas_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.U2D.SpriteAtlas.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_U2D_SpriteAtlas_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.U2D.SpriteAtlas.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_U2D_SpriteAtlas_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.AspectRatioFitter.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.AspectRatioFitter.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.AspectRatioFitter.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.AspectRatioFitter.aspectMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_aspectMode()
        {
            global::UnityEngine.UI.AspectRatioFitter target = default(global::UnityEngine.UI.AspectRatioFitter);
            global::UnityEngine.UI.AspectRatioFitter.AspectMode accessor = target.aspectMode;
            target.aspectMode = default(global::UnityEngine.UI.AspectRatioFitter.AspectMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.AspectRatioFitter,
                UnityEngine.UI.AspectRatioFitter.AspectMode> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.AspectRatioFitter,
                    UnityEngine.UI.AspectRatioFitter.AspectMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.AspectRatioFitter));
            optimized.SetValue(default(global::UnityEngine.UI.AspectRatioFitter),
                default(global::UnityEngine.UI.AspectRatioFitter.AspectMode));
        }

        // UnityEngine.UI.AspectRatioFitter.aspectRatio
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_aspectRatio()
        {
            global::UnityEngine.UI.AspectRatioFitter target = default(global::UnityEngine.UI.AspectRatioFitter);
            float accessor = target.aspectRatio;
            target.aspectRatio = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.AspectRatioFitter, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.AspectRatioFitter, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.AspectRatioFitter));
            optimized.SetValue(default(global::UnityEngine.UI.AspectRatioFitter), default(float));
        }

        // UnityEngine.UI.AspectRatioFitter.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.AspectRatioFitter.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.AspectRatioFitter.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.AspectRatioFitter.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.AspectRatioFitter.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.AspectRatioFitter.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.AspectRatioFitter.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.AspectRatioFitter.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_AspectRatioFitter_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.RawImage.maskable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_maskable()
        {
            global::UnityEngine.UI.MaskableGraphic target = default(global::UnityEngine.UI.MaskableGraphic);
            bool accessor = target.maskable;
            target.maskable = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.MaskableGraphic));
            optimized.SetValue(default(global::UnityEngine.UI.MaskableGraphic), default(bool));
        }

        // UnityEngine.UI.RawImage.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_material()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Material accessor = target.material;
            target.material = default(global::UnityEngine.Material);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(global::UnityEngine.Material));
        }

        // UnityEngine.UI.RawImage.materialForRendering
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_materialForRendering()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Material accessor = target.materialForRendering;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Button.animationTriggers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_animationTriggers()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.AnimationTriggers accessor = target.animationTriggers;
            target.animationTriggers = default(global::UnityEngine.UI.AnimationTriggers);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.AnimationTriggers>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.AnimationTriggers>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.AnimationTriggers));
        }

        // UnityEngine.UI.Button.animator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_animator()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.Animator accessor = target.animator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.Animator>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.Animator>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
        }

        // UnityEngine.UI.Button.colors
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_colors()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.ColorBlock accessor = target.colors;
            target.colors = default(global::UnityEngine.UI.ColorBlock);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.ColorBlock>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.ColorBlock>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.ColorBlock));
        }

        // UnityEngine.UI.Button.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.Button.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Button.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.Button.image
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_image()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Image accessor = target.image;
            target.image = default(global::UnityEngine.UI.Image);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Image>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Image>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Button.interactable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_interactable()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            bool accessor = target.interactable;
            target.interactable = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(bool));
        }

        // UnityEngine.UI.Button.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.Button.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.Button.navigation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_navigation()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Navigation accessor = target.navigation;
            target.navigation = default(global::UnityEngine.UI.Navigation);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Navigation>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Navigation>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Navigation));
        }

        // UnityEngine.UI.Button.onClick
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_onClick()
        {
            global::UnityEngine.UI.Button target = default(global::UnityEngine.UI.Button);
            global::UnityEngine.UI.Button.ButtonClickedEvent accessor = target.onClick;
            target.onClick = default(global::UnityEngine.UI.Button.ButtonClickedEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Button,
                    UnityEngine.UI.Button.ButtonClickedEvent>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Button,
                        UnityEngine.UI.Button.ButtonClickedEvent>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Button));
            optimized.SetValue(default(global::UnityEngine.UI.Button),
                default(global::UnityEngine.UI.Button.ButtonClickedEvent));
        }

        // UnityEngine.UI.Button.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Button.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Button.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Button.spriteState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_spriteState()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.SpriteState accessor = target.spriteState;
            target.spriteState = default(global::UnityEngine.UI.SpriteState);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                UnityEngine.UI.SpriteState> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.SpriteState>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.SpriteState));
        }

        // UnityEngine.UI.Button.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.Button.targetGraphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_targetGraphic()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Graphic accessor = target.targetGraphic;
            target.targetGraphic = default(global::UnityEngine.UI.Graphic);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Graphic>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Graphic>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Button.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Button.transition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_transition()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Selectable.Transition accessor = target.transition;
            target.transition = default(global::UnityEngine.UI.Selectable.Transition);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.Selectable.Transition>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Selectable.Transition>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.Selectable.Transition));
        }

        // UnityEngine.UI.Button.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Button_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.CanvasScaler.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_CanvasScaler_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.CanvasScaler.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_CanvasScaler_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.CanvasScaler.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_CanvasScaler_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.ContentSizeFitter.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ContentSizeFitter_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.ContentSizeFitter.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ContentSizeFitter_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.ContentSizeFitter.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ContentSizeFitter_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Dropdown.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Dropdown_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Dropdown.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Dropdown_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Dropdown.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Dropdown_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.GraphicRaycaster.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_GraphicRaycaster_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.GraphicRaycaster.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_GraphicRaycaster_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.GraphicRaycaster.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_GraphicRaycaster_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.GridLayoutGroup.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_GridLayoutGroup_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.GridLayoutGroup.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_GridLayoutGroup_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.GridLayoutGroup.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_GridLayoutGroup_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.HorizontalLayoutGroup.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_HorizontalLayoutGroup_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.HorizontalLayoutGroup.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_HorizontalLayoutGroup_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.HorizontalLayoutGroup.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_HorizontalLayoutGroup_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Image.alphaHitTestMinimumThreshold
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_alphaHitTestMinimumThreshold()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.alphaHitTestMinimumThreshold;
            target.alphaHitTestMinimumThreshold = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(float));
        }

        // UnityEngine.UI.Image.canvas
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_canvas()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Canvas accessor = target.canvas;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Canvas>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Canvas>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Image.canvasRenderer
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_canvasRenderer()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.CanvasRenderer accessor = target.canvasRenderer;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.CanvasRenderer>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.CanvasRenderer>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Image.color
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_color()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Color accessor = target.color;
            target.color = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Color>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(global::UnityEngine.Color));
        }

        // UnityEngine.UI.Image.defaultETC1GraphicMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_defaultETC1GraphicMaterial()
        {
            global::UnityEngine.Material accessor = global::UnityEngine.UI.Image.defaultETC1GraphicMaterial;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Material> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Material>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.UI.Image.defaultMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_defaultMaterial()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Material accessor = target.defaultMaterial;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Image.depth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_depth()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            int accessor = target.depth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Image.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.Image.fillAmount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_fillAmount()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.fillAmount;
            target.fillAmount = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(float));
        }

        // UnityEngine.UI.Image.fillCenter
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_fillCenter()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            bool accessor = target.fillCenter;
            target.fillCenter = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(bool));
        }

        // UnityEngine.UI.Image.fillClockwise
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_fillClockwise()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            bool accessor = target.fillClockwise;
            target.fillClockwise = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(bool));
        }

        // UnityEngine.UI.Image.fillMethod
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_fillMethod()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            global::UnityEngine.UI.Image.FillMethod accessor = target.fillMethod;
            target.fillMethod = default(global::UnityEngine.UI.Image.FillMethod);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image,
                UnityEngine.UI.Image.FillMethod> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image,
                    UnityEngine.UI.Image.FillMethod>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(global::UnityEngine.UI.Image.FillMethod));
        }

        // UnityEngine.UI.Image.fillOrigin
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_fillOrigin()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            int accessor = target.fillOrigin;
            target.fillOrigin = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(int));
        }

        // UnityEngine.UI.Image.flexibleHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_flexibleHeight()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.flexibleHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.flexibleWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_flexibleWidth()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.flexibleWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Image.hasBorder
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_hasBorder()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            bool accessor = target.hasBorder;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.Image.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.Image.isMaskingGraphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_isMaskingGraphic()
        {
            global::UnityEngine.UI.MaskableGraphic target = default(global::UnityEngine.UI.MaskableGraphic);
            bool accessor = target.isMaskingGraphic;
            target.isMaskingGraphic = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.MaskableGraphic));
            optimized.SetValue(default(global::UnityEngine.UI.MaskableGraphic), default(bool));
        }

        // UnityEngine.UI.Image.layoutPriority
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_layoutPriority()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            int accessor = target.layoutPriority;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.mainTexture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_mainTexture()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            global::UnityEngine.Texture accessor = target.mainTexture;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, UnityEngine.Texture>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image,
                        UnityEngine.Texture>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.maskable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_maskable()
        {
            global::UnityEngine.UI.MaskableGraphic target = default(global::UnityEngine.UI.MaskableGraphic);
            bool accessor = target.maskable;
            target.maskable = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.MaskableGraphic));
            optimized.SetValue(default(global::UnityEngine.UI.MaskableGraphic), default(bool));
        }

        // UnityEngine.UI.Image.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_material()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            global::UnityEngine.Material accessor = target.material;
            target.material = default(global::UnityEngine.Material);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(global::UnityEngine.Material));
        }

        // UnityEngine.UI.Image.materialForRendering
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_materialForRendering()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Material accessor = target.materialForRendering;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Image.minHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_minHeight()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.minHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.minWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_minWidth()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.minWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.Image.onCullStateChanged
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_onCullStateChanged()
        {
            global::UnityEngine.UI.MaskableGraphic target = default(global::UnityEngine.UI.MaskableGraphic);
            global::UnityEngine.UI.MaskableGraphic.CullStateChangedEvent accessor = target.onCullStateChanged;
            target.onCullStateChanged = default(global::UnityEngine.UI.MaskableGraphic.CullStateChangedEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic,
                UnityEngine.UI.MaskableGraphic.CullStateChangedEvent> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic,
                    UnityEngine.UI.MaskableGraphic.CullStateChangedEvent>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.MaskableGraphic));
            optimized.SetValue(default(global::UnityEngine.UI.MaskableGraphic),
                default(global::UnityEngine.UI.MaskableGraphic.CullStateChangedEvent));
        }

        // UnityEngine.UI.Image.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Image.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Image.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Image.overrideSprite
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_overrideSprite()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            global::UnityEngine.Sprite accessor = target.overrideSprite;
            target.overrideSprite = default(global::UnityEngine.Sprite);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, UnityEngine.Sprite> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, UnityEngine.Sprite>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(global::UnityEngine.Sprite));
        }

        // UnityEngine.UI.Image.pixelsPerUnit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_pixelsPerUnit()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.pixelsPerUnit;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.pixelsPerUnitMultiplier
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_pixelsPerUnitMultiplier()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.pixelsPerUnitMultiplier;
            target.pixelsPerUnitMultiplier = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(float));
        }

        // UnityEngine.UI.Image.preferredHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_preferredHeight()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.preferredHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.preferredWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_preferredWidth()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            float accessor = target.preferredWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Image.preserveAspect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_preserveAspect()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            bool accessor = target.preserveAspect;
            target.preserveAspect = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(bool));
        }

        // UnityEngine.UI.Image.raycastPadding
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_raycastPadding()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Vector4 accessor = target.raycastPadding;
            target.raycastPadding = default(global::UnityEngine.Vector4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Vector4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Vector4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(global::UnityEngine.Vector4));
        }

        // UnityEngine.UI.Image.raycastTarget
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_raycastTarget()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            bool accessor = target.raycastTarget;
            target.raycastTarget = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(bool));
        }

        // UnityEngine.UI.Image.rectTransform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_rectTransform()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.RectTransform accessor = target.rectTransform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.RectTransform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.RectTransform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Image.sprite
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_sprite()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            global::UnityEngine.Sprite accessor = target.sprite;
            target.sprite = default(global::UnityEngine.Sprite);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, UnityEngine.Sprite> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, UnityEngine.Sprite>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(global::UnityEngine.Sprite));
        }

        // UnityEngine.UI.Image.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.Image.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Image.type
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_type()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            global::UnityEngine.UI.Image.Type accessor = target.type;
            target.type = default(global::UnityEngine.UI.Image.Type);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, UnityEngine.UI.Image.Type>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image,
                        UnityEngine.UI.Image.Type>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(global::UnityEngine.UI.Image.Type));
        }

        // UnityEngine.UI.Image.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.Image.useSpriteMesh
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Image_useSpriteMesh()
        {
            global::UnityEngine.UI.Image target = default(global::UnityEngine.UI.Image);
            bool accessor = target.useSpriteMesh;
            target.useSpriteMesh = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Image, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Image));
            optimized.SetValue(default(global::UnityEngine.UI.Image), default(bool));
        }

        // UnityEngine.UI.InputField.animationTriggers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_animationTriggers()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.AnimationTriggers accessor = target.animationTriggers;
            target.animationTriggers = default(global::UnityEngine.UI.AnimationTriggers);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.AnimationTriggers>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.AnimationTriggers>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.AnimationTriggers));
        }

        // UnityEngine.UI.InputField.animator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_animator()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.Animator accessor = target.animator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.Animator>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.Animator>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
        }

        // UnityEngine.UI.InputField.asteriskChar
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_asteriskChar()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            char accessor = target.asteriskChar;
            target.asteriskChar = default(char);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, char> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, char>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(char));
        }

        // UnityEngine.UI.InputField.caretBlinkRate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_caretBlinkRate()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            float accessor = target.caretBlinkRate;
            target.caretBlinkRate = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(float));
        }

        // UnityEngine.UI.InputField.caretColor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_caretColor()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.Color accessor = target.caretColor;
            target.caretColor = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.Color>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(global::UnityEngine.Color));
        }

        // UnityEngine.UI.InputField.caretPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_caretPosition()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            int accessor = target.caretPosition;
            target.caretPosition = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(int));
        }

        // UnityEngine.UI.InputField.caretWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_caretWidth()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            int accessor = target.caretWidth;
            target.caretWidth = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(int));
        }

        // UnityEngine.UI.InputField.characterLimit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_characterLimit()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            int accessor = target.characterLimit;
            target.characterLimit = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(int));
        }

        // UnityEngine.UI.InputField.characterValidation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_characterValidation()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.InputField.CharacterValidation accessor = target.characterValidation;
            target.characterValidation = default(global::UnityEngine.UI.InputField.CharacterValidation);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                UnityEngine.UI.InputField.CharacterValidation> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                    UnityEngine.UI.InputField.CharacterValidation>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField),
                default(global::UnityEngine.UI.InputField.CharacterValidation));
        }

        // UnityEngine.UI.InputField.colors
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_colors()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.ColorBlock accessor = target.colors;
            target.colors = default(global::UnityEngine.UI.ColorBlock);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.ColorBlock>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.ColorBlock>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.ColorBlock));
        }

        // UnityEngine.UI.InputField.contentType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_contentType()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.InputField.ContentType accessor = target.contentType;
            target.contentType = default(global::UnityEngine.UI.InputField.ContentType);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                    UnityEngine.UI.InputField.ContentType>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.UI.InputField.ContentType>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField),
                default(global::UnityEngine.UI.InputField.ContentType));
        }

        // UnityEngine.UI.InputField.customCaretColor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_customCaretColor()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            bool accessor = target.customCaretColor;
            target.customCaretColor = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(bool));
        }

        // UnityEngine.UI.InputField.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.InputField.flexibleHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_flexibleHeight()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            float accessor = target.flexibleHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.flexibleWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_flexibleWidth()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            float accessor = target.flexibleWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.InputField.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.InputField.image
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_image()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Image accessor = target.image;
            target.image = default(global::UnityEngine.UI.Image);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Image>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Image>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.InputField.inputType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_inputType()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.InputField.InputType accessor = target.inputType;
            target.inputType = default(global::UnityEngine.UI.InputField.InputType);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                    UnityEngine.UI.InputField.InputType>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.UI.InputField.InputType>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField),
                default(global::UnityEngine.UI.InputField.InputType));
        }

        // UnityEngine.UI.InputField.interactable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_interactable()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            bool accessor = target.interactable;
            target.interactable = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(bool));
        }

        // UnityEngine.UI.InputField.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.InputField.isFocused
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_isFocused()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            bool accessor = target.isFocused;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.keyboardType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_keyboardType()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.TouchScreenKeyboardType accessor = target.keyboardType;
            target.keyboardType = default(global::UnityEngine.TouchScreenKeyboardType);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                    UnityEngine.TouchScreenKeyboardType>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.TouchScreenKeyboardType>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField),
                default(global::UnityEngine.TouchScreenKeyboardType));
        }

        // UnityEngine.UI.InputField.layoutPriority
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_layoutPriority()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            int accessor = target.layoutPriority;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.lineType
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_lineType()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.InputField.LineType accessor = target.lineType;
            target.lineType = default(global::UnityEngine.UI.InputField.LineType);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                    UnityEngine.UI.InputField.LineType>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.UI.InputField.LineType>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField),
                default(global::UnityEngine.UI.InputField.LineType));
        }

        // UnityEngine.UI.InputField.minHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_minHeight()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            float accessor = target.minHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.minWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_minWidth()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            float accessor = target.minWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.multiLine
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_multiLine()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            bool accessor = target.multiLine;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.InputField.navigation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_navigation()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Navigation accessor = target.navigation;
            target.navigation = default(global::UnityEngine.UI.Navigation);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Navigation>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Navigation>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Navigation));
        }

        // UnityEngine.UI.InputField.onEndEdit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_onEndEdit()
        {
#if UNITY_2021_1_OR_NEWER
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.InputField.EndEditEvent accessor = target.onEndEdit;
            target.onEndEdit = default(global::UnityEngine.UI.InputField.EndEditEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                    UnityEngine.UI.InputField.EndEditEvent>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.UI.InputField.EndEditEvent>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField),
                default(global::UnityEngine.UI.InputField.EndEditEvent));
#else
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.InputField.SubmitEvent accessor = target.onEndEdit;
            target.onEndEdit = default(global::UnityEngine.UI.InputField.SubmitEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, UnityEngine.UI.InputField.SubmitEvent>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.UI.InputField.SubmitEvent>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField),
                default(global::UnityEngine.UI.InputField.SubmitEvent));
#endif
        }

        // UnityEngine.UI.InputField.onValidateInput
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_onValidateInput()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.InputField.OnValidateInput accessor = target.onValidateInput;
            target.onValidateInput = default(global::UnityEngine.UI.InputField.OnValidateInput);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                    UnityEngine.UI.InputField.OnValidateInput>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.UI.InputField.OnValidateInput>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField),
                default(global::UnityEngine.UI.InputField.OnValidateInput));
        }

        // UnityEngine.UI.InputField.onValueChanged
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_onValueChanged()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.InputField.OnChangeEvent accessor = target.onValueChanged;
            target.onValueChanged = default(global::UnityEngine.UI.InputField.OnChangeEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                    UnityEngine.UI.InputField.OnChangeEvent>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.UI.InputField.OnChangeEvent>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField),
                default(global::UnityEngine.UI.InputField.OnChangeEvent));
        }

        // UnityEngine.UI.InputField.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.InputField.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.InputField.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.InputField.placeholder
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_placeholder()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.Graphic accessor = target.placeholder;
            target.placeholder = default(global::UnityEngine.UI.Graphic);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, UnityEngine.UI.Graphic>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.UI.Graphic>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.InputField.preferredHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_preferredHeight()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            float accessor = target.preferredHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.preferredWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_preferredWidth()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            float accessor = target.preferredWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.readOnly
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_readOnly()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            bool accessor = target.readOnly;
            target.readOnly = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(bool));
        }

        // UnityEngine.UI.InputField.selectionAnchorPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_selectionAnchorPosition()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            int accessor = target.selectionAnchorPosition;
            target.selectionAnchorPosition = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(int));
        }

        // UnityEngine.UI.InputField.selectionColor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_selectionColor()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.Color accessor = target.selectionColor;
            target.selectionColor = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.Color>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(global::UnityEngine.Color));
        }

        // UnityEngine.UI.InputField.selectionFocusPosition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_selectionFocusPosition()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            int accessor = target.selectionFocusPosition;
            target.selectionFocusPosition = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(int));
        }

        // UnityEngine.UI.InputField.shouldActivateOnSelect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_shouldActivateOnSelect()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            bool accessor = target.shouldActivateOnSelect;
            target.shouldActivateOnSelect = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(bool));
        }

        // UnityEngine.UI.InputField.shouldHideMobileInput
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_shouldHideMobileInput()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            bool accessor = target.shouldHideMobileInput;
            target.shouldHideMobileInput = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(bool));
        }

        // UnityEngine.UI.InputField.spriteState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_spriteState()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.SpriteState accessor = target.spriteState;
            target.spriteState = default(global::UnityEngine.UI.SpriteState);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                UnityEngine.UI.SpriteState> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.SpriteState>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.SpriteState));
        }

        // UnityEngine.UI.InputField.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.InputField.targetGraphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_targetGraphic()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Graphic accessor = target.targetGraphic;
            target.targetGraphic = default(global::UnityEngine.UI.Graphic);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Graphic>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Graphic>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.InputField.text
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_text()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            string accessor = target.text;
            target.text = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(string));
        }

        // UnityEngine.UI.InputField.textComponent
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_textComponent()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.UI.Text accessor = target.textComponent;
            target.textComponent = default(global::UnityEngine.UI.Text);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, UnityEngine.UI.Text>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.UI.Text>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
            optimized.SetValue(default(global::UnityEngine.UI.InputField), default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.InputField.touchScreenKeyboard
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_touchScreenKeyboard()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            global::UnityEngine.TouchScreenKeyboard accessor = target.touchScreenKeyboard;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                UnityEngine.TouchScreenKeyboard> optimized
                = new
                    global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField,
                        UnityEngine.TouchScreenKeyboard>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.InputField.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.InputField.transition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_transition()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Selectable.Transition accessor = target.transition;
            target.transition = default(global::UnityEngine.UI.Selectable.Transition);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.Selectable.Transition>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Selectable.Transition>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.Selectable.Transition));
        }

        // UnityEngine.UI.InputField.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.InputField.wasCanceled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_InputField_wasCanceled()
        {
            global::UnityEngine.UI.InputField target = default(global::UnityEngine.UI.InputField);
            bool accessor = target.wasCanceled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.InputField, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.InputField));
        }

        // UnityEngine.UI.LayoutElement.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_LayoutElement_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.LayoutElement.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_LayoutElement_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.LayoutElement.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_LayoutElement_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Mask.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.Mask.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Mask.graphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_graphic()
        {
            global::UnityEngine.UI.Mask target = default(global::UnityEngine.UI.Mask);
            global::UnityEngine.UI.Graphic accessor = target.graphic;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Mask, UnityEngine.UI.Graphic>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Mask,
                        UnityEngine.UI.Graphic>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Mask));
        }

        // UnityEngine.UI.Mask.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.Mask.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.Mask.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.Mask.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Mask.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Mask.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Mask.rectTransform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_rectTransform()
        {
            global::UnityEngine.UI.Mask target = default(global::UnityEngine.UI.Mask);
            global::UnityEngine.RectTransform accessor = target.rectTransform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Mask, UnityEngine.RectTransform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Mask,
                        UnityEngine.RectTransform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Mask));
        }

        // UnityEngine.UI.Mask.showMaskGraphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_showMaskGraphic()
        {
            global::UnityEngine.UI.Mask target = default(global::UnityEngine.UI.Mask);
            bool accessor = target.showMaskGraphic;
            target.showMaskGraphic = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Mask, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Mask, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Mask));
            optimized.SetValue(default(global::UnityEngine.UI.Mask), default(bool));
        }

        // UnityEngine.UI.Mask.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.Mask.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Mask.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Mask_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.Outline.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Outline_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Outline.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Outline_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Outline.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Outline_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.PositionAsUV1.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_PositionAsUV1_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.PositionAsUV1.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_PositionAsUV1_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.PositionAsUV1.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_PositionAsUV1_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.RawImage.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.RawImage.raycastTarget
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_raycastTarget()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            bool accessor = target.raycastTarget;
            target.raycastTarget = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(bool));
        }

        // UnityEngine.UI.RawImage.rectTransform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_rectTransform()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.RectTransform accessor = target.rectTransform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.RectTransform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.RectTransform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.RawImage.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.RawImage.texture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_texture()
        {
            global::UnityEngine.UI.RawImage target = default(global::UnityEngine.UI.RawImage);
            global::UnityEngine.Texture accessor = target.texture;
            target.texture = default(global::UnityEngine.Texture);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.RawImage, UnityEngine.Texture>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.RawImage,
                        UnityEngine.Texture>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.RawImage));
            optimized.SetValue(default(global::UnityEngine.UI.RawImage), default(global::UnityEngine.Texture));
        }

        // UnityEngine.UI.RawImage.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.RawImage.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.ToggleGroup.allowSwitchOff
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_allowSwitchOff()
        {
            global::UnityEngine.UI.ToggleGroup target = default(global::UnityEngine.UI.ToggleGroup);
            bool accessor = target.allowSwitchOff;
            target.allowSwitchOff = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.ToggleGroup, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.ToggleGroup, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.ToggleGroup));
            optimized.SetValue(default(global::UnityEngine.UI.ToggleGroup), default(bool));
        }

        // UnityEngine.UI.ToggleGroup.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.ToggleGroup.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.ToggleGroup.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.ToggleGroup.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.ToggleGroup.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }


        // UnityEngine.UI.RawImage.uvRect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_uvRect()
        {
            global::UnityEngine.UI.RawImage target = default(global::UnityEngine.UI.RawImage);
            global::UnityEngine.Rect accessor = target.uvRect;
            target.uvRect = default(global::UnityEngine.Rect);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.RawImage, UnityEngine.Rect>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.RawImage,
                        UnityEngine.Rect>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.RawImage));
            optimized.SetValue(default(global::UnityEngine.UI.RawImage), default(global::UnityEngine.Rect));
        }

        // UnityEngine.UI.RawImage.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.RawImage.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.RawImage.canvas
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_canvas()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Canvas accessor = target.canvas;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Canvas>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Canvas>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.RawImage.canvasRenderer
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_canvasRenderer()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.CanvasRenderer accessor = target.canvasRenderer;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.CanvasRenderer>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.CanvasRenderer>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.RawImage.color
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_color()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Color accessor = target.color;
            target.color = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Color>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(global::UnityEngine.Color));
        }

        // UnityEngine.UI.RawImage.defaultMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_defaultMaterial()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Material accessor = target.defaultMaterial;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.RawImage.depth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_depth()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            int accessor = target.depth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.RawImage.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.RawImage.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.RawImage.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.RawImage.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.RawImage.isMaskingGraphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_isMaskingGraphic()
        {
            global::UnityEngine.UI.MaskableGraphic target = default(global::UnityEngine.UI.MaskableGraphic);
            bool accessor = target.isMaskingGraphic;
            target.isMaskingGraphic = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.MaskableGraphic));
            optimized.SetValue(default(global::UnityEngine.UI.MaskableGraphic), default(bool));
        }

        // UnityEngine.UI.RawImage.mainTexture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_mainTexture()
        {
            global::UnityEngine.UI.RawImage target = default(global::UnityEngine.UI.RawImage);
            global::UnityEngine.Texture accessor = target.mainTexture;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.RawImage, UnityEngine.Texture>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.RawImage,
                        UnityEngine.Texture>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.RawImage));
        }

        // UnityEngine.UI.RawImage.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.RawImage.onCullStateChanged
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RawImage_onCullStateChanged()
        {
            global::UnityEngine.UI.MaskableGraphic target = default(global::UnityEngine.UI.MaskableGraphic);
            global::UnityEngine.UI.MaskableGraphic.CullStateChangedEvent accessor = target.onCullStateChanged;
            target.onCullStateChanged = default(global::UnityEngine.UI.MaskableGraphic.CullStateChangedEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic,
                UnityEngine.UI.MaskableGraphic.CullStateChangedEvent> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic,
                    UnityEngine.UI.MaskableGraphic.CullStateChangedEvent>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.MaskableGraphic));
            optimized.SetValue(default(global::UnityEngine.UI.MaskableGraphic),
                default(global::UnityEngine.UI.MaskableGraphic.CullStateChangedEvent));
        }

        // UnityEngine.UI.RectMask2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RectMask2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.RectMask2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RectMask2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.RectMask2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_RectMask2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Scrollbar.animationTriggers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_animationTriggers()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.AnimationTriggers accessor = target.animationTriggers;
            target.animationTriggers = default(global::UnityEngine.UI.AnimationTriggers);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.AnimationTriggers>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.AnimationTriggers>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.AnimationTriggers));
        }

        // UnityEngine.UI.Scrollbar.animator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_animator()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.Animator accessor = target.animator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.Animator>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.Animator>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
        }

        // UnityEngine.UI.Scrollbar.colors
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_colors()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.ColorBlock accessor = target.colors;
            target.colors = default(global::UnityEngine.UI.ColorBlock);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.ColorBlock>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.ColorBlock>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.ColorBlock));
        }

        // UnityEngine.UI.Scrollbar.direction
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_direction()
        {
            global::UnityEngine.UI.Scrollbar target = default(global::UnityEngine.UI.Scrollbar);
            global::UnityEngine.UI.Scrollbar.Direction accessor = target.direction;
            target.direction = default(global::UnityEngine.UI.Scrollbar.Direction);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar,
                    UnityEngine.UI.Scrollbar.Direction>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar,
                        UnityEngine.UI.Scrollbar.Direction>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Scrollbar));
            optimized.SetValue(default(global::UnityEngine.UI.Scrollbar),
                default(global::UnityEngine.UI.Scrollbar.Direction));
        }

        // UnityEngine.UI.Scrollbar.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.Scrollbar.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Scrollbar.handleRect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_handleRect()
        {
            global::UnityEngine.UI.Scrollbar target = default(global::UnityEngine.UI.Scrollbar);
            global::UnityEngine.RectTransform accessor = target.handleRect;
            target.handleRect = default(global::UnityEngine.RectTransform);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar, UnityEngine.RectTransform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar,
                        UnityEngine.RectTransform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Scrollbar));
            optimized.SetValue(default(global::UnityEngine.UI.Scrollbar), default(global::UnityEngine.RectTransform));
        }

        // UnityEngine.UI.Scrollbar.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.Scrollbar.image
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_image()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Image accessor = target.image;
            target.image = default(global::UnityEngine.UI.Image);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Image>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Image>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Scrollbar.interactable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_interactable()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            bool accessor = target.interactable;
            target.interactable = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(bool));
        }

        // UnityEngine.UI.Scrollbar.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.Scrollbar.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.Scrollbar.navigation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_navigation()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Navigation accessor = target.navigation;
            target.navigation = default(global::UnityEngine.UI.Navigation);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Navigation>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Navigation>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Navigation));
        }

        // UnityEngine.UI.Scrollbar.numberOfSteps
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_numberOfSteps()
        {
            global::UnityEngine.UI.Scrollbar target = default(global::UnityEngine.UI.Scrollbar);
            int accessor = target.numberOfSteps;
            target.numberOfSteps = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Scrollbar));
            optimized.SetValue(default(global::UnityEngine.UI.Scrollbar), default(int));
        }

        // UnityEngine.UI.Scrollbar.onValueChanged
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_onValueChanged()
        {
            global::UnityEngine.UI.Scrollbar target = default(global::UnityEngine.UI.Scrollbar);
            global::UnityEngine.UI.Scrollbar.ScrollEvent accessor = target.onValueChanged;
            target.onValueChanged = default(global::UnityEngine.UI.Scrollbar.ScrollEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar,
                    UnityEngine.UI.Scrollbar.ScrollEvent>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar,
                        UnityEngine.UI.Scrollbar.ScrollEvent>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Scrollbar));
            optimized.SetValue(default(global::UnityEngine.UI.Scrollbar),
                default(global::UnityEngine.UI.Scrollbar.ScrollEvent));
        }

        // UnityEngine.UI.Scrollbar.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Scrollbar.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Scrollbar.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Scrollbar.size
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_size()
        {
            global::UnityEngine.UI.Scrollbar target = default(global::UnityEngine.UI.Scrollbar);
            float accessor = target.size;
            target.size = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Scrollbar));
            optimized.SetValue(default(global::UnityEngine.UI.Scrollbar), default(float));
        }

        // UnityEngine.UI.Scrollbar.spriteState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_spriteState()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.SpriteState accessor = target.spriteState;
            target.spriteState = default(global::UnityEngine.UI.SpriteState);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                UnityEngine.UI.SpriteState> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.SpriteState>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.SpriteState));
        }

        // UnityEngine.UI.Scrollbar.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.Scrollbar.targetGraphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_targetGraphic()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Graphic accessor = target.targetGraphic;
            target.targetGraphic = default(global::UnityEngine.UI.Graphic);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Graphic>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Graphic>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Scrollbar.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Scrollbar.transition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_transition()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Selectable.Transition accessor = target.transition;
            target.transition = default(global::UnityEngine.UI.Selectable.Transition);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.Selectable.Transition>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Selectable.Transition>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.Selectable.Transition));
        }

        // UnityEngine.UI.Scrollbar.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.Scrollbar.value
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Scrollbar_value()
        {
            global::UnityEngine.UI.Scrollbar target = default(global::UnityEngine.UI.Scrollbar);
            float accessor = target.value;
            target.value = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Scrollbar, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Scrollbar));
            optimized.SetValue(default(global::UnityEngine.UI.Scrollbar), default(float));
        }

        // UnityEngine.UI.ScrollRect.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ScrollRect_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.ScrollRect.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ScrollRect_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.ScrollRect.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ScrollRect_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Selectable.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Selectable_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Selectable.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Selectable_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Selectable.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Selectable_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Shadow.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Shadow_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Shadow.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Shadow_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Shadow.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Shadow_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Slider.animationTriggers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_animationTriggers()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.AnimationTriggers accessor = target.animationTriggers;
            target.animationTriggers = default(global::UnityEngine.UI.AnimationTriggers);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.AnimationTriggers>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.AnimationTriggers>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.AnimationTriggers));
        }

        // UnityEngine.UI.Slider.animator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_animator()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.Animator accessor = target.animator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.Animator>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.Animator>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
        }

        // UnityEngine.UI.Slider.colors
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_colors()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.ColorBlock accessor = target.colors;
            target.colors = default(global::UnityEngine.UI.ColorBlock);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.ColorBlock>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.ColorBlock>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.ColorBlock));
        }

        // UnityEngine.UI.Slider.direction
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_direction()
        {
            global::UnityEngine.UI.Slider target = default(global::UnityEngine.UI.Slider);
            global::UnityEngine.UI.Slider.Direction accessor = target.direction;
            target.direction = default(global::UnityEngine.UI.Slider.Direction);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider,
                UnityEngine.UI.Slider.Direction> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider,
                    UnityEngine.UI.Slider.Direction>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Slider));
            optimized.SetValue(default(global::UnityEngine.UI.Slider),
                default(global::UnityEngine.UI.Slider.Direction));
        }

        // UnityEngine.UI.Slider.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.Slider.fillRect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_fillRect()
        {
            global::UnityEngine.UI.Slider target = default(global::UnityEngine.UI.Slider);
            global::UnityEngine.RectTransform accessor = target.fillRect;
            target.fillRect = default(global::UnityEngine.RectTransform);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, UnityEngine.RectTransform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider,
                        UnityEngine.RectTransform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Slider));
            optimized.SetValue(default(global::UnityEngine.UI.Slider), default(global::UnityEngine.RectTransform));
        }

        // UnityEngine.UI.Slider.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Slider.handleRect
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_handleRect()
        {
            global::UnityEngine.UI.Slider target = default(global::UnityEngine.UI.Slider);
            global::UnityEngine.RectTransform accessor = target.handleRect;
            target.handleRect = default(global::UnityEngine.RectTransform);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, UnityEngine.RectTransform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider,
                        UnityEngine.RectTransform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Slider));
            optimized.SetValue(default(global::UnityEngine.UI.Slider), default(global::UnityEngine.RectTransform));
        }

        // UnityEngine.UI.Slider.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.Slider.image
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_image()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Image accessor = target.image;
            target.image = default(global::UnityEngine.UI.Image);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Image>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Image>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Slider.interactable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_interactable()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            bool accessor = target.interactable;
            target.interactable = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(bool));
        }

        // UnityEngine.UI.Slider.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.Slider.maxValue
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_maxValue()
        {
            global::UnityEngine.UI.Slider target = default(global::UnityEngine.UI.Slider);
            float accessor = target.maxValue;
            target.maxValue = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Slider));
            optimized.SetValue(default(global::UnityEngine.UI.Slider), default(float));
        }

        // UnityEngine.UI.Slider.minValue
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_minValue()
        {
            global::UnityEngine.UI.Slider target = default(global::UnityEngine.UI.Slider);
            float accessor = target.minValue;
            target.minValue = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Slider));
            optimized.SetValue(default(global::UnityEngine.UI.Slider), default(float));
        }

        // UnityEngine.UI.Slider.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.Slider.navigation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_navigation()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Navigation accessor = target.navigation;
            target.navigation = default(global::UnityEngine.UI.Navigation);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Navigation>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Navigation>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Navigation));
        }

        // UnityEngine.UI.Slider.normalizedValue
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_normalizedValue()
        {
            global::UnityEngine.UI.Slider target = default(global::UnityEngine.UI.Slider);
            float accessor = target.normalizedValue;
            target.normalizedValue = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Slider));
            optimized.SetValue(default(global::UnityEngine.UI.Slider), default(float));
        }

        // UnityEngine.UI.Slider.onValueChanged
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_onValueChanged()
        {
            global::UnityEngine.UI.Slider target = default(global::UnityEngine.UI.Slider);
            global::UnityEngine.UI.Slider.SliderEvent accessor = target.onValueChanged;
            target.onValueChanged = default(global::UnityEngine.UI.Slider.SliderEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider,
                UnityEngine.UI.Slider.SliderEvent> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider,
                    UnityEngine.UI.Slider.SliderEvent>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Slider));
            optimized.SetValue(default(global::UnityEngine.UI.Slider),
                default(global::UnityEngine.UI.Slider.SliderEvent));
        }

        // UnityEngine.UI.Slider.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Slider.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Slider.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Slider.spriteState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_spriteState()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.SpriteState accessor = target.spriteState;
            target.spriteState = default(global::UnityEngine.UI.SpriteState);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                UnityEngine.UI.SpriteState> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.SpriteState>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.SpriteState));
        }

        // UnityEngine.UI.Slider.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.Slider.targetGraphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_targetGraphic()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Graphic accessor = target.targetGraphic;
            target.targetGraphic = default(global::UnityEngine.UI.Graphic);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Graphic>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Graphic>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Slider.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Slider.transition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_transition()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Selectable.Transition accessor = target.transition;
            target.transition = default(global::UnityEngine.UI.Selectable.Transition);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.Selectable.Transition>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Selectable.Transition>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.Selectable.Transition));
        }

        // UnityEngine.UI.Slider.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.Slider.value
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_value()
        {
            global::UnityEngine.UI.Slider target = default(global::UnityEngine.UI.Slider);
            float accessor = target.value;
            target.value = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Slider));
            optimized.SetValue(default(global::UnityEngine.UI.Slider), default(float));
        }

        // UnityEngine.UI.Slider.wholeNumbers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Slider_wholeNumbers()
        {
            global::UnityEngine.UI.Slider target = default(global::UnityEngine.UI.Slider);
            bool accessor = target.wholeNumbers;
            target.wholeNumbers = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Slider, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Slider));
            optimized.SetValue(default(global::UnityEngine.UI.Slider), default(bool));
        }

        // UnityEngine.UI.Text.alignByGeometry
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_alignByGeometry()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            bool accessor = target.alignByGeometry;
            target.alignByGeometry = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(bool));
        }

        // UnityEngine.UI.Text.alignment
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_alignment()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            global::UnityEngine.TextAnchor accessor = target.alignment;
            target.alignment = default(global::UnityEngine.TextAnchor);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.TextAnchor>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text,
                        UnityEngine.TextAnchor>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(global::UnityEngine.TextAnchor));
        }

        // UnityEngine.UI.Text.cachedTextGenerator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_cachedTextGenerator()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            global::UnityEngine.TextGenerator accessor = target.cachedTextGenerator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.TextGenerator>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text,
                        UnityEngine.TextGenerator>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.cachedTextGeneratorForLayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_cachedTextGeneratorForLayout()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            global::UnityEngine.TextGenerator accessor = target.cachedTextGeneratorForLayout;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.TextGenerator>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text,
                        UnityEngine.TextGenerator>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.canvas
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_canvas()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Canvas accessor = target.canvas;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Canvas>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Canvas>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Text.canvasRenderer
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_canvasRenderer()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.CanvasRenderer accessor = target.canvasRenderer;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.CanvasRenderer>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.CanvasRenderer>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Text.color
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_color()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Color accessor = target.color;
            target.color = default(global::UnityEngine.Color);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Color>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Color>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(global::UnityEngine.Color));
        }

        // UnityEngine.UI.Text.defaultMaterial
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_defaultMaterial()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Material accessor = target.defaultMaterial;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Text.depth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_depth()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            int accessor = target.depth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Text.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.Text.flexibleHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_flexibleHeight()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            float accessor = target.flexibleHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.flexibleWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_flexibleWidth()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            float accessor = target.flexibleWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.font
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_font()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            global::UnityEngine.Font accessor = target.font;
            target.font = default(global::UnityEngine.Font);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.Font> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.Font>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(global::UnityEngine.Font));
        }

        // UnityEngine.UI.Text.fontSize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_fontSize()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            int accessor = target.fontSize;
            target.fontSize = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(int));
        }

        // UnityEngine.UI.Text.fontStyle
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_fontStyle()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            global::UnityEngine.FontStyle accessor = target.fontStyle;
            target.fontStyle = default(global::UnityEngine.FontStyle);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.FontStyle>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text,
                        UnityEngine.FontStyle>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(global::UnityEngine.FontStyle));
        }

        // UnityEngine.UI.Text.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Text.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.Text.horizontalOverflow
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_horizontalOverflow()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            global::UnityEngine.HorizontalWrapMode accessor = target.horizontalOverflow;
            target.horizontalOverflow = default(global::UnityEngine.HorizontalWrapMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.HorizontalWrapMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text,
                        UnityEngine.HorizontalWrapMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(global::UnityEngine.HorizontalWrapMode));
        }

        // UnityEngine.UI.Text.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.Text.isMaskingGraphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_isMaskingGraphic()
        {
            global::UnityEngine.UI.MaskableGraphic target = default(global::UnityEngine.UI.MaskableGraphic);
            bool accessor = target.isMaskingGraphic;
            target.isMaskingGraphic = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.MaskableGraphic));
            optimized.SetValue(default(global::UnityEngine.UI.MaskableGraphic), default(bool));
        }

        // UnityEngine.UI.Text.layoutPriority
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_layoutPriority()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            int accessor = target.layoutPriority;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.lineSpacing
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_lineSpacing()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            float accessor = target.lineSpacing;
            target.lineSpacing = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(float));
        }

        // UnityEngine.UI.Text.mainTexture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_mainTexture()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            global::UnityEngine.Texture accessor = target.mainTexture;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.Texture> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.Texture>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.maskable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_maskable()
        {
            global::UnityEngine.UI.MaskableGraphic target = default(global::UnityEngine.UI.MaskableGraphic);
            bool accessor = target.maskable;
            target.maskable = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.MaskableGraphic));
            optimized.SetValue(default(global::UnityEngine.UI.MaskableGraphic), default(bool));
        }

        // UnityEngine.UI.Text.material
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_material()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Material accessor = target.material;
            target.material = default(global::UnityEngine.Material);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(global::UnityEngine.Material));
        }

        // UnityEngine.UI.Text.materialForRendering
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_materialForRendering()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Material accessor = target.materialForRendering;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Material>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Material>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Text.minHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_minHeight()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            float accessor = target.minHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.minWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_minWidth()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            float accessor = target.minWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.Text.onCullStateChanged
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_onCullStateChanged()
        {
            global::UnityEngine.UI.MaskableGraphic target = default(global::UnityEngine.UI.MaskableGraphic);
            global::UnityEngine.UI.MaskableGraphic.CullStateChangedEvent accessor = target.onCullStateChanged;
            target.onCullStateChanged = default(global::UnityEngine.UI.MaskableGraphic.CullStateChangedEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic,
                UnityEngine.UI.MaskableGraphic.CullStateChangedEvent> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.MaskableGraphic,
                    UnityEngine.UI.MaskableGraphic.CullStateChangedEvent>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.MaskableGraphic));
            optimized.SetValue(default(global::UnityEngine.UI.MaskableGraphic),
                default(global::UnityEngine.UI.MaskableGraphic.CullStateChangedEvent));
        }

        // UnityEngine.UI.Text.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Text.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Text.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Text.pixelsPerUnit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_pixelsPerUnit()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            float accessor = target.pixelsPerUnit;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.preferredHeight
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_preferredHeight()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            float accessor = target.preferredHeight;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.preferredWidth
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_preferredWidth()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            float accessor = target.preferredWidth;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
        }

        // UnityEngine.UI.Text.raycastPadding
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_raycastPadding()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.Vector4 accessor = target.raycastPadding;
            target.raycastPadding = default(global::UnityEngine.Vector4);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.Vector4>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.Vector4>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(global::UnityEngine.Vector4));
        }

        // UnityEngine.UI.Text.raycastTarget
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_raycastTarget()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            bool accessor = target.raycastTarget;
            target.raycastTarget = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
            optimized.SetValue(default(global::UnityEngine.UI.Graphic), default(bool));
        }

        // UnityEngine.UI.Text.rectTransform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_rectTransform()
        {
            global::UnityEngine.UI.Graphic target = default(global::UnityEngine.UI.Graphic);
            global::UnityEngine.RectTransform accessor = target.rectTransform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic, UnityEngine.RectTransform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Graphic,
                        UnityEngine.RectTransform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Text.resizeTextForBestFit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_resizeTextForBestFit()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            bool accessor = target.resizeTextForBestFit;
            target.resizeTextForBestFit = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(bool));
        }

        // UnityEngine.UI.Text.resizeTextMaxSize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_resizeTextMaxSize()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            int accessor = target.resizeTextMaxSize;
            target.resizeTextMaxSize = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(int));
        }

        // UnityEngine.UI.Text.resizeTextMinSize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_resizeTextMinSize()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            int accessor = target.resizeTextMinSize;
            target.resizeTextMinSize = default(int);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, int> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, int>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(int));
        }

        // UnityEngine.UI.Text.supportRichText
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_supportRichText()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            bool accessor = target.supportRichText;
            target.supportRichText = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(bool));
        }

        // UnityEngine.UI.Text.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.Text.text
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_text()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            string accessor = target.text;
            target.text = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(string));
        }

        // UnityEngine.UI.Text.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Text.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.Text.verticalOverflow
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Text_verticalOverflow()
        {
            global::UnityEngine.UI.Text target = default(global::UnityEngine.UI.Text);
            global::UnityEngine.VerticalWrapMode accessor = target.verticalOverflow;
            target.verticalOverflow = default(global::UnityEngine.VerticalWrapMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text, UnityEngine.VerticalWrapMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Text,
                        UnityEngine.VerticalWrapMode>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Text));
            optimized.SetValue(default(global::UnityEngine.UI.Text), default(global::UnityEngine.VerticalWrapMode));
        }

        // UnityEngine.UI.Toggle.animationTriggers
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_animationTriggers()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.AnimationTriggers accessor = target.animationTriggers;
            target.animationTriggers = default(global::UnityEngine.UI.AnimationTriggers);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.AnimationTriggers>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.AnimationTriggers>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.AnimationTriggers));
        }

        // UnityEngine.UI.Toggle.animator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_animator()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.Animator accessor = target.animator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.Animator>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.Animator>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
        }

        // UnityEngine.UI.Toggle.colors
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_colors()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.ColorBlock accessor = target.colors;
            target.colors = default(global::UnityEngine.UI.ColorBlock);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.ColorBlock>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.ColorBlock>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.ColorBlock));
        }

        // UnityEngine.UI.Toggle.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.UI.Toggle.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Toggle.graphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_graphic()
        {
            global::UnityEngine.UI.Toggle target = default(global::UnityEngine.UI.Toggle);
            global::UnityEngine.UI.Graphic accessor = target.graphic;
            target.graphic = default(global::UnityEngine.UI.Graphic);
            global::Unity.VisualScripting.InstanceFieldAccessor<UnityEngine.UI.Toggle, UnityEngine.UI.Graphic>
                optimized =
                    new global::Unity.VisualScripting.InstanceFieldAccessor<UnityEngine.UI.Toggle,
                        UnityEngine.UI.Graphic>(
                        default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Toggle));
            optimized.SetValue(default(global::UnityEngine.UI.Toggle), default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Toggle.group
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_group()
        {
            global::UnityEngine.UI.Toggle target = default(global::UnityEngine.UI.Toggle);
            global::UnityEngine.UI.ToggleGroup accessor = target.group;
            target.group = default(global::UnityEngine.UI.ToggleGroup);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Toggle, UnityEngine.UI.ToggleGroup>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Toggle,
                        UnityEngine.UI.ToggleGroup>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Toggle));
            optimized.SetValue(default(global::UnityEngine.UI.Toggle), default(global::UnityEngine.UI.ToggleGroup));
        }

        // UnityEngine.UI.Toggle.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.UI.Toggle.image
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_image()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Image accessor = target.image;
            target.image = default(global::UnityEngine.UI.Image);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Image>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Image>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Image));
        }

        // UnityEngine.UI.Toggle.interactable
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_interactable()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            bool accessor = target.interactable;
            target.interactable = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(bool));
        }

        // UnityEngine.UI.Toggle.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.UI.Toggle.isOn
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_isOn()
        {
            global::UnityEngine.UI.Toggle target = default(global::UnityEngine.UI.Toggle);
            bool accessor = target.isOn;
            target.isOn = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Toggle, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Toggle, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Toggle));
            optimized.SetValue(default(global::UnityEngine.UI.Toggle), default(bool));
        }

        // UnityEngine.UI.Toggle.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.UI.Toggle.navigation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_navigation()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Navigation accessor = target.navigation;
            target.navigation = default(global::UnityEngine.UI.Navigation);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Navigation>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Navigation>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Navigation));
        }

        // UnityEngine.UI.Toggle.onValueChanged
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_onValueChanged()
        {
            global::UnityEngine.UI.Toggle target = default(global::UnityEngine.UI.Toggle);
            global::UnityEngine.UI.Toggle.ToggleEvent accessor = target.onValueChanged;
            target.onValueChanged = default(global::UnityEngine.UI.Toggle.ToggleEvent);
            global::Unity.VisualScripting.InstanceFieldAccessor<UnityEngine.UI.Toggle,
                UnityEngine.UI.Toggle.ToggleEvent> optimized =
                new global::Unity.VisualScripting.InstanceFieldAccessor<UnityEngine.UI.Toggle,
                    UnityEngine.UI.Toggle.ToggleEvent>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Toggle));
            optimized.SetValue(default(global::UnityEngine.UI.Toggle),
                default(global::UnityEngine.UI.Toggle.ToggleEvent));
        }

        // UnityEngine.UI.Toggle.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Toggle.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Toggle.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.Toggle.spriteState
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_spriteState()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.SpriteState accessor = target.spriteState;
            target.spriteState = default(global::UnityEngine.UI.SpriteState);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                UnityEngine.UI.SpriteState> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.SpriteState>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.SpriteState));
        }

        // UnityEngine.UI.Toggle.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.UI.Toggle.targetGraphic
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_targetGraphic()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Graphic accessor = target.targetGraphic;
            target.targetGraphic = default(global::UnityEngine.UI.Graphic);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable, UnityEngine.UI.Graphic>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Graphic>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable), default(global::UnityEngine.UI.Graphic));
        }

        // UnityEngine.UI.Toggle.toggleTransition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_toggleTransition()
        {
            global::UnityEngine.UI.Toggle target = default(global::UnityEngine.UI.Toggle);
            global::UnityEngine.UI.Toggle.ToggleTransition accessor = target.toggleTransition;
            target.toggleTransition = default(global::UnityEngine.UI.Toggle.ToggleTransition);
            global::Unity.VisualScripting.InstanceFieldAccessor<UnityEngine.UI.Toggle,
                UnityEngine.UI.Toggle.ToggleTransition> optimized
                = new
                    global::Unity.VisualScripting.InstanceFieldAccessor<UnityEngine.UI.Toggle,
                        UnityEngine.UI.Toggle.ToggleTransition>(
                        default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Toggle));
            optimized.SetValue(default(global::UnityEngine.UI.Toggle),
                default(global::UnityEngine.UI.Toggle.ToggleTransition));
        }

        // UnityEngine.UI.Toggle.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.UI.Toggle.transition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_transition()
        {
            global::UnityEngine.UI.Selectable target = default(global::UnityEngine.UI.Selectable);
            global::UnityEngine.UI.Selectable.Transition accessor = target.transition;
            target.transition = default(global::UnityEngine.UI.Selectable.Transition);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                    UnityEngine.UI.Selectable.Transition>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.UI.Selectable,
                        UnityEngine.UI.Selectable.Transition>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.UI.Selectable));
            optimized.SetValue(default(global::UnityEngine.UI.Selectable),
                default(global::UnityEngine.UI.Selectable.Transition));
        }

        // UnityEngine.UI.Toggle.useGUILayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_Toggle_useGUILayout()
        {
            global::UnityEngine.MonoBehaviour target = default(global::UnityEngine.MonoBehaviour);
            bool accessor = target.useGUILayout;
            target.useGUILayout = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.MonoBehaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.MonoBehaviour));
            optimized.SetValue(default(global::UnityEngine.MonoBehaviour), default(bool));
        }

        // UnityEngine.UI.ToggleGroup.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.ToggleGroup.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.ToggleGroup.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_ToggleGroup_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.VerticalLayoutGroup.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_VerticalLayoutGroup_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.VerticalLayoutGroup.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_VerticalLayoutGroup_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UI.VerticalLayoutGroup.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UI_VerticalLayoutGroup_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.StyleSheet.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_StyleSheet_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.StyleSheet.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_StyleSheet_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.StyleSheet.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_StyleSheet_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.ThemeStyleSheet.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_ThemeStyleSheet_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.ThemeStyleSheet.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_ThemeStyleSheet_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.ThemeStyleSheet.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_ThemeStyleSheet_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.VectorImage.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_VectorImage_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.VectorImage.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_VectorImage_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.VectorImage.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_VectorImage_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.VisualTreeAsset.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_VisualTreeAsset_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.VisualTreeAsset.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_VisualTreeAsset_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.UIElements.VisualTreeAsset.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_UIElements_VisualTreeAsset_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2..ctor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_ctor()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            new UnityEngine.Vector2(arg0, arg1);
        }

        // UnityEngine.Vector2.Distance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_Distance()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2 arg1 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2.Distance(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2, float>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                        float>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.Dot
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_Dot()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2 arg1 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2.Dot(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2, float>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                        float>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.down
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_down()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Vector2.down;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector2.Equals
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_Equals()
        {
            global::UnityEngine.Vector2 target = default(global::UnityEngine.Vector2);
            object arg0 = default(object);
            target.Equals(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Vector2), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.kEpsilon
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_kEpsilon()
        {
            float accessor = global::UnityEngine.Vector2.kEpsilon;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector2.kEpsilonNormalSqrt
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_kEpsilonNormalSqrt()
        {
            float accessor = global::UnityEngine.Vector2.kEpsilonNormalSqrt;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector2.left
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_left()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Vector2.left;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector2.magnitude
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_magnitude()
        {
            global::UnityEngine.Vector2 target = default(global::UnityEngine.Vector2);
            float accessor = target.magnitude;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Vector2.negativeInfinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_negativeInfinity()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Vector2.negativeInfinity;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector2.normalized
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_normalized()
        {
            global::UnityEngine.Vector2 target = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2 accessor = target.normalized;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Vector2.one
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_one()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Vector2.one;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector2.op_Addition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Addition()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2 arg1 = default(global::UnityEngine.Vector2);
            UnityEngine.Vector2 @operator = (arg0 + arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                UnityEngine.Vector2> optimized
                = new
                    global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Division
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Division()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2 arg1 = default(global::UnityEngine.Vector2);
            UnityEngine.Vector2 @operator = (arg0 / arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                UnityEngine.Vector2> optimized
                = new
                    global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Division
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Division_0()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            float arg1 = default(float);
            UnityEngine.Vector2 @operator = (arg0 / arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, float, UnityEngine.Vector2>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, float,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Equality()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2 arg1 = default(global::UnityEngine.Vector2);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Implicit()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            UnityEngine.Vector2 conversion = ((UnityEngine.Vector2) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector2>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Implicit_0()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            UnityEngine.Vector3 conversion = ((UnityEngine.Vector3) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector3>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Inequality()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2 arg1 = default(global::UnityEngine.Vector2);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Multiply()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2 arg1 = default(global::UnityEngine.Vector2);
            UnityEngine.Vector2 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                UnityEngine.Vector2> optimized
                = new
                    global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Multiply_0()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            float arg1 = default(float);
            UnityEngine.Vector2 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, float, UnityEngine.Vector2>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, float,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Multiply_1()
        {
            float arg0 = default(float);
            global::UnityEngine.Vector2 arg1 = default(global::UnityEngine.Vector2);
            UnityEngine.Vector2 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Vector2, UnityEngine.Vector2>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Vector2,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_Subtraction
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_Subtraction()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            global::UnityEngine.Vector2 arg1 = default(global::UnityEngine.Vector2);
            UnityEngine.Vector2 @operator = (arg0 - arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                UnityEngine.Vector2> optimized
                = new
                    global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2,
                        UnityEngine.Vector2>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.op_UnaryNegation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_op_UnaryNegation()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector2>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector2.positiveInfinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_positiveInfinity()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Vector2.positiveInfinity;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector2.right
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_right()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Vector2.right;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector2.sqrMagnitude
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_sqrMagnitude()
        {
            global::UnityEngine.Vector2 target = default(global::UnityEngine.Vector2);
            float accessor = target.sqrMagnitude;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Vector2));
        }

        // UnityEngine.Vector2.up
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_up()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Vector2.up;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector2.x
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_x()
        {
            global::UnityEngine.Vector2 target = default(global::UnityEngine.Vector2);
            float accessor = target.x;
            target.x = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Vector2));
            optimized.SetValue(default(global::UnityEngine.Vector2), default(float));
        }

        // UnityEngine.Vector2.y
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_y()
        {
            global::UnityEngine.Vector2 target = default(global::UnityEngine.Vector2);
            float accessor = target.y;
            target.y = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Vector2));
            optimized.SetValue(default(global::UnityEngine.Vector2), default(float));
        }

        // UnityEngine.Vector2.zero
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector2_zero()
        {
            global::UnityEngine.Vector2 accessor = global::UnityEngine.Vector2.zero;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector2>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3..ctor
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_ctor()
        {
            float arg0 = default(float);
            float arg1 = default(float);
            float arg2 = default(float);
            new UnityEngine.Vector3(arg0, arg1, arg2);
        }

        // UnityEngine.Vector3.back
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_back()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.back;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.Cross
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_Cross()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3.Cross(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                UnityEngine.Vector3> optimized
                = new
                    global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.Distance
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_Distance()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3.Distance(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        float>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.Dot
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_Dot()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3.Dot(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        float>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.down
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_down()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.down;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.Equals
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_Equals()
        {
            global::UnityEngine.Vector3 target = default(global::UnityEngine.Vector3);
            object arg0 = default(object);
            target.Equals(arg0);
            global::Unity.VisualScripting.ReflectionInvoker optimized =
                new global::Unity.VisualScripting.ReflectionInvoker(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(default(global::UnityEngine.Vector3), arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.forward
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_forward()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.forward;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.kEpsilon
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_kEpsilon()
        {
            float accessor = global::UnityEngine.Vector3.kEpsilon;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.kEpsilonNormalSqrt
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_kEpsilonNormalSqrt()
        {
            float accessor = global::UnityEngine.Vector3.kEpsilonNormalSqrt;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.left
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_left()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.left;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.magnitude
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_magnitude()
        {
            global::UnityEngine.Vector3 target = default(global::UnityEngine.Vector3);
            float accessor = target.magnitude;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Vector3.MoveTowards
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_MoveTowards()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            float arg2 = default(float);
            global::UnityEngine.Vector3.MoveTowards(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float,
                    UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        float,
                        UnityEngine.Vector3>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.negativeInfinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_negativeInfinity()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.negativeInfinity;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.Normalize
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_Normalize()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3.Normalize(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.normalized
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_normalized()
        {
            global::UnityEngine.Vector3 target = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 accessor = target.normalized;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Vector3.one
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_one()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.one;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.op_Addition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_op_Addition()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            UnityEngine.Vector3 @operator = (arg0 + arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                UnityEngine.Vector3> optimized
                = new
                    global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.op_Division
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_op_Division()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            UnityEngine.Vector3 @operator = (arg0 / arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_op_Equality()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_op_Inequality()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_op_Multiply()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            UnityEngine.Vector3 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_op_Multiply_0()
        {
            float arg0 = default(float);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            UnityEngine.Vector3 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Vector3, UnityEngine.Vector3>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Vector3,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.op_Subtraction
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_op_Subtraction()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            UnityEngine.Vector3 @operator = (arg0 - arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                UnityEngine.Vector3> optimized
                = new
                    global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                        UnityEngine.Vector3>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.op_UnaryNegation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_op_UnaryNegation()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.positiveInfinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_positiveInfinity()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.positiveInfinity;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.right
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_right()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.right;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.sqrMagnitude
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_sqrMagnitude()
        {
            global::UnityEngine.Vector3 target = default(global::UnityEngine.Vector3);
            float accessor = target.sqrMagnitude;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Vector3));
        }

        // UnityEngine.Vector3.SqrMagnitude
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_SqrMagnitude()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3.SqrMagnitude(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector3.up
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_up()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.up;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector3.x
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_x()
        {
            global::UnityEngine.Vector3 target = default(global::UnityEngine.Vector3);
            float accessor = target.x;
            target.x = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Vector3));
            optimized.SetValue(default(global::UnityEngine.Vector3), default(float));
        }

        // UnityEngine.Vector3.y
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_y()
        {
            global::UnityEngine.Vector3 target = default(global::UnityEngine.Vector3);
            float accessor = target.y;
            target.y = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Vector3));
            optimized.SetValue(default(global::UnityEngine.Vector3), default(float));
        }

        // UnityEngine.Vector3.z
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_z()
        {
            global::UnityEngine.Vector3 target = default(global::UnityEngine.Vector3);
            float accessor = target.z;
            target.z = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Vector3));
            optimized.SetValue(default(global::UnityEngine.Vector3), default(float));
        }

        // UnityEngine.Vector3.zero
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector3_zero()
        {
            global::UnityEngine.Vector3 accessor = global::UnityEngine.Vector3.zero;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector3>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector4.kEpsilon
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_kEpsilon()
        {
            float accessor = global::UnityEngine.Vector4.kEpsilon;
            global::Unity.VisualScripting.StaticFieldAccessor<float> optimized =
                new global::Unity.VisualScripting.StaticFieldAccessor<float>(
                    default(global::System.Reflection.FieldInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector4.magnitude
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_magnitude()
        {
            global::UnityEngine.Vector4 target = default(global::UnityEngine.Vector4);
            float accessor = target.magnitude;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Vector4));
        }

        // UnityEngine.Vector4.negativeInfinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_negativeInfinity()
        {
            global::UnityEngine.Vector4 accessor = global::UnityEngine.Vector4.negativeInfinity;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector4>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector4.normalized
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_normalized()
        {
            global::UnityEngine.Vector4 target = default(global::UnityEngine.Vector4);
            global::UnityEngine.Vector4 accessor = target.normalized;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Vector4));
        }

        // UnityEngine.Vector4.one
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_one()
        {
            global::UnityEngine.Vector4 accessor = global::UnityEngine.Vector4.one;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector4>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector4.op_Addition
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Addition()
        {
            global::UnityEngine.Vector4 arg0 = default(global::UnityEngine.Vector4);
            global::UnityEngine.Vector4 arg1 = default(global::UnityEngine.Vector4);
            UnityEngine.Vector4 @operator = (arg0 + arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4,
                UnityEngine.Vector4> optimized
                = new
                    global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4,
                        UnityEngine.Vector4>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_Division
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Division()
        {
            global::UnityEngine.Vector4 arg0 = default(global::UnityEngine.Vector4);
            float arg1 = default(float);
            UnityEngine.Vector4 @operator = (arg0 / arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, float, UnityEngine.Vector4>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, float,
                        UnityEngine.Vector4>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Equality()
        {
            global::UnityEngine.Vector4 arg0 = default(global::UnityEngine.Vector4);
            global::UnityEngine.Vector4 arg1 = default(global::UnityEngine.Vector4);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Implicit()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            UnityEngine.Vector4 conversion = ((UnityEngine.Vector4) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector4>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Implicit_0()
        {
            global::UnityEngine.Vector4 arg0 = default(global::UnityEngine.Vector4);
            UnityEngine.Vector3 conversion = ((UnityEngine.Vector3) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector3> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector3>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Implicit_1()
        {
            global::UnityEngine.Vector2 arg0 = default(global::UnityEngine.Vector2);
            UnityEngine.Vector4 conversion = ((UnityEngine.Vector4) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector2, UnityEngine.Vector4>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Inequality()
        {
            global::UnityEngine.Vector4 arg0 = default(global::UnityEngine.Vector4);
            global::UnityEngine.Vector4 arg1 = default(global::UnityEngine.Vector4);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Multiply()
        {
            global::UnityEngine.Vector4 arg0 = default(global::UnityEngine.Vector4);
            float arg1 = default(float);
            UnityEngine.Vector4 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, float, UnityEngine.Vector4>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, float,
                        UnityEngine.Vector4>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_Multiply
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Multiply_0()
        {
            float arg0 = default(float);
            global::UnityEngine.Vector4 arg1 = default(global::UnityEngine.Vector4);
            UnityEngine.Vector4 @operator = (arg0 * arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Vector4, UnityEngine.Vector4>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<float, UnityEngine.Vector4,
                        UnityEngine.Vector4>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_Subtraction
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_Subtraction()
        {
            global::UnityEngine.Vector4 arg0 = default(global::UnityEngine.Vector4);
            global::UnityEngine.Vector4 arg1 = default(global::UnityEngine.Vector4);
            UnityEngine.Vector4 @operator = (arg0 - arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4,
                UnityEngine.Vector4> optimized
                = new
                    global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4,
                        UnityEngine.Vector4>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.op_UnaryNegation
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_op_UnaryNegation()
        {
            global::UnityEngine.Vector4 arg0 = default(global::UnityEngine.Vector4);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector4, UnityEngine.Vector4>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Vector4.positiveInfinity
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_positiveInfinity()
        {
            global::UnityEngine.Vector4 accessor = global::UnityEngine.Vector4.positiveInfinity;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector4>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Vector4.sqrMagnitude
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_sqrMagnitude()
        {
            global::UnityEngine.Vector4 target = default(global::UnityEngine.Vector4);
            float accessor = target.sqrMagnitude;
            global::Unity.VisualScripting.ReflectionPropertyAccessor optimized =
                new global::Unity.VisualScripting.ReflectionPropertyAccessor(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Vector4));
        }

        // UnityEngine.Vector4.w
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_w()
        {
            global::UnityEngine.Vector4 target = default(global::UnityEngine.Vector4);
            float accessor = target.w;
            target.w = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Vector4));
            optimized.SetValue(default(global::UnityEngine.Vector4), default(float));
        }

        // UnityEngine.Vector4.x
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_x()
        {
            global::UnityEngine.Vector4 target = default(global::UnityEngine.Vector4);
            float accessor = target.x;
            target.x = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Vector4));
            optimized.SetValue(default(global::UnityEngine.Vector4), default(float));
        }

        // UnityEngine.Vector4.y
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_y()
        {
            global::UnityEngine.Vector4 target = default(global::UnityEngine.Vector4);
            float accessor = target.y;
            target.y = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Vector4));
            optimized.SetValue(default(global::UnityEngine.Vector4), default(float));
        }

        // UnityEngine.Vector4.z
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_z()
        {
            global::UnityEngine.Vector4 target = default(global::UnityEngine.Vector4);
            float accessor = target.z;
            target.z = default(float);
            global::Unity.VisualScripting.ReflectionFieldAccessor optimized =
                new global::Unity.VisualScripting.ReflectionFieldAccessor(default(global::System.Reflection.FieldInfo));
            optimized.GetValue(default(global::UnityEngine.Vector4));
            optimized.SetValue(default(global::UnityEngine.Vector4), default(float));
        }

        // UnityEngine.Vector4.zero
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Vector4_zero()
        {
            global::UnityEngine.Vector4 accessor = global::UnityEngine.Vector4.zero;
            global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector4> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<UnityEngine.Vector4>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Video.VideoClip.audioTrackCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_audioTrackCount()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            ushort accessor = target.audioTrackCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, ushort> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, ushort>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoClip.frameCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_frameCount()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            ulong accessor = target.frameCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, ulong> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoClip.frameRate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_frameRate()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            double accessor = target.frameRate;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, double> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoClip.height
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_height()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            uint accessor = target.height;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoClip.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Video.VideoClip.length
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_length()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            double accessor = target.length;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, double> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoClip.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Video.VideoClip.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Video.VideoClip.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Video.VideoClip.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Video.VideoClip.originalPath
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_originalPath()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            string accessor = target.originalPath;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoClip.pixelAspectRatioDenominator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_pixelAspectRatioDenominator()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            uint accessor = target.pixelAspectRatioDenominator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoClip.pixelAspectRatioNumerator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_pixelAspectRatioNumerator()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            uint accessor = target.pixelAspectRatioNumerator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoClip.sRGB
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_sRGB()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            bool accessor = target.sRGB;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoClip.width
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoClip_width()
        {
            global::UnityEngine.Video.VideoClip target = default(global::UnityEngine.Video.VideoClip);
            uint accessor = target.width;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoClip, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoPlayer.aspectRatio
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_aspectRatio()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Video.VideoAspectRatio accessor = target.aspectRatio;
            target.aspectRatio = default(global::UnityEngine.Video.VideoAspectRatio);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                    UnityEngine.Video.VideoAspectRatio>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Video.VideoAspectRatio>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer),
                default(global::UnityEngine.Video.VideoAspectRatio));
        }

        // UnityEngine.Video.VideoPlayer.audioOutputMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_audioOutputMode()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Video.VideoAudioOutputMode accessor = target.audioOutputMode;
            target.audioOutputMode = default(global::UnityEngine.Video.VideoAudioOutputMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                UnityEngine.Video.VideoAudioOutputMode
            > optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                    UnityEngine.Video.VideoAudioOutputMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer),
                default(global::UnityEngine.Video.VideoAudioOutputMode));
        }

        // UnityEngine.Video.VideoPlayer.audioTrackCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_audioTrackCount()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            ushort accessor = target.audioTrackCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, ushort> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, ushort>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.canSetDirectAudioVolume
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_canSetDirectAudioVolume()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.canSetDirectAudioVolume;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.canSetPlaybackSpeed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_canSetPlaybackSpeed()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.canSetPlaybackSpeed;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.canSetSkipOnDrop
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_canSetSkipOnDrop()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.canSetSkipOnDrop;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.canSetTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_canSetTime()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.canSetTime;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.canSetTimeSource
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_canSetTimeSource()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.canSetTimeSource;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.canStep
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_canStep()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.canStep;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.clip
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_clip()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Video.VideoClip accessor = target.clip;
            target.clip = default(global::UnityEngine.Video.VideoClip);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                UnityEngine.Video.VideoClip> optimized
                = new
                    global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Video.VideoClip>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer),
                default(global::UnityEngine.Video.VideoClip));
        }

        // UnityEngine.Video.VideoPlayer.clockTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_clockTime()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            double accessor = target.clockTime;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, double> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.controlledAudioTrackCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_controlledAudioTrackCount()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            ushort accessor = target.controlledAudioTrackCount;
            target.controlledAudioTrackCount = default(ushort);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, ushort> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, ushort>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(ushort));
        }

        // UnityEngine.Video.VideoPlayer.controlledAudioTrackMaxCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_controlledAudioTrackMaxCount()
        {
            ushort accessor = global::UnityEngine.Video.VideoPlayer.controlledAudioTrackMaxCount;
            global::Unity.VisualScripting.StaticPropertyAccessor<ushort> optimized =
                new global::Unity.VisualScripting.StaticPropertyAccessor<ushort>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(null);
        }

        // UnityEngine.Video.VideoPlayer.enabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_enabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.enabled;
            target.enabled = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
            optimized.SetValue(default(global::UnityEngine.Behaviour), default(bool));
        }

        // UnityEngine.Video.VideoPlayer.externalReferenceTime
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_externalReferenceTime()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            double accessor = target.externalReferenceTime;
            target.externalReferenceTime = default(double);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, double> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(double));
        }

        // UnityEngine.Video.VideoPlayer.frame
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_frame()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            long accessor = target.frame;
            target.frame = default(long);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, long> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, long>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(long));
        }

        // UnityEngine.Video.VideoPlayer.frameCount
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_frameCount()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            ulong accessor = target.frameCount;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, ulong> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, ulong>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.frameRate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_frameRate()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            float accessor = target.frameRate;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.gameObject
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_gameObject()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.GameObject accessor = target.gameObject;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.GameObject>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.GameObject>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Video.VideoPlayer.height
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_height()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            uint accessor = target.height;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.hideFlags
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_hideFlags()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            global::UnityEngine.HideFlags accessor = target.hideFlags;
            target.hideFlags = default(global::UnityEngine.HideFlags);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, UnityEngine.HideFlags>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object,
                        UnityEngine.HideFlags>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(global::UnityEngine.HideFlags));
        }

        // UnityEngine.Video.VideoPlayer.isActiveAndEnabled
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_isActiveAndEnabled()
        {
            global::UnityEngine.Behaviour target = default(global::UnityEngine.Behaviour);
            bool accessor = target.isActiveAndEnabled;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Behaviour, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Behaviour));
        }

        // UnityEngine.Video.VideoPlayer.isLooping
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_isLooping()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.isLooping;
            target.isLooping = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(bool));
        }

        // UnityEngine.Video.VideoPlayer.isPaused
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_isPaused()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.isPaused;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.isPlaying
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_isPlaying()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.isPlaying;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.isPrepared
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_isPrepared()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.isPrepared;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.length
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_length()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            double accessor = target.length;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, double> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.name
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_name()
        {
            global::UnityEngine.Object target = default(global::UnityEngine.Object);
            string accessor = target.name;
            target.name = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Object, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Object));
            optimized.SetValue(default(global::UnityEngine.Object), default(string));
        }

        // UnityEngine.Video.VideoPlayer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Video.VideoPlayer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Video.VideoPlayer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Video.VideoPlayer.pixelAspectRatioDenominator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_pixelAspectRatioDenominator()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            uint accessor = target.pixelAspectRatioDenominator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.pixelAspectRatioNumerator
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_pixelAspectRatioNumerator()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            uint accessor = target.pixelAspectRatioNumerator;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.playbackSpeed
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_playbackSpeed()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            float accessor = target.playbackSpeed;
            target.playbackSpeed = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(float));
        }

        // UnityEngine.Video.VideoPlayer.playOnAwake
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_playOnAwake()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.playOnAwake;
            target.playOnAwake = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(bool));
        }

        // UnityEngine.Video.VideoPlayer.renderMode
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_renderMode()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Video.VideoRenderMode accessor = target.renderMode;
            target.renderMode = default(global::UnityEngine.Video.VideoRenderMode);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                    UnityEngine.Video.VideoRenderMode>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Video.VideoRenderMode>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer),
                default(global::UnityEngine.Video.VideoRenderMode));
        }

        // UnityEngine.Video.VideoPlayer.sendFrameReadyEvents
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_sendFrameReadyEvents()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.sendFrameReadyEvents;
            target.sendFrameReadyEvents = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(bool));
        }

        // UnityEngine.Video.VideoPlayer.skipOnDrop
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_skipOnDrop()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.skipOnDrop;
            target.skipOnDrop = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(bool));
        }

        // UnityEngine.Video.VideoPlayer.source
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_source()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Video.VideoSource accessor = target.source;
            target.source = default(global::UnityEngine.Video.VideoSource);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                    UnityEngine.Video.VideoSource>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Video.VideoSource>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer),
                default(global::UnityEngine.Video.VideoSource));
        }

        // UnityEngine.Video.VideoPlayer.tag
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_tag()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            string accessor = target.tag;
            target.tag = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
            optimized.SetValue(default(global::UnityEngine.Component), default(string));
        }

        // UnityEngine.Video.VideoPlayer.targetCamera
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_targetCamera()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Camera accessor = target.targetCamera;
            target.targetCamera = default(global::UnityEngine.Camera);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, UnityEngine.Camera>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Camera>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(global::UnityEngine.Camera));
        }

        // UnityEngine.Video.VideoPlayer.targetCamera3DLayout
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_targetCamera3DLayout()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Video.Video3DLayout accessor = target.targetCamera3DLayout;
            target.targetCamera3DLayout = default(global::UnityEngine.Video.Video3DLayout);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                    UnityEngine.Video.Video3DLayout>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Video.Video3DLayout>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer),
                default(global::UnityEngine.Video.Video3DLayout));
        }

        // UnityEngine.Video.VideoPlayer.targetCameraAlpha
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_targetCameraAlpha()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            float accessor = target.targetCameraAlpha;
            target.targetCameraAlpha = default(float);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, float> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, float>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(float));
        }

        // UnityEngine.Video.VideoPlayer.targetMaterialProperty
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_targetMaterialProperty()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            string accessor = target.targetMaterialProperty;
            target.targetMaterialProperty = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(string));
        }

        // UnityEngine.Video.VideoPlayer.targetMaterialRenderer
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_targetMaterialRenderer()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Renderer accessor = target.targetMaterialRenderer;
            target.targetMaterialRenderer = default(global::UnityEngine.Renderer);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, UnityEngine.Renderer>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Renderer>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(global::UnityEngine.Renderer));
        }

        // UnityEngine.Video.VideoPlayer.targetTexture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_targetTexture()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.RenderTexture accessor = target.targetTexture;
            target.targetTexture = default(global::UnityEngine.RenderTexture);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                UnityEngine.RenderTexture> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                    UnityEngine.RenderTexture>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer),
                default(global::UnityEngine.RenderTexture));
        }

        // UnityEngine.Video.VideoPlayer.texture
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_texture()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Texture accessor = target.texture;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, UnityEngine.Texture>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Texture>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.Video.VideoPlayer.time
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_time()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            double accessor = target.time;
            target.time = default(double);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, double> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, double>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(double));
        }

        // UnityEngine.Video.VideoPlayer.timeReference
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_timeReference()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Video.VideoTimeReference accessor = target.timeReference;
            target.timeReference = default(global::UnityEngine.Video.VideoTimeReference);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                    UnityEngine.Video.VideoTimeReference>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Video.VideoTimeReference>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer),
                default(global::UnityEngine.Video.VideoTimeReference));
        }

        // UnityEngine.Video.VideoPlayer.timeSource
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_timeSource()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            global::UnityEngine.Video.VideoTimeSource accessor = target.timeSource;
            target.timeSource = default(global::UnityEngine.Video.VideoTimeSource);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                    UnityEngine.Video.VideoTimeSource>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer,
                        UnityEngine.Video.VideoTimeSource>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer),
                default(global::UnityEngine.Video.VideoTimeSource));
        }

        // UnityEngine.Video.VideoPlayer.transform
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_transform()
        {
            global::UnityEngine.Component target = default(global::UnityEngine.Component);
            global::UnityEngine.Transform accessor = target.transform;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component, UnityEngine.Transform>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Component,
                        UnityEngine.Transform>(
                        default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Component));
        }

        // UnityEngine.Video.VideoPlayer.url
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_url()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            string accessor = target.url;
            target.url = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(string));
        }

        // UnityEngine.Video.VideoPlayer.waitForFirstFrame
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_waitForFirstFrame()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            bool accessor = target.waitForFirstFrame;
            target.waitForFirstFrame = default(bool);
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, bool>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
            optimized.SetValue(default(global::UnityEngine.Video.VideoPlayer), default(bool));
        }

        // UnityEngine.Video.VideoPlayer.width
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Video_VideoPlayer_width()
        {
            global::UnityEngine.Video.VideoPlayer target = default(global::UnityEngine.Video.VideoPlayer);
            uint accessor = target.width;
            global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, uint> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<UnityEngine.Video.VideoPlayer, uint>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::UnityEngine.Video.VideoPlayer));
        }

        // UnityEngine.WebCamTexture.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_WebCamTexture_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.WebCamTexture.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_WebCamTexture_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.WebCamTexture.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_WebCamTexture_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.WheelCollider.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_WheelCollider_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.WheelCollider.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_WheelCollider_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.WheelCollider.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_WheelCollider_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.WheelJoint2D.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_WheelJoint2D_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.WheelJoint2D.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_WheelJoint2D_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.WheelJoint2D.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_WheelJoint2D_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(
                        default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.WindZone.op_Equality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_WindZone_op_Equality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 == arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.WindZone.op_Implicit
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_WindZone_op_Implicit()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     bool conversion = ((bool)(arg0));
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.WindZone.op_Inequality
        // [global::UnityEngine.Scripting.PreserveAttribute()]
        // public static void UnityEngine_WindZone_op_Inequality()
        // {
        //     global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
        //     global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
        //     bool @operator = (arg0 != arg1);
        //     global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool> optimized =
        //         new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>(
        //             default(global::System.Reflection.MethodInfo));
        //     optimized.Invoke(null, arg0, arg1);
        //     optimized.Invoke(default(object[]));
        // }

        // UnityEngine.Object.Instantiate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Object_Instantiate()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Transform arg1 = default(global::UnityEngine.Transform);
            bool arg2 = default(bool);
            global::UnityEngine.Object.Instantiate(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Transform, bool,
                UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Transform, bool,
                    UnityEngine.Object>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Object.Instantiate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Object_Instantiate_0()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Transform arg1 = default(global::UnityEngine.Transform);
            global::UnityEngine.Object.Instantiate(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Transform,
                UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Transform,
                    UnityEngine.Object>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Object.Instantiate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Object_Instantiate_1()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object.Instantiate(arg0);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Object.Instantiate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Object_Instantiate_2()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg2 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Transform arg3 = default(global::UnityEngine.Transform);
            global::UnityEngine.Object.Instantiate(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3,
                UnityEngine.Quaternion, UnityEngine.Transform, UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3,
                    UnityEngine.Quaternion, UnityEngine.Transform, UnityEngine.Object>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Object.Instantiate
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Object_Instantiate_3()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg2 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Object.Instantiate(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3,
                UnityEngine.Quaternion, UnityEngine.Object> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Vector3,
                    UnityEngine.Quaternion, UnityEngine.Object>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }


        // TMPro.TMP_InputField.text
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_InputField_text()
        {
            global::TMPro.TMP_InputField target = default(global::TMPro.TMP_InputField);
            string accessor = target.text;
            target.text = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<TMPro.TMP_InputField, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<TMPro.TMP_InputField, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::TMPro.TMP_InputField));
            optimized.SetValue(default(global::TMPro.TMP_InputField), default(string));
        }

        // TMPro.TextMeshProUGUI.text
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextMeshProUGUI_text()
        {
            global::TMPro.TMP_Text target = default(global::TMPro.TMP_Text);
            string accessor = target.text;
            target.text = default(string);
            global::Unity.VisualScripting.InstancePropertyAccessor<TMPro.TMP_Text, string> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<TMPro.TMP_Text, string>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::TMPro.TMP_Text));
            optimized.SetValue(default(global::TMPro.TMP_Text), default(string));
        }

        // TMPro.TMP_Dropdown.options
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_Dropdown_options()
        {
            global::TMPro.TMP_Dropdown target = default(global::TMPro.TMP_Dropdown);
            global::System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData> accessor = target.options;
            target.options = default(global::System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>);
            global::Unity.VisualScripting.InstancePropertyAccessor<TMPro.TMP_Dropdown,
                System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>> optimized =
                new global::Unity.VisualScripting.InstancePropertyAccessor<TMPro.TMP_Dropdown,
                    System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>>(
                    default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::TMPro.TMP_Dropdown));
            optimized.SetValue(default(global::TMPro.TMP_Dropdown),
                default(global::System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>));
        }

        // TMPro.TMP_Dropdown.onValueChanged
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_Dropdown_onValueChanged()
        {
            global::TMPro.TMP_Dropdown target = default(global::TMPro.TMP_Dropdown);
            global::TMPro.TMP_Dropdown.DropdownEvent accessor = target.onValueChanged;
            target.onValueChanged = default(global::TMPro.TMP_Dropdown.DropdownEvent);
            global::Unity.VisualScripting.InstancePropertyAccessor<TMPro.TMP_Dropdown, TMPro.TMP_Dropdown.DropdownEvent>
                optimized =
                    new global::Unity.VisualScripting.InstancePropertyAccessor<TMPro.TMP_Dropdown,
                        TMPro.TMP_Dropdown.DropdownEvent>(default(global::System.Reflection.PropertyInfo));
            optimized.GetValue(default(global::TMPro.TMP_Dropdown));
            optimized.SetValue(default(global::TMPro.TMP_Dropdown), default(global::TMPro.TMP_Dropdown.DropdownEvent));
        }

        // TMPro.TMP_SubMesh.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SubMesh_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SubMesh.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SubMesh_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SubMesh.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SubMesh_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SubMeshUI.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SubMeshUI_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SubMeshUI.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SubMeshUI_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SubMeshUI.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SubMeshUI_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TextContainer.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextContainer_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TextContainer.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextContainer_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TextContainer.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextContainer_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TextMeshPro.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextMeshPro_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TextMeshPro.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextMeshPro_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TextMeshPro.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextMeshPro_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TextMeshProUGUI.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextMeshProUGUI_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TextMeshProUGUI.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextMeshProUGUI_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TextMeshProUGUI.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TextMeshProUGUI_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_ColorGradient.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_ColorGradient_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_ColorGradient.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_ColorGradient_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_ColorGradient.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_ColorGradient_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_Dropdown.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_Dropdown_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_Dropdown.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_Dropdown_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_Dropdown.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_Dropdown_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_FontAsset.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_FontAsset_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_FontAsset.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_FontAsset_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_FontAsset.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_FontAsset_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_InputField.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_InputField_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_InputField.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_InputField_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_InputField.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_InputField_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_PackageResourceImporterWindow.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_PackageResourceImporterWindow_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_PackageResourceImporterWindow.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_PackageResourceImporterWindow_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_PackageResourceImporterWindow.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_PackageResourceImporterWindow_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_ScrollbarEventHandler.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_ScrollbarEventHandler_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_ScrollbarEventHandler.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_ScrollbarEventHandler_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_ScrollbarEventHandler.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_ScrollbarEventHandler_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SelectionCaret.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SelectionCaret_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SelectionCaret.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SelectionCaret_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SelectionCaret.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SelectionCaret_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_Settings.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_Settings_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_Settings.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_Settings_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_Settings.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_Settings_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SpriteAnimator.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SpriteAnimator_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SpriteAnimator.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SpriteAnimator_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SpriteAnimator.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SpriteAnimator_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SpriteAsset.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SpriteAsset_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SpriteAsset.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SpriteAsset_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_SpriteAsset.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_SpriteAsset_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_StyleSheet.op_Implicit
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_StyleSheet_op_Implicit()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            bool conversion = ((bool) (arg0));
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, bool>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_StyleSheet.op_Equality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_StyleSheet_op_Equality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 == arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // TMPro.TMP_StyleSheet.op_Inequality
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void TMPro_TMP_StyleSheet_op_Inequality()
        {
            global::UnityEngine.Object arg0 = default(global::UnityEngine.Object);
            global::UnityEngine.Object arg1 = default(global::UnityEngine.Object);
            bool @operator = (arg0 != arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object, bool>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Object, UnityEngine.Object,
                        bool>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.OverlapBox
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_OverlapBox_0()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg2 = default(global::UnityEngine.Quaternion);
            int arg3 = default(int);
            global::UnityEngine.Physics.OverlapBox(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                UnityEngine.Quaternion, int, UnityEngine.Collider[]> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                    UnityEngine.Quaternion, int, UnityEngine.Collider[]>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.OverlapBox
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_OverlapBox_1()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Quaternion arg2 = default(global::UnityEngine.Quaternion);
            global::UnityEngine.Physics.OverlapBox(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                UnityEngine.Quaternion, UnityEngine.Collider[]> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3,
                    UnityEngine.Quaternion, UnityEngine.Collider[]>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.OverlapSphere
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_OverlapSphere()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            int arg2 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg3 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.OverlapSphere(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, int,
                UnityEngine.QueryTriggerInteraction, UnityEngine.Collider[]> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, int,
                    UnityEngine.QueryTriggerInteraction, UnityEngine.Collider[]>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.OverlapSphere
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_OverlapSphere_0()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            int arg2 = default(int);
            global::UnityEngine.Physics.OverlapSphere(arg0, arg1, arg2);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, int, UnityEngine.Collider[]>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, int,
                        UnityEngine.Collider[]>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.OverlapSphere
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_OverlapSphere_1()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            float arg1 = default(float);
            global::UnityEngine.Physics.OverlapSphere(arg0, arg1);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float, UnityEngine.Collider[]>
                optimized =
                    new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, float,
                        UnityEngine.Collider[]>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.OverlapCapsule
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_OverlapCapsule()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            float arg2 = default(float);
            int arg3 = default(int);
            global::UnityEngine.QueryTriggerInteraction arg4 = default(global::UnityEngine.QueryTriggerInteraction);
            global::UnityEngine.Physics.OverlapCapsule(arg0, arg1, arg2, arg3, arg4);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float, int,
                UnityEngine.QueryTriggerInteraction, UnityEngine.Collider[]> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float,
                    int, UnityEngine.QueryTriggerInteraction, UnityEngine.Collider[]>(
                    default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3, arg4);
            optimized.Invoke(default(object[]));
        }

        // UnityEngine.Physics.OverlapCapsule
        [global::UnityEngine.Scripting.PreserveAttribute()]
        public static void UnityEngine_Physics_OverlapCapsule_0()
        {
            global::UnityEngine.Vector3 arg0 = default(global::UnityEngine.Vector3);
            global::UnityEngine.Vector3 arg1 = default(global::UnityEngine.Vector3);
            float arg2 = default(float);
            int arg3 = default(int);
            global::UnityEngine.Physics.OverlapCapsule(arg0, arg1, arg2, arg3);
            global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float, int,
                UnityEngine.Collider[]> optimized =
                new global::Unity.VisualScripting.StaticFunctionInvoker<UnityEngine.Vector3, UnityEngine.Vector3, float,
                    int, UnityEngine.Collider[]>(default(global::System.Reflection.MethodInfo));
            optimized.Invoke(null, arg0, arg1, arg2, arg3);
            optimized.Invoke(default(object[]));
        }
    }
}